   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f4xx.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	SystemCoreClock
  19              		.data
  20              		.align	2
  23              	SystemCoreClock:
  24 0000 007A030A 		.word	168000000
  25              		.global	AHBPrescTable
  26              		.align	2
  29              	AHBPrescTable:
  30 0004 00       		.byte	0
  31 0005 00       		.byte	0
  32 0006 00       		.byte	0
  33 0007 00       		.byte	0
  34 0008 00       		.byte	0
  35 0009 00       		.byte	0
  36 000a 00       		.byte	0
  37 000b 00       		.byte	0
  38 000c 01       		.byte	1
  39 000d 02       		.byte	2
  40 000e 03       		.byte	3
  41 000f 04       		.byte	4
  42 0010 06       		.byte	6
  43 0011 07       		.byte	7
  44 0012 08       		.byte	8
  45 0013 09       		.byte	9
  46              		.text
  47              		.align	2
  48              		.global	SystemInit
  49              		.thumb
  50              		.thumb_func
  52              	SystemInit:
  53              	.LFB110:
  54              		.file 1 "../src/system_stm32f4xx.c"
   1:../src/system_stm32f4xx.c **** /**
   2:../src/system_stm32f4xx.c ****   ******************************************************************************
   3:../src/system_stm32f4xx.c ****   * @file    system_stm32f4xx.c
   4:../src/system_stm32f4xx.c ****   * @author  MCD Application Team
   5:../src/system_stm32f4xx.c ****   * @version V1.0.0
   6:../src/system_stm32f4xx.c ****   * @date    19-September-2011
   7:../src/system_stm32f4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   8:../src/system_stm32f4xx.c ****   *          This file contains the system clock configuration for STM32F4xx devices,
   9:../src/system_stm32f4xx.c ****   *          and is generated by the clock configuration tool
  10:../src/system_stm32f4xx.c ****   *          stm32f4xx_Clock_Configuration_V1.0.0.xls
  11:../src/system_stm32f4xx.c ****   *             
  12:../src/system_stm32f4xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:../src/system_stm32f4xx.c ****   *     user application:
  14:../src/system_stm32f4xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:../src/system_stm32f4xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:../src/system_stm32f4xx.c ****   *                      depending on the configuration made in the clock xls tool. 
  17:../src/system_stm32f4xx.c ****   *                      This function is called at startup just after reset and 
  18:../src/system_stm32f4xx.c ****   *                      before branch to main program. This call is made inside
  19:../src/system_stm32f4xx.c ****   *                      the "startup_stm32f4xx.s" file.
  20:../src/system_stm32f4xx.c ****   *
  21:../src/system_stm32f4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:../src/system_stm32f4xx.c ****   *                                  by the user application to setup the SysTick 
  23:../src/system_stm32f4xx.c ****   *                                  timer or configure other parameters.
  24:../src/system_stm32f4xx.c ****   *                                     
  25:../src/system_stm32f4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:../src/system_stm32f4xx.c ****   *                                 be called whenever the core clock is changed
  27:../src/system_stm32f4xx.c ****   *                                 during program execution.
  28:../src/system_stm32f4xx.c ****   *
  29:../src/system_stm32f4xx.c ****   * 2. After each device reset the HSI (16 MHz) is used as system clock source.
  30:../src/system_stm32f4xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
  31:../src/system_stm32f4xx.c ****   *    configure the system clock before to branch to main program.
  32:../src/system_stm32f4xx.c ****   *
  33:../src/system_stm32f4xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:../src/system_stm32f4xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:../src/system_stm32f4xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:../src/system_stm32f4xx.c ****   *
  37:../src/system_stm32f4xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz, refer to "HSE_VALUE" define
  38:../src/system_stm32f4xx.c ****   *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
  39:../src/system_stm32f4xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:../src/system_stm32f4xx.c ****   *    value to your own configuration.
  41:../src/system_stm32f4xx.c ****   *
  42:../src/system_stm32f4xx.c ****   * 5. This file configures the system clock as follows:
  43:../src/system_stm32f4xx.c ****   *=============================================================================
  44:../src/system_stm32f4xx.c ****   *=============================================================================
  45:../src/system_stm32f4xx.c ****   *        Supported STM32F4xx device revision    | Rev A
  46:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  47:../src/system_stm32f4xx.c ****   *        System Clock source                    | PLL (HSE)
  48:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  49:../src/system_stm32f4xx.c ****   *        SYSCLK(Hz)                             | 168000000
  50:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  51:../src/system_stm32f4xx.c ****   *        HCLK(Hz)                               | 168000000
  52:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  53:../src/system_stm32f4xx.c ****   *        AHB Prescaler                          | 1
  54:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  55:../src/system_stm32f4xx.c ****   *        APB1 Prescaler                         | 4
  56:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  57:../src/system_stm32f4xx.c ****   *        APB2 Prescaler                         | 2
  58:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  59:../src/system_stm32f4xx.c ****   *        HSE Frequency(Hz)                      | 8000000
  60:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  61:../src/system_stm32f4xx.c ****   *        PLL_M                                  | 8
  62:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  63:../src/system_stm32f4xx.c ****   *        PLL_N                                  | 336
  64:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  65:../src/system_stm32f4xx.c ****   *        PLL_P                                  | 2
  66:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  67:../src/system_stm32f4xx.c ****   *        PLL_Q                                  | 7
  68:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  69:../src/system_stm32f4xx.c ****   *        PLLI2S_N                               | NA
  70:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  71:../src/system_stm32f4xx.c ****   *        PLLI2S_R                               | NA
  72:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  73:../src/system_stm32f4xx.c ****   *        I2S input clock                        | NA
  74:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  75:../src/system_stm32f4xx.c ****   *        VDD(V)                                 | 3.3
  76:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  77:../src/system_stm32f4xx.c ****   *        High Performance mode                  | Enabled
  78:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  79:../src/system_stm32f4xx.c ****   *        Flash Latency(WS)                      | 5
  80:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  81:../src/system_stm32f4xx.c ****   *        Prefetch Buffer                        | OFF
  82:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  83:../src/system_stm32f4xx.c ****   *        Instruction cache                      | ON
  84:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  85:../src/system_stm32f4xx.c ****   *        Data cache                             | ON
  86:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  87:../src/system_stm32f4xx.c ****   *        Require 48MHz for USB OTG FS,          | Enabled
  88:../src/system_stm32f4xx.c ****   *        SDIO and RNG clock                     |
  89:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  90:../src/system_stm32f4xx.c ****   *=============================================================================
  91:../src/system_stm32f4xx.c ****   ****************************************************************************** 
  92:../src/system_stm32f4xx.c ****   * @attention
  93:../src/system_stm32f4xx.c ****   *
  94:../src/system_stm32f4xx.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  95:../src/system_stm32f4xx.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  96:../src/system_stm32f4xx.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  97:../src/system_stm32f4xx.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  98:../src/system_stm32f4xx.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  99:../src/system_stm32f4xx.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 100:../src/system_stm32f4xx.c ****   *
 101:../src/system_stm32f4xx.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 102:../src/system_stm32f4xx.c ****   ******************************************************************************
 103:../src/system_stm32f4xx.c ****   */
 104:../src/system_stm32f4xx.c **** 
 105:../src/system_stm32f4xx.c **** /** @addtogroup CMSIS
 106:../src/system_stm32f4xx.c ****   * @{
 107:../src/system_stm32f4xx.c ****   */
 108:../src/system_stm32f4xx.c **** 
 109:../src/system_stm32f4xx.c **** /** @addtogroup stm32f4xx_system
 110:../src/system_stm32f4xx.c ****   * @{
 111:../src/system_stm32f4xx.c ****   */  
 112:../src/system_stm32f4xx.c ****   
 113:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Includes
 114:../src/system_stm32f4xx.c ****   * @{
 115:../src/system_stm32f4xx.c ****   */
 116:../src/system_stm32f4xx.c **** 
 117:../src/system_stm32f4xx.c **** #include "stm32f4xx.h"
 118:../src/system_stm32f4xx.c **** 
 119:../src/system_stm32f4xx.c **** /**
 120:../src/system_stm32f4xx.c ****   * @}
 121:../src/system_stm32f4xx.c ****   */
 122:../src/system_stm32f4xx.c **** 
 123:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
 124:../src/system_stm32f4xx.c ****   * @{
 125:../src/system_stm32f4xx.c ****   */
 126:../src/system_stm32f4xx.c **** 
 127:../src/system_stm32f4xx.c **** /**
 128:../src/system_stm32f4xx.c ****   * @}
 129:../src/system_stm32f4xx.c ****   */
 130:../src/system_stm32f4xx.c **** 
 131:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Defines
 132:../src/system_stm32f4xx.c ****   * @{
 133:../src/system_stm32f4xx.c ****   */
 134:../src/system_stm32f4xx.c **** 
 135:../src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 136:../src/system_stm32f4xx.c ****      on STM324xG_EVAL board as data memory  */
 137:../src/system_stm32f4xx.c **** /* #define DATA_IN_ExtSRAM */
 138:../src/system_stm32f4xx.c **** 
 139:../src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 140:../src/system_stm32f4xx.c ****      Internal SRAM. */
 141:../src/system_stm32f4xx.c **** /* #define VECT_TAB_SRAM */
 142:../src/system_stm32f4xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
 143:../src/system_stm32f4xx.c ****                                    This value must be a multiple of 0x200. */
 144:../src/system_stm32f4xx.c **** 
 145:../src/system_stm32f4xx.c **** 
 146:../src/system_stm32f4xx.c **** /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
 147:../src/system_stm32f4xx.c **** #define PLL_M      8
 148:../src/system_stm32f4xx.c **** #define PLL_N      336
 149:../src/system_stm32f4xx.c **** 
 150:../src/system_stm32f4xx.c **** /* SYSCLK = PLL_VCO / PLL_P */
 151:../src/system_stm32f4xx.c **** #define PLL_P      2
 152:../src/system_stm32f4xx.c **** 
 153:../src/system_stm32f4xx.c **** /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
 154:../src/system_stm32f4xx.c **** #define PLL_Q      7
 155:../src/system_stm32f4xx.c **** 
 156:../src/system_stm32f4xx.c **** /**
 157:../src/system_stm32f4xx.c ****   * @}
 158:../src/system_stm32f4xx.c ****   */
 159:../src/system_stm32f4xx.c **** 
 160:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Macros
 161:../src/system_stm32f4xx.c ****   * @{
 162:../src/system_stm32f4xx.c ****   */
 163:../src/system_stm32f4xx.c **** 
 164:../src/system_stm32f4xx.c **** /**
 165:../src/system_stm32f4xx.c ****   * @}
 166:../src/system_stm32f4xx.c ****   */
 167:../src/system_stm32f4xx.c **** 
 168:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Variables
 169:../src/system_stm32f4xx.c ****   * @{
 170:../src/system_stm32f4xx.c ****   */
 171:../src/system_stm32f4xx.c **** 
 172:../src/system_stm32f4xx.c ****   uint32_t SystemCoreClock = 168000000;
 173:../src/system_stm32f4xx.c **** 
 174:../src/system_stm32f4xx.c ****   __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 175:../src/system_stm32f4xx.c **** 
 176:../src/system_stm32f4xx.c **** /**
 177:../src/system_stm32f4xx.c ****   * @}
 178:../src/system_stm32f4xx.c ****   */
 179:../src/system_stm32f4xx.c **** 
 180:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
 181:../src/system_stm32f4xx.c ****   * @{
 182:../src/system_stm32f4xx.c ****   */
 183:../src/system_stm32f4xx.c **** 
 184:../src/system_stm32f4xx.c **** static void SetSysClock(void);
 185:../src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 186:../src/system_stm32f4xx.c ****   static void SystemInit_ExtMemCtl(void); 
 187:../src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 188:../src/system_stm32f4xx.c **** 
 189:../src/system_stm32f4xx.c **** /**
 190:../src/system_stm32f4xx.c ****   * @}
 191:../src/system_stm32f4xx.c ****   */
 192:../src/system_stm32f4xx.c **** 
 193:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Functions
 194:../src/system_stm32f4xx.c ****   * @{
 195:../src/system_stm32f4xx.c ****   */
 196:../src/system_stm32f4xx.c **** 
 197:../src/system_stm32f4xx.c **** /**
 198:../src/system_stm32f4xx.c ****   * @brief  Setup the microcontroller system
 199:../src/system_stm32f4xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 200:../src/system_stm32f4xx.c ****   *         SystemFrequency variable.
 201:../src/system_stm32f4xx.c ****   * @param  None
 202:../src/system_stm32f4xx.c ****   * @retval None
 203:../src/system_stm32f4xx.c ****   */
 204:../src/system_stm32f4xx.c **** void SystemInit(void)
 205:../src/system_stm32f4xx.c **** {
  55              		.loc 1 205 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59 0000 80B5     		push	{r7, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 7, -8
  63              		.cfi_offset 14, -4
  64 0002 00AF     		add	r7, sp, #0
  65              	.LCFI1:
  66              		.cfi_def_cfa_register 7
 206:../src/system_stm32f4xx.c ****   /* FPU settings ------------------------------------------------------------*/
 207:../src/system_stm32f4xx.c ****   #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 208:../src/system_stm32f4xx.c **** 	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 209:../src/system_stm32f4xx.c ****   #endif
 210:../src/system_stm32f4xx.c **** 
 211:../src/system_stm32f4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 212:../src/system_stm32f4xx.c ****   /* Set HSION bit */
 213:../src/system_stm32f4xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  67              		.loc 1 213 0
  68 0004 124B     		ldr	r3, .L2
  69 0006 124A     		ldr	r2, .L2
  70 0008 1268     		ldr	r2, [r2, #0]
  71 000a 42F00102 		orr	r2, r2, #1
  72 000e 1A60     		str	r2, [r3, #0]
 214:../src/system_stm32f4xx.c **** 
 215:../src/system_stm32f4xx.c ****   /* Reset CFGR register */
 216:../src/system_stm32f4xx.c ****   RCC->CFGR = 0x00000000;
  73              		.loc 1 216 0
  74 0010 0F4B     		ldr	r3, .L2
  75 0012 4FF00002 		mov	r2, #0
  76 0016 9A60     		str	r2, [r3, #8]
 217:../src/system_stm32f4xx.c **** 
 218:../src/system_stm32f4xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 219:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  77              		.loc 1 219 0
  78 0018 0D4A     		ldr	r2, .L2
  79 001a 0D4B     		ldr	r3, .L2
  80 001c 1B68     		ldr	r3, [r3, #0]
  81 001e 23F08473 		bic	r3, r3, #17301504
  82 0022 23F48033 		bic	r3, r3, #65536
  83 0026 1360     		str	r3, [r2, #0]
 220:../src/system_stm32f4xx.c **** 
 221:../src/system_stm32f4xx.c ****   /* Reset PLLCFGR register */
 222:../src/system_stm32f4xx.c ****   RCC->PLLCFGR = 0x24003010;
  84              		.loc 1 222 0
  85 0028 094B     		ldr	r3, .L2
  86 002a 0A4A     		ldr	r2, .L2+4
  87 002c 5A60     		str	r2, [r3, #4]
 223:../src/system_stm32f4xx.c **** 
 224:../src/system_stm32f4xx.c ****   /* Reset HSEBYP bit */
 225:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  88              		.loc 1 225 0
  89 002e 084B     		ldr	r3, .L2
  90 0030 074A     		ldr	r2, .L2
  91 0032 1268     		ldr	r2, [r2, #0]
  92 0034 22F48022 		bic	r2, r2, #262144
  93 0038 1A60     		str	r2, [r3, #0]
 226:../src/system_stm32f4xx.c **** 
 227:../src/system_stm32f4xx.c ****   /* Disable all interrupts */
 228:../src/system_stm32f4xx.c ****   RCC->CIR = 0x00000000;
  94              		.loc 1 228 0
  95 003a 054B     		ldr	r3, .L2
  96 003c 4FF00002 		mov	r2, #0
  97 0040 DA60     		str	r2, [r3, #12]
 229:../src/system_stm32f4xx.c **** 
 230:../src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 231:../src/system_stm32f4xx.c ****   SystemInit_ExtMemCtl(); 
 232:../src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 233:../src/system_stm32f4xx.c ****          
 234:../src/system_stm32f4xx.c ****   /* Configure the System clock source, PLL Multiplier and Divider factors, 
 235:../src/system_stm32f4xx.c ****      AHB/APBx prescalers and Flash settings ----------------------------------*/
 236:../src/system_stm32f4xx.c ****   SetSysClock();
  98              		.loc 1 236 0
  99 0042 00F093F8 		bl	SetSysClock
 237:../src/system_stm32f4xx.c **** 
 238:../src/system_stm32f4xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 239:../src/system_stm32f4xx.c **** #ifdef VECT_TAB_SRAM
 240:../src/system_stm32f4xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 241:../src/system_stm32f4xx.c **** #else
 242:../src/system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 100              		.loc 1 242 0
 101 0046 044B     		ldr	r3, .L2+8
 102 0048 4FF00062 		mov	r2, #134217728
 103 004c 9A60     		str	r2, [r3, #8]
 243:../src/system_stm32f4xx.c **** #endif
 244:../src/system_stm32f4xx.c **** }
 104              		.loc 1 244 0
 105 004e 80BD     		pop	{r7, pc}
 106              	.L3:
 107              		.align	2
 108              	.L2:
 109 0050 00380240 		.word	1073887232
 110 0054 10300024 		.word	603992080
 111 0058 00ED00E0 		.word	-536810240
 112              		.cfi_endproc
 113              	.LFE110:
 115              		.align	2
 116              		.global	SystemCoreClockUpdate
 117              		.thumb
 118              		.thumb_func
 120              	SystemCoreClockUpdate:
 121              	.LFB111:
 245:../src/system_stm32f4xx.c **** 
 246:../src/system_stm32f4xx.c **** /**
 247:../src/system_stm32f4xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 248:../src/system_stm32f4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 249:../src/system_stm32f4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 250:../src/system_stm32f4xx.c ****   *         other parameters.
 251:../src/system_stm32f4xx.c ****   *           
 252:../src/system_stm32f4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 253:../src/system_stm32f4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 254:../src/system_stm32f4xx.c ****   *         based on this variable will be incorrect.         
 255:../src/system_stm32f4xx.c ****   *     
 256:../src/system_stm32f4xx.c ****   * @note   - The system frequency computed by this function is not the real 
 257:../src/system_stm32f4xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 258:../src/system_stm32f4xx.c ****   *           constant and the selected clock source:
 259:../src/system_stm32f4xx.c ****   *             
 260:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 261:../src/system_stm32f4xx.c ****   *                                              
 262:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 263:../src/system_stm32f4xx.c ****   *                          
 264:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 265:../src/system_stm32f4xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 266:../src/system_stm32f4xx.c ****   *         
 267:../src/system_stm32f4xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 268:../src/system_stm32f4xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 269:../src/system_stm32f4xx.c ****   *             in voltage and temperature.   
 270:../src/system_stm32f4xx.c ****   *    
 271:../src/system_stm32f4xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 272:../src/system_stm32f4xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 273:../src/system_stm32f4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 274:../src/system_stm32f4xx.c ****   *              have wrong result.
 275:../src/system_stm32f4xx.c ****   *                
 276:../src/system_stm32f4xx.c ****   *         - The result of this function could be not correct when using fractional
 277:../src/system_stm32f4xx.c ****   *           value for HSE crystal.
 278:../src/system_stm32f4xx.c ****   *     
 279:../src/system_stm32f4xx.c ****   * @param  None
 280:../src/system_stm32f4xx.c ****   * @retval None
 281:../src/system_stm32f4xx.c ****   */
 282:../src/system_stm32f4xx.c **** void SystemCoreClockUpdate(void)
 283:../src/system_stm32f4xx.c **** {
 122              		.loc 1 283 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 24
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127 005c 80B4     		push	{r7}
 128              	.LCFI2:
 129              		.cfi_def_cfa_offset 4
 130              		.cfi_offset 7, -4
 131 005e 87B0     		sub	sp, sp, #28
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 32
 134 0060 00AF     		add	r7, sp, #0
 135              	.LCFI4:
 136              		.cfi_def_cfa_register 7
 284:../src/system_stm32f4xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 137              		.loc 1 284 0
 138 0062 4FF00003 		mov	r3, #0
 139 0066 3B61     		str	r3, [r7, #16]
 140 0068 4FF00003 		mov	r3, #0
 141 006c 7B61     		str	r3, [r7, #20]
 142 006e 4FF00203 		mov	r3, #2
 143 0072 FB60     		str	r3, [r7, #12]
 144 0074 4FF00003 		mov	r3, #0
 145 0078 BB60     		str	r3, [r7, #8]
 146 007a 4FF00203 		mov	r3, #2
 147 007e 7B60     		str	r3, [r7, #4]
 285:../src/system_stm32f4xx.c ****   
 286:../src/system_stm32f4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 287:../src/system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 148              		.loc 1 287 0
 149 0080 354B     		ldr	r3, .L13
 150 0082 9B68     		ldr	r3, [r3, #8]
 151 0084 03F00C03 		and	r3, r3, #12
 152 0088 3B61     		str	r3, [r7, #16]
 288:../src/system_stm32f4xx.c **** 
 289:../src/system_stm32f4xx.c ****   switch (tmp)
 153              		.loc 1 289 0
 154 008a 3B69     		ldr	r3, [r7, #16]
 155 008c 042B     		cmp	r3, #4
 156 008e 07D0     		beq	.L7
 157 0090 082B     		cmp	r3, #8
 158 0092 09D0     		beq	.L8
 159 0094 002B     		cmp	r3, #0
 160 0096 45D1     		bne	.L12
 161              	.L6:
 290:../src/system_stm32f4xx.c ****   {
 291:../src/system_stm32f4xx.c ****     case 0x00:  /* HSI used as system clock source */
 292:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 162              		.loc 1 292 0
 163 0098 304B     		ldr	r3, .L13+4
 164 009a 314A     		ldr	r2, .L13+8
 165 009c 1A60     		str	r2, [r3, #0]
 293:../src/system_stm32f4xx.c ****       break;
 166              		.loc 1 293 0
 167 009e 45E0     		b	.L9
 168              	.L7:
 294:../src/system_stm32f4xx.c ****     case 0x04:  /* HSE used as system clock source */
 295:../src/system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 169              		.loc 1 295 0
 170 00a0 2E4B     		ldr	r3, .L13+4
 171 00a2 304A     		ldr	r2, .L13+12
 172 00a4 1A60     		str	r2, [r3, #0]
 296:../src/system_stm32f4xx.c ****       break;
 173              		.loc 1 296 0
 174 00a6 41E0     		b	.L9
 175              	.L8:
 297:../src/system_stm32f4xx.c ****     case 0x08:  /* PLL used as system clock source */
 298:../src/system_stm32f4xx.c **** 
 299:../src/system_stm32f4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 300:../src/system_stm32f4xx.c ****          SYSCLK = PLL_VCO / PLL_P
 301:../src/system_stm32f4xx.c ****          */    
 302:../src/system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 176              		.loc 1 302 0
 177 00a8 2B4B     		ldr	r3, .L13
 178 00aa 5B68     		ldr	r3, [r3, #4]
 179 00ac 03F48003 		and	r3, r3, #4194304
 180 00b0 4FEA9353 		lsr	r3, r3, #22
 181 00b4 BB60     		str	r3, [r7, #8]
 303:../src/system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 182              		.loc 1 303 0
 183 00b6 284B     		ldr	r3, .L13
 184 00b8 5B68     		ldr	r3, [r3, #4]
 185 00ba 03F03F03 		and	r3, r3, #63
 186 00be 7B60     		str	r3, [r7, #4]
 304:../src/system_stm32f4xx.c ****       
 305:../src/system_stm32f4xx.c ****       if (pllsource != 0)
 187              		.loc 1 305 0
 188 00c0 BB68     		ldr	r3, [r7, #8]
 189 00c2 002B     		cmp	r3, #0
 190 00c4 0ED0     		beq	.L10
 306:../src/system_stm32f4xx.c ****       {
 307:../src/system_stm32f4xx.c ****         /* HSE used as PLL clock source */
 308:../src/system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 191              		.loc 1 308 0
 192 00c6 274A     		ldr	r2, .L13+12
 193 00c8 7B68     		ldr	r3, [r7, #4]
 194 00ca B2FBF3F2 		udiv	r2, r2, r3
 195 00ce 224B     		ldr	r3, .L13
 196 00d0 5968     		ldr	r1, [r3, #4]
 197 00d2 47F6C073 		movw	r3, #32704
 198 00d6 0B40     		ands	r3, r3, r1
 199 00d8 4FEA9313 		lsr	r3, r3, #6
 200 00dc 03FB02F3 		mul	r3, r3, r2
 201 00e0 7B61     		str	r3, [r7, #20]
 202 00e2 0DE0     		b	.L11
 203              	.L10:
 309:../src/system_stm32f4xx.c ****       }
 310:../src/system_stm32f4xx.c ****       else
 311:../src/system_stm32f4xx.c ****       {
 312:../src/system_stm32f4xx.c ****         /* HSI used as PLL clock source */
 313:../src/system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 204              		.loc 1 313 0
 205 00e4 1E4A     		ldr	r2, .L13+8
 206 00e6 7B68     		ldr	r3, [r7, #4]
 207 00e8 B2FBF3F2 		udiv	r2, r2, r3
 208 00ec 1A4B     		ldr	r3, .L13
 209 00ee 5968     		ldr	r1, [r3, #4]
 210 00f0 47F6C073 		movw	r3, #32704
 211 00f4 0B40     		ands	r3, r3, r1
 212 00f6 4FEA9313 		lsr	r3, r3, #6
 213 00fa 03FB02F3 		mul	r3, r3, r2
 214 00fe 7B61     		str	r3, [r7, #20]
 215              	.L11:
 314:../src/system_stm32f4xx.c ****       }
 315:../src/system_stm32f4xx.c **** 
 316:../src/system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 216              		.loc 1 316 0
 217 0100 154B     		ldr	r3, .L13
 218 0102 5B68     		ldr	r3, [r3, #4]
 219 0104 03F44033 		and	r3, r3, #196608
 220 0108 4FEA1343 		lsr	r3, r3, #16
 221 010c 03F10103 		add	r3, r3, #1
 222 0110 4FEA4303 		lsl	r3, r3, #1
 223 0114 FB60     		str	r3, [r7, #12]
 317:../src/system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 224              		.loc 1 317 0
 225 0116 7A69     		ldr	r2, [r7, #20]
 226 0118 FB68     		ldr	r3, [r7, #12]
 227 011a B2FBF3F2 		udiv	r2, r2, r3
 228 011e 0F4B     		ldr	r3, .L13+4
 229 0120 1A60     		str	r2, [r3, #0]
 318:../src/system_stm32f4xx.c ****       break;
 230              		.loc 1 318 0
 231 0122 03E0     		b	.L9
 232              	.L12:
 319:../src/system_stm32f4xx.c ****     default:
 320:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 233              		.loc 1 320 0
 234 0124 0D4B     		ldr	r3, .L13+4
 235 0126 0E4A     		ldr	r2, .L13+8
 236 0128 1A60     		str	r2, [r3, #0]
 321:../src/system_stm32f4xx.c ****       break;
 237              		.loc 1 321 0
 238 012a 00BF     		nop
 239              	.L9:
 322:../src/system_stm32f4xx.c ****   }
 323:../src/system_stm32f4xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 324:../src/system_stm32f4xx.c ****   /* Get HCLK prescaler */
 325:../src/system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 240              		.loc 1 325 0
 241 012c 0A4B     		ldr	r3, .L13
 242 012e 9B68     		ldr	r3, [r3, #8]
 243 0130 03F0F003 		and	r3, r3, #240
 244 0134 4FEA1313 		lsr	r3, r3, #4
 245 0138 0B4A     		ldr	r2, .L13+16
 246 013a D35C     		ldrb	r3, [r2, r3]
 247 013c DBB2     		uxtb	r3, r3
 248 013e 3B61     		str	r3, [r7, #16]
 326:../src/system_stm32f4xx.c ****   /* HCLK frequency */
 327:../src/system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 249              		.loc 1 327 0
 250 0140 064B     		ldr	r3, .L13+4
 251 0142 1A68     		ldr	r2, [r3, #0]
 252 0144 3B69     		ldr	r3, [r7, #16]
 253 0146 22FA03F2 		lsr	r2, r2, r3
 254 014a 044B     		ldr	r3, .L13+4
 255 014c 1A60     		str	r2, [r3, #0]
 328:../src/system_stm32f4xx.c **** }
 256              		.loc 1 328 0
 257 014e 07F11C07 		add	r7, r7, #28
 258 0152 BD46     		mov	sp, r7
 259 0154 80BC     		pop	{r7}
 260 0156 7047     		bx	lr
 261              	.L14:
 262              		.align	2
 263              	.L13:
 264 0158 00380240 		.word	1073887232
 265 015c 00000000 		.word	SystemCoreClock
 266 0160 0024F400 		.word	16000000
 267 0164 00127A00 		.word	8000000
 268 0168 00000000 		.word	AHBPrescTable
 269              		.cfi_endproc
 270              	.LFE111:
 272              		.align	2
 273              		.thumb
 274              		.thumb_func
 276              	SetSysClock:
 277              	.LFB112:
 329:../src/system_stm32f4xx.c **** 
 330:../src/system_stm32f4xx.c **** /**
 331:../src/system_stm32f4xx.c ****   * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
 332:../src/system_stm32f4xx.c ****   *         AHB/APBx prescalers and Flash settings
 333:../src/system_stm32f4xx.c ****   * @Note   This function should be called only once the RCC clock configuration  
 334:../src/system_stm32f4xx.c ****   *         is reset to the default reset state (done in SystemInit() function).   
 335:../src/system_stm32f4xx.c ****   * @param  None
 336:../src/system_stm32f4xx.c ****   * @retval None
 337:../src/system_stm32f4xx.c ****   */
 338:../src/system_stm32f4xx.c **** static void SetSysClock(void)
 339:../src/system_stm32f4xx.c **** {
 278              		.loc 1 339 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 8
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283 016c 80B4     		push	{r7}
 284              	.LCFI5:
 285              		.cfi_def_cfa_offset 4
 286              		.cfi_offset 7, -4
 287 016e 83B0     		sub	sp, sp, #12
 288              	.LCFI6:
 289              		.cfi_def_cfa_offset 16
 290 0170 00AF     		add	r7, sp, #0
 291              	.LCFI7:
 292              		.cfi_def_cfa_register 7
 340:../src/system_stm32f4xx.c **** /******************************************************************************/
 341:../src/system_stm32f4xx.c **** /*            PLL (clocked by HSE) used as System clock source                */
 342:../src/system_stm32f4xx.c **** /******************************************************************************/
 343:../src/system_stm32f4xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 293              		.loc 1 343 0
 294 0172 4FF00003 		mov	r3, #0
 295 0176 7B60     		str	r3, [r7, #4]
 296 0178 4FF00003 		mov	r3, #0
 297 017c 3B60     		str	r3, [r7, #0]
 344:../src/system_stm32f4xx.c ****   
 345:../src/system_stm32f4xx.c ****   /* Enable HSE */
 346:../src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 298              		.loc 1 346 0
 299 017e 374B     		ldr	r3, .L23
 300 0180 364A     		ldr	r2, .L23
 301 0182 1268     		ldr	r2, [r2, #0]
 302 0184 42F48032 		orr	r2, r2, #65536
 303 0188 1A60     		str	r2, [r3, #0]
 304              	.L17:
 347:../src/system_stm32f4xx.c ****  
 348:../src/system_stm32f4xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 349:../src/system_stm32f4xx.c ****   do
 350:../src/system_stm32f4xx.c ****   {
 351:../src/system_stm32f4xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 305              		.loc 1 351 0 discriminator 1
 306 018a 344B     		ldr	r3, .L23
 307 018c 1B68     		ldr	r3, [r3, #0]
 308 018e 03F40033 		and	r3, r3, #131072
 309 0192 3B60     		str	r3, [r7, #0]
 352:../src/system_stm32f4xx.c ****     StartUpCounter++;
 310              		.loc 1 352 0 discriminator 1
 311 0194 7B68     		ldr	r3, [r7, #4]
 312 0196 03F10103 		add	r3, r3, #1
 313 019a 7B60     		str	r3, [r7, #4]
 353:../src/system_stm32f4xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 314              		.loc 1 353 0 discriminator 1
 315 019c 3B68     		ldr	r3, [r7, #0]
 316 019e 002B     		cmp	r3, #0
 317 01a0 03D1     		bne	.L16
 318 01a2 7B68     		ldr	r3, [r7, #4]
 319 01a4 B3F5A06F 		cmp	r3, #1280
 320 01a8 EFD1     		bne	.L17
 321              	.L16:
 354:../src/system_stm32f4xx.c **** 
 355:../src/system_stm32f4xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 322              		.loc 1 355 0
 323 01aa 2C4B     		ldr	r3, .L23
 324 01ac 1B68     		ldr	r3, [r3, #0]
 325 01ae 03F40033 		and	r3, r3, #131072
 326 01b2 002B     		cmp	r3, #0
 327 01b4 03D0     		beq	.L18
 356:../src/system_stm32f4xx.c ****   {
 357:../src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x01;
 328              		.loc 1 357 0
 329 01b6 4FF00103 		mov	r3, #1
 330 01ba 3B60     		str	r3, [r7, #0]
 331 01bc 02E0     		b	.L19
 332              	.L18:
 358:../src/system_stm32f4xx.c ****   }
 359:../src/system_stm32f4xx.c ****   else
 360:../src/system_stm32f4xx.c ****   {
 361:../src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x00;
 333              		.loc 1 361 0
 334 01be 4FF00003 		mov	r3, #0
 335 01c2 3B60     		str	r3, [r7, #0]
 336              	.L19:
 362:../src/system_stm32f4xx.c ****   }
 363:../src/system_stm32f4xx.c **** 
 364:../src/system_stm32f4xx.c ****   if (HSEStatus == (uint32_t)0x01)
 337              		.loc 1 364 0
 338 01c4 3B68     		ldr	r3, [r7, #0]
 339 01c6 012B     		cmp	r3, #1
 340 01c8 42D1     		bne	.L15
 365:../src/system_stm32f4xx.c ****   {
 366:../src/system_stm32f4xx.c ****     /* Enable high performance mode, System frequency up to 168 MHz */
 367:../src/system_stm32f4xx.c ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 341              		.loc 1 367 0
 342 01ca 244B     		ldr	r3, .L23
 343 01cc 234A     		ldr	r2, .L23
 344 01ce 126C     		ldr	r2, [r2, #64]
 345 01d0 42F08052 		orr	r2, r2, #268435456
 346 01d4 1A64     		str	r2, [r3, #64]
 368:../src/system_stm32f4xx.c ****     PWR->CR |= PWR_CR_PMODE;  
 347              		.loc 1 368 0
 348 01d6 224B     		ldr	r3, .L23+4
 349 01d8 214A     		ldr	r2, .L23+4
 350 01da 1268     		ldr	r2, [r2, #0]
 351 01dc 42F48042 		orr	r2, r2, #16384
 352 01e0 1A60     		str	r2, [r3, #0]
 369:../src/system_stm32f4xx.c **** 
 370:../src/system_stm32f4xx.c ****     /* HCLK = SYSCLK / 1*/
 371:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 353              		.loc 1 371 0
 354 01e2 1E4B     		ldr	r3, .L23
 355 01e4 1D4A     		ldr	r2, .L23
 356 01e6 9268     		ldr	r2, [r2, #8]
 357 01e8 9A60     		str	r2, [r3, #8]
 372:../src/system_stm32f4xx.c ****       
 373:../src/system_stm32f4xx.c ****     /* PCLK2 = HCLK / 2*/
 374:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 358              		.loc 1 374 0
 359 01ea 1C4B     		ldr	r3, .L23
 360 01ec 1B4A     		ldr	r2, .L23
 361 01ee 9268     		ldr	r2, [r2, #8]
 362 01f0 42F40042 		orr	r2, r2, #32768
 363 01f4 9A60     		str	r2, [r3, #8]
 375:../src/system_stm32f4xx.c ****     
 376:../src/system_stm32f4xx.c ****     /* PCLK1 = HCLK / 4*/
 377:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 364              		.loc 1 377 0
 365 01f6 194B     		ldr	r3, .L23
 366 01f8 184A     		ldr	r2, .L23
 367 01fa 9268     		ldr	r2, [r2, #8]
 368 01fc 42F4A052 		orr	r2, r2, #5120
 369 0200 9A60     		str	r2, [r3, #8]
 378:../src/system_stm32f4xx.c **** 
 379:../src/system_stm32f4xx.c ****     /* Configure the main PLL */
 380:../src/system_stm32f4xx.c ****     RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 370              		.loc 1 380 0
 371 0202 164B     		ldr	r3, .L23
 372 0204 174A     		ldr	r2, .L23+8
 373 0206 5A60     		str	r2, [r3, #4]
 381:../src/system_stm32f4xx.c ****                    (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 382:../src/system_stm32f4xx.c **** 
 383:../src/system_stm32f4xx.c ****     /* Enable the main PLL */
 384:../src/system_stm32f4xx.c ****     RCC->CR |= RCC_CR_PLLON;
 374              		.loc 1 384 0
 375 0208 144B     		ldr	r3, .L23
 376 020a 144A     		ldr	r2, .L23
 377 020c 1268     		ldr	r2, [r2, #0]
 378 020e 42F08072 		orr	r2, r2, #16777216
 379 0212 1A60     		str	r2, [r3, #0]
 385:../src/system_stm32f4xx.c **** 
 386:../src/system_stm32f4xx.c ****     /* Wait till the main PLL is ready */
 387:../src/system_stm32f4xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 380              		.loc 1 387 0
 381 0214 00BF     		nop
 382              	.L21:
 383              		.loc 1 387 0 is_stmt 0 discriminator 1
 384 0216 114B     		ldr	r3, .L23
 385 0218 1B68     		ldr	r3, [r3, #0]
 386 021a 03F00073 		and	r3, r3, #33554432
 387 021e 002B     		cmp	r3, #0
 388 0220 F9D0     		beq	.L21
 388:../src/system_stm32f4xx.c ****     {
 389:../src/system_stm32f4xx.c ****     }
 390:../src/system_stm32f4xx.c ****    
 391:../src/system_stm32f4xx.c ****     /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
 392:../src/system_stm32f4xx.c ****     FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 389              		.loc 1 392 0 is_stmt 1
 390 0222 114B     		ldr	r3, .L23+12
 391 0224 40F20562 		movw	r2, #1541
 392 0228 1A60     		str	r2, [r3, #0]
 393:../src/system_stm32f4xx.c **** 
 394:../src/system_stm32f4xx.c ****     /* Select the main PLL as system clock source */
 395:../src/system_stm32f4xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 393              		.loc 1 395 0
 394 022a 0C4B     		ldr	r3, .L23
 395 022c 0B4A     		ldr	r2, .L23
 396 022e 9268     		ldr	r2, [r2, #8]
 397 0230 22F00302 		bic	r2, r2, #3
 398 0234 9A60     		str	r2, [r3, #8]
 396:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_SW_PLL;
 399              		.loc 1 396 0
 400 0236 094B     		ldr	r3, .L23
 401 0238 084A     		ldr	r2, .L23
 402 023a 9268     		ldr	r2, [r2, #8]
 403 023c 42F00202 		orr	r2, r2, #2
 404 0240 9A60     		str	r2, [r3, #8]
 397:../src/system_stm32f4xx.c **** 
 398:../src/system_stm32f4xx.c ****     /* Wait till the main PLL is used as system clock source */
 399:../src/system_stm32f4xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 405              		.loc 1 399 0
 406 0242 00BF     		nop
 407              	.L22:
 408              		.loc 1 399 0 is_stmt 0 discriminator 1
 409 0244 054B     		ldr	r3, .L23
 410 0246 9B68     		ldr	r3, [r3, #8]
 411 0248 03F00C03 		and	r3, r3, #12
 412 024c 082B     		cmp	r3, #8
 413 024e F9D1     		bne	.L22
 414              	.L15:
 400:../src/system_stm32f4xx.c ****     {
 401:../src/system_stm32f4xx.c ****     }
 402:../src/system_stm32f4xx.c ****   }
 403:../src/system_stm32f4xx.c ****   else
 404:../src/system_stm32f4xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock
 405:../src/system_stm32f4xx.c ****          configuration. User can add here some code to deal with this error */
 406:../src/system_stm32f4xx.c ****   }
 407:../src/system_stm32f4xx.c **** 
 408:../src/system_stm32f4xx.c **** }
 415              		.loc 1 408 0 is_stmt 1
 416 0250 07F10C07 		add	r7, r7, #12
 417 0254 BD46     		mov	sp, r7
 418 0256 80BC     		pop	{r7}
 419 0258 7047     		bx	lr
 420              	.L24:
 421 025a 00BF     		.align	2
 422              	.L23:
 423 025c 00380240 		.word	1073887232
 424 0260 00700040 		.word	1073770496
 425 0264 08544007 		.word	121656328
 426 0268 003C0240 		.word	1073888256
 427              		.cfi_endproc
 428              	.LFE112:
 430              	.Letext0:
 431              		.file 2 "/opt/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 432              		.file 3 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Include/core_
 433              		.file 4 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Device/ST/STM
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f4xx.c
     /tmp/ccRivIDQ.s:23     .data:00000000 SystemCoreClock
     /tmp/ccRivIDQ.s:20     .data:00000000 $d
     /tmp/ccRivIDQ.s:29     .data:00000004 AHBPrescTable
     /tmp/ccRivIDQ.s:47     .text:00000000 $t
     /tmp/ccRivIDQ.s:52     .text:00000000 SystemInit
     /tmp/ccRivIDQ.s:276    .text:0000016c SetSysClock
     /tmp/ccRivIDQ.s:109    .text:00000050 $d
     /tmp/ccRivIDQ.s:115    .text:0000005c $t
     /tmp/ccRivIDQ.s:120    .text:0000005c SystemCoreClockUpdate
     /tmp/ccRivIDQ.s:264    .text:00000158 $d
     /tmp/ccRivIDQ.s:272    .text:0000016c $t
     /tmp/ccRivIDQ.s:423    .text:0000025c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ee386580922180e5cad1057f989de60d
                           .group:00000000 wm4.stm32f4xx.h.54.6e1f0ee5c76cc1e53c8ea6d18297b5fd
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_adc.h.108.1710484bf41297b93f825b3b15cbdff8
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rng.h.31.1ec493d56b7a8e5a71238519cae6dea7
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c

NO UNDEFINED SYMBOLS
