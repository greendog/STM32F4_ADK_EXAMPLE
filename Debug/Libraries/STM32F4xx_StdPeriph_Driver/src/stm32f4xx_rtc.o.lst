   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	RTC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	RTC_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * limitations under the License.
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  26              		.loc 1 374 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 84B0     		sub	sp, sp, #16
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  41              		.loc 1 375 0
  42 0006 4FF00003 		mov	r3, #0
  43 000a 7B60     		str	r3, [r7, #4]
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  44              		.loc 1 376 0
  45 000c 4FF00003 		mov	r3, #0
  46 0010 BB60     		str	r3, [r7, #8]
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  47              		.loc 1 377 0
  48 0012 4FF00003 		mov	r3, #0
  49 0016 FB73     		strb	r3, [r7, #15]
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  50              		.loc 1 380 0
  51 0018 3F4B     		ldr	r3, .L9
  52 001a 4FF0CA02 		mov	r2, #202
  53 001e 5A62     		str	r2, [r3, #36]
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  54              		.loc 1 381 0
  55 0020 3D4B     		ldr	r3, .L9
  56 0022 4FF05302 		mov	r2, #83
  57 0026 5A62     		str	r2, [r3, #36]
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  58              		.loc 1 384 0
  59 0028 FFF7FEFF 		bl	RTC_EnterInitMode
  60 002c 0346     		mov	r3, r0
  61 002e 002B     		cmp	r3, #0
  62 0030 03D1     		bne	.L2
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  63              		.loc 1 386 0
  64 0032 4FF00003 		mov	r3, #0
  65 0036 FB73     		strb	r3, [r7, #15]
  66 0038 64E0     		b	.L3
  67              	.L2:
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  68              		.loc 1 391 0
  69 003a 374B     		ldr	r3, .L9
  70 003c 4FF00002 		mov	r2, #0
  71 0040 1A60     		str	r2, [r3, #0]
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  72              		.loc 1 392 0
  73 0042 354B     		ldr	r3, .L9
  74 0044 42F20112 		movw	r2, #8449
  75 0048 5A60     		str	r2, [r3, #4]
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  76              		.loc 1 394 0
  77 004a 334B     		ldr	r3, .L9
  78 004c 324A     		ldr	r2, .L9
  79 004e 9268     		ldr	r2, [r2, #8]
  80 0050 02F00702 		and	r2, r2, #7
  81 0054 9A60     		str	r2, [r3, #8]
  82              	.L5:
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  83              		.loc 1 399 0 discriminator 1
  84 0056 304B     		ldr	r3, .L9
  85 0058 DB68     		ldr	r3, [r3, #12]
  86 005a 03F00403 		and	r3, r3, #4
  87 005e BB60     		str	r3, [r7, #8]
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  88              		.loc 1 400 0 discriminator 1
  89 0060 7B68     		ldr	r3, [r7, #4]
  90 0062 03F10103 		add	r3, r3, #1
  91 0066 7B60     		str	r3, [r7, #4]
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
  92              		.loc 1 401 0 discriminator 1
  93 0068 7B68     		ldr	r3, [r7, #4]
  94 006a B3F5803F 		cmp	r3, #65536
  95 006e 02D0     		beq	.L4
  96 0070 BB68     		ldr	r3, [r7, #8]
  97 0072 002B     		cmp	r3, #0
  98 0074 EFD0     		beq	.L5
  99              	.L4:
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 100              		.loc 1 403 0
 101 0076 284B     		ldr	r3, .L9
 102 0078 DB68     		ldr	r3, [r3, #12]
 103 007a 03F00403 		and	r3, r3, #4
 104 007e 002B     		cmp	r3, #0
 105 0080 03D1     		bne	.L6
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 106              		.loc 1 405 0
 107 0082 4FF00003 		mov	r3, #0
 108 0086 FB73     		strb	r3, [r7, #15]
 109 0088 3CE0     		b	.L3
 110              	.L6:
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 111              		.loc 1 410 0
 112 008a 234B     		ldr	r3, .L9
 113 008c 9B68     		ldr	r3, [r3, #8]
 114 008e 224B     		ldr	r3, .L9
 115 0090 4FF00002 		mov	r2, #0
 116 0094 9A60     		str	r2, [r3, #8]
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 117              		.loc 1 411 0
 118 0096 204B     		ldr	r3, .L9
 119 0098 4FF6FF72 		movw	r2, #65535
 120 009c 5A61     		str	r2, [r3, #20]
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 121              		.loc 1 412 0
 122 009e 1E4B     		ldr	r3, .L9
 123 00a0 1E4A     		ldr	r2, .L9+4
 124 00a2 1A61     		str	r2, [r3, #16]
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 125              		.loc 1 413 0
 126 00a4 1C4B     		ldr	r3, .L9
 127 00a6 4FF00002 		mov	r2, #0
 128 00aa 9A61     		str	r2, [r3, #24]
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 129              		.loc 1 414 0
 130 00ac 1A4B     		ldr	r3, .L9
 131 00ae 4FF00002 		mov	r2, #0
 132 00b2 DA61     		str	r2, [r3, #28]
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 133              		.loc 1 415 0
 134 00b4 184B     		ldr	r3, .L9
 135 00b6 4FF00002 		mov	r2, #0
 136 00ba 1A62     		str	r2, [r3, #32]
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 137              		.loc 1 416 0
 138 00bc 164B     		ldr	r3, .L9
 139 00be 4FF00002 		mov	r2, #0
 140 00c2 DA62     		str	r2, [r3, #44]
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 141              		.loc 1 417 0
 142 00c4 144B     		ldr	r3, .L9
 143 00c6 4FF00002 		mov	r2, #0
 144 00ca DA63     		str	r2, [r3, #60]
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 145              		.loc 1 418 0
 146 00cc 124B     		ldr	r3, .L9
 147 00ce 4FF00002 		mov	r2, #0
 148 00d2 5A64     		str	r2, [r3, #68]
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 149              		.loc 1 419 0
 150 00d4 104B     		ldr	r3, .L9
 151 00d6 4FF00002 		mov	r2, #0
 152 00da 9A64     		str	r2, [r3, #72]
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 153              		.loc 1 422 0
 154 00dc 0E4B     		ldr	r3, .L9
 155 00de 4FF00002 		mov	r2, #0
 156 00e2 DA60     		str	r2, [r3, #12]
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 157              		.loc 1 425 0
 158 00e4 0C4B     		ldr	r3, .L9
 159 00e6 4FF00002 		mov	r2, #0
 160 00ea 1A64     		str	r2, [r3, #64]
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 161              		.loc 1 427 0
 162 00ec FFF7FEFF 		bl	RTC_WaitForSynchro
 163 00f0 0346     		mov	r3, r0
 164 00f2 002B     		cmp	r3, #0
 165 00f4 03D1     		bne	.L7
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 166              		.loc 1 429 0
 167 00f6 4FF00003 		mov	r3, #0
 168 00fa FB73     		strb	r3, [r7, #15]
 169 00fc 02E0     		b	.L3
 170              	.L7:
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 171              		.loc 1 433 0
 172 00fe 4FF00103 		mov	r3, #1
 173 0102 FB73     		strb	r3, [r7, #15]
 174              	.L3:
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 175              		.loc 1 439 0
 176 0104 044B     		ldr	r3, .L9
 177 0106 4FF0FF02 		mov	r2, #255
 178 010a 5A62     		str	r2, [r3, #36]
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 179              		.loc 1 441 0
 180 010c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 181              		.loc 1 442 0
 182 010e 1846     		mov	r0, r3
 183 0110 07F11007 		add	r7, r7, #16
 184 0114 BD46     		mov	sp, r7
 185 0116 80BD     		pop	{r7, pc}
 186              	.L10:
 187              		.align	2
 188              	.L9:
 189 0118 00280040 		.word	1073752064
 190 011c FF007F00 		.word	8323327
 191              		.cfi_endproc
 192              	.LFE110:
 194              		.align	2
 195              		.global	RTC_Init
 196              		.thumb
 197              		.thumb_func
 199              	RTC_Init:
 200              	.LFB111:
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 201              		.loc 1 456 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 16
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205 0120 80B5     		push	{r7, lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 7, -8
 209              		.cfi_offset 14, -4
 210 0122 84B0     		sub	sp, sp, #16
 211              	.LCFI4:
 212              		.cfi_def_cfa_offset 24
 213 0124 00AF     		add	r7, sp, #0
 214              	.LCFI5:
 215              		.cfi_def_cfa_register 7
 216 0126 7860     		str	r0, [r7, #4]
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 217              		.loc 1 457 0
 218 0128 4FF00003 		mov	r3, #0
 219 012c FB73     		strb	r3, [r7, #15]
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 220              		.loc 1 465 0
 221 012e 1D4B     		ldr	r3, .L15
 222 0130 4FF0CA02 		mov	r2, #202
 223 0134 5A62     		str	r2, [r3, #36]
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 224              		.loc 1 466 0
 225 0136 1B4B     		ldr	r3, .L15
 226 0138 4FF05302 		mov	r2, #83
 227 013c 5A62     		str	r2, [r3, #36]
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 228              		.loc 1 469 0
 229 013e FFF7FEFF 		bl	RTC_EnterInitMode
 230 0142 0346     		mov	r3, r0
 231 0144 002B     		cmp	r3, #0
 232 0146 03D1     		bne	.L12
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 233              		.loc 1 471 0
 234 0148 4FF00003 		mov	r3, #0
 235 014c FB73     		strb	r3, [r7, #15]
 236 014e 1EE0     		b	.L13
 237              	.L12:
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 238              		.loc 1 476 0
 239 0150 144B     		ldr	r3, .L15
 240 0152 144A     		ldr	r2, .L15
 241 0154 9268     		ldr	r2, [r2, #8]
 242 0156 22F04002 		bic	r2, r2, #64
 243 015a 9A60     		str	r2, [r3, #8]
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 244              		.loc 1 478 0
 245 015c 114B     		ldr	r3, .L15
 246 015e 114A     		ldr	r2, .L15
 247 0160 9168     		ldr	r1, [r2, #8]
 248 0162 7A68     		ldr	r2, [r7, #4]
 249 0164 1268     		ldr	r2, [r2, #0]
 250 0166 0A43     		orrs	r2, r2, r1
 251 0168 9A60     		str	r2, [r3, #8]
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 252              		.loc 1 481 0
 253 016a 0E4B     		ldr	r3, .L15
 254 016c 7A68     		ldr	r2, [r7, #4]
 255 016e 9268     		ldr	r2, [r2, #8]
 256 0170 1A61     		str	r2, [r3, #16]
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 257              		.loc 1 482 0
 258 0172 0C4B     		ldr	r3, .L15
 259 0174 0B4A     		ldr	r2, .L15
 260 0176 1169     		ldr	r1, [r2, #16]
 261 0178 7A68     		ldr	r2, [r7, #4]
 262 017a 5268     		ldr	r2, [r2, #4]
 263 017c 4FEA0242 		lsl	r2, r2, #16
 264 0180 0A43     		orrs	r2, r2, r1
 265 0182 1A61     		str	r2, [r3, #16]
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 266              		.loc 1 485 0
 267 0184 FFF7FEFF 		bl	RTC_ExitInitMode
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 268              		.loc 1 487 0
 269 0188 4FF00103 		mov	r3, #1
 270 018c FB73     		strb	r3, [r7, #15]
 271              	.L13:
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 272              		.loc 1 490 0
 273 018e 054B     		ldr	r3, .L15
 274 0190 4FF0FF02 		mov	r2, #255
 275 0194 5A62     		str	r2, [r3, #36]
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 276              		.loc 1 492 0
 277 0196 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 278              		.loc 1 493 0
 279 0198 1846     		mov	r0, r3
 280 019a 07F11007 		add	r7, r7, #16
 281 019e BD46     		mov	sp, r7
 282 01a0 80BD     		pop	{r7, pc}
 283              	.L16:
 284 01a2 00BF     		.align	2
 285              	.L15:
 286 01a4 00280040 		.word	1073752064
 287              		.cfi_endproc
 288              	.LFE111:
 290              		.align	2
 291              		.global	RTC_StructInit
 292              		.thumb
 293              		.thumb_func
 295              	RTC_StructInit:
 296              	.LFB112:
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 297              		.loc 1 502 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 01a8 80B4     		push	{r7}
 303              	.LCFI6:
 304              		.cfi_def_cfa_offset 4
 305              		.cfi_offset 7, -4
 306 01aa 83B0     		sub	sp, sp, #12
 307              	.LCFI7:
 308              		.cfi_def_cfa_offset 16
 309 01ac 00AF     		add	r7, sp, #0
 310              	.LCFI8:
 311              		.cfi_def_cfa_register 7
 312 01ae 7860     		str	r0, [r7, #4]
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 313              		.loc 1 504 0
 314 01b0 7B68     		ldr	r3, [r7, #4]
 315 01b2 4FF00002 		mov	r2, #0
 316 01b6 1A60     		str	r2, [r3, #0]
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 317              		.loc 1 507 0
 318 01b8 7B68     		ldr	r3, [r7, #4]
 319 01ba 4FF07F02 		mov	r2, #127
 320 01be 5A60     		str	r2, [r3, #4]
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 321              		.loc 1 510 0
 322 01c0 7B68     		ldr	r3, [r7, #4]
 323 01c2 4FF0FF02 		mov	r2, #255
 324 01c6 9A60     		str	r2, [r3, #8]
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 325              		.loc 1 511 0
 326 01c8 07F10C07 		add	r7, r7, #12
 327 01cc BD46     		mov	sp, r7
 328 01ce 80BC     		pop	{r7}
 329 01d0 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE112:
 333 01d2 00BF     		.align	2
 334              		.global	RTC_WriteProtectionCmd
 335              		.thumb
 336              		.thumb_func
 338              	RTC_WriteProtectionCmd:
 339              	.LFB113:
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 340              		.loc 1 524 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 8
 343              		@ frame_needed = 1, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 345 01d4 80B4     		push	{r7}
 346              	.LCFI9:
 347              		.cfi_def_cfa_offset 4
 348              		.cfi_offset 7, -4
 349 01d6 83B0     		sub	sp, sp, #12
 350              	.LCFI10:
 351              		.cfi_def_cfa_offset 16
 352 01d8 00AF     		add	r7, sp, #0
 353              	.LCFI11:
 354              		.cfi_def_cfa_register 7
 355 01da 0346     		mov	r3, r0
 356 01dc FB71     		strb	r3, [r7, #7]
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 357              		.loc 1 528 0
 358 01de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 359 01e0 002B     		cmp	r3, #0
 360 01e2 04D0     		beq	.L19
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 361              		.loc 1 531 0
 362 01e4 084B     		ldr	r3, .L21
 363 01e6 4FF0FF02 		mov	r2, #255
 364 01ea 5A62     		str	r2, [r3, #36]
 365 01ec 07E0     		b	.L18
 366              	.L19:
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 367              		.loc 1 536 0
 368 01ee 064B     		ldr	r3, .L21
 369 01f0 4FF0CA02 		mov	r2, #202
 370 01f4 5A62     		str	r2, [r3, #36]
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 371              		.loc 1 537 0
 372 01f6 044B     		ldr	r3, .L21
 373 01f8 4FF05302 		mov	r2, #83
 374 01fc 5A62     		str	r2, [r3, #36]
 375              	.L18:
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 376              		.loc 1 539 0
 377 01fe 07F10C07 		add	r7, r7, #12
 378 0202 BD46     		mov	sp, r7
 379 0204 80BC     		pop	{r7}
 380 0206 7047     		bx	lr
 381              	.L22:
 382              		.align	2
 383              	.L21:
 384 0208 00280040 		.word	1073752064
 385              		.cfi_endproc
 386              	.LFE113:
 388              		.align	2
 389              		.global	RTC_EnterInitMode
 390              		.thumb
 391              		.thumb_func
 393              	RTC_EnterInitMode:
 394              	.LFB114:
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 395              		.loc 1 551 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 16
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 400 020c 80B4     		push	{r7}
 401              	.LCFI12:
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 020e 85B0     		sub	sp, sp, #20
 405              	.LCFI13:
 406              		.cfi_def_cfa_offset 24
 407 0210 00AF     		add	r7, sp, #0
 408              	.LCFI14:
 409              		.cfi_def_cfa_register 7
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 410              		.loc 1 552 0
 411 0212 4FF00003 		mov	r3, #0
 412 0216 7B60     		str	r3, [r7, #4]
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 413              		.loc 1 553 0
 414 0218 4FF00003 		mov	r3, #0
 415 021c FB73     		strb	r3, [r7, #15]
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 416              		.loc 1 554 0
 417 021e 4FF00003 		mov	r3, #0
 418 0222 BB60     		str	r3, [r7, #8]
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 419              		.loc 1 557 0
 420 0224 184B     		ldr	r3, .L30
 421 0226 DB68     		ldr	r3, [r3, #12]
 422 0228 03F04003 		and	r3, r3, #64
 423 022c 002B     		cmp	r3, #0
 424 022e 21D1     		bne	.L24
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 425              		.loc 1 560 0
 426 0230 154B     		ldr	r3, .L30
 427 0232 4FF0FF32 		mov	r2, #-1
 428 0236 DA60     		str	r2, [r3, #12]
 429              	.L26:
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 430              		.loc 1 565 0 discriminator 1
 431 0238 134B     		ldr	r3, .L30
 432 023a DB68     		ldr	r3, [r3, #12]
 433 023c 03F04003 		and	r3, r3, #64
 434 0240 BB60     		str	r3, [r7, #8]
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 435              		.loc 1 566 0 discriminator 1
 436 0242 7B68     		ldr	r3, [r7, #4]
 437 0244 03F10103 		add	r3, r3, #1
 438 0248 7B60     		str	r3, [r7, #4]
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 439              		.loc 1 567 0 discriminator 1
 440 024a 7B68     		ldr	r3, [r7, #4]
 441 024c B3F5803F 		cmp	r3, #65536
 442 0250 02D0     		beq	.L25
 443 0252 BB68     		ldr	r3, [r7, #8]
 444 0254 002B     		cmp	r3, #0
 445 0256 EFD0     		beq	.L26
 446              	.L25:
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 447              		.loc 1 569 0
 448 0258 0B4B     		ldr	r3, .L30
 449 025a DB68     		ldr	r3, [r3, #12]
 450 025c 03F04003 		and	r3, r3, #64
 451 0260 002B     		cmp	r3, #0
 452 0262 03D0     		beq	.L27
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 453              		.loc 1 571 0
 454 0264 4FF00103 		mov	r3, #1
 455 0268 FB73     		strb	r3, [r7, #15]
 456 026a 06E0     		b	.L28
 457              	.L27:
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 458              		.loc 1 575 0
 459 026c 4FF00003 		mov	r3, #0
 460 0270 FB73     		strb	r3, [r7, #15]
 461 0272 02E0     		b	.L28
 462              	.L24:
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 463              		.loc 1 580 0
 464 0274 4FF00103 		mov	r3, #1
 465 0278 FB73     		strb	r3, [r7, #15]
 466              	.L28:
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 467              		.loc 1 583 0
 468 027a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 469              		.loc 1 584 0
 470 027c 1846     		mov	r0, r3
 471 027e 07F11407 		add	r7, r7, #20
 472 0282 BD46     		mov	sp, r7
 473 0284 80BC     		pop	{r7}
 474 0286 7047     		bx	lr
 475              	.L31:
 476              		.align	2
 477              	.L30:
 478 0288 00280040 		.word	1073752064
 479              		.cfi_endproc
 480              	.LFE114:
 482              		.align	2
 483              		.global	RTC_ExitInitMode
 484              		.thumb
 485              		.thumb_func
 487              	RTC_ExitInitMode:
 488              	.LFB115:
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 489              		.loc 1 596 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494 028c 80B4     		push	{r7}
 495              	.LCFI15:
 496              		.cfi_def_cfa_offset 4
 497              		.cfi_offset 7, -4
 498 028e 00AF     		add	r7, sp, #0
 499              	.LCFI16:
 500              		.cfi_def_cfa_register 7
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 501              		.loc 1 598 0
 502 0290 044B     		ldr	r3, .L33
 503 0292 044A     		ldr	r2, .L33
 504 0294 D268     		ldr	r2, [r2, #12]
 505 0296 22F08002 		bic	r2, r2, #128
 506 029a DA60     		str	r2, [r3, #12]
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 507              		.loc 1 599 0
 508 029c BD46     		mov	sp, r7
 509 029e 80BC     		pop	{r7}
 510 02a0 7047     		bx	lr
 511              	.L34:
 512 02a2 00BF     		.align	2
 513              	.L33:
 514 02a4 00280040 		.word	1073752064
 515              		.cfi_endproc
 516              	.LFE115:
 518              		.align	2
 519              		.global	RTC_WaitForSynchro
 520              		.thumb
 521              		.thumb_func
 523              	RTC_WaitForSynchro:
 524              	.LFB116:
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 525              		.loc 1 618 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 16
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530 02a8 80B4     		push	{r7}
 531              	.LCFI17:
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 7, -4
 534 02aa 85B0     		sub	sp, sp, #20
 535              	.LCFI18:
 536              		.cfi_def_cfa_offset 24
 537 02ac 00AF     		add	r7, sp, #0
 538              	.LCFI19:
 539              		.cfi_def_cfa_register 7
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 540              		.loc 1 619 0
 541 02ae 4FF00003 		mov	r3, #0
 542 02b2 7B60     		str	r3, [r7, #4]
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 543              		.loc 1 620 0
 544 02b4 4FF00003 		mov	r3, #0
 545 02b8 FB73     		strb	r3, [r7, #15]
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 546              		.loc 1 621 0
 547 02ba 4FF00003 		mov	r3, #0
 548 02be BB60     		str	r3, [r7, #8]
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 549              		.loc 1 624 0
 550 02c0 1A4B     		ldr	r3, .L41
 551 02c2 4FF0CA02 		mov	r2, #202
 552 02c6 5A62     		str	r2, [r3, #36]
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 553              		.loc 1 625 0
 554 02c8 184B     		ldr	r3, .L41
 555 02ca 4FF05302 		mov	r2, #83
 556 02ce 5A62     		str	r2, [r3, #36]
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 557              		.loc 1 628 0
 558 02d0 164B     		ldr	r3, .L41
 559 02d2 164A     		ldr	r2, .L41
 560 02d4 D268     		ldr	r2, [r2, #12]
 561 02d6 22F0A002 		bic	r2, r2, #160
 562 02da DA60     		str	r2, [r3, #12]
 563              	.L37:
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 564              		.loc 1 633 0 discriminator 1
 565 02dc 134B     		ldr	r3, .L41
 566 02de DB68     		ldr	r3, [r3, #12]
 567 02e0 03F02003 		and	r3, r3, #32
 568 02e4 BB60     		str	r3, [r7, #8]
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 569              		.loc 1 634 0 discriminator 1
 570 02e6 7B68     		ldr	r3, [r7, #4]
 571 02e8 03F10103 		add	r3, r3, #1
 572 02ec 7B60     		str	r3, [r7, #4]
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 573              		.loc 1 635 0 discriminator 1
 574 02ee 7B68     		ldr	r3, [r7, #4]
 575 02f0 B3F5003F 		cmp	r3, #131072
 576 02f4 02D0     		beq	.L36
 577 02f6 BB68     		ldr	r3, [r7, #8]
 578 02f8 002B     		cmp	r3, #0
 579 02fa EFD0     		beq	.L37
 580              	.L36:
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 581              		.loc 1 637 0
 582 02fc 0B4B     		ldr	r3, .L41
 583 02fe DB68     		ldr	r3, [r3, #12]
 584 0300 03F02003 		and	r3, r3, #32
 585 0304 002B     		cmp	r3, #0
 586 0306 03D0     		beq	.L38
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 587              		.loc 1 639 0
 588 0308 4FF00103 		mov	r3, #1
 589 030c FB73     		strb	r3, [r7, #15]
 590 030e 02E0     		b	.L39
 591              	.L38:
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 592              		.loc 1 643 0
 593 0310 4FF00003 		mov	r3, #0
 594 0314 FB73     		strb	r3, [r7, #15]
 595              	.L39:
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 596              		.loc 1 647 0
 597 0316 054B     		ldr	r3, .L41
 598 0318 4FF0FF02 		mov	r2, #255
 599 031c 5A62     		str	r2, [r3, #36]
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 600              		.loc 1 649 0
 601 031e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 602              		.loc 1 650 0
 603 0320 1846     		mov	r0, r3
 604 0322 07F11407 		add	r7, r7, #20
 605 0326 BD46     		mov	sp, r7
 606 0328 80BC     		pop	{r7}
 607 032a 7047     		bx	lr
 608              	.L42:
 609              		.align	2
 610              	.L41:
 611 032c 00280040 		.word	1073752064
 612              		.cfi_endproc
 613              	.LFE116:
 615              		.align	2
 616              		.global	RTC_RefClockCmd
 617              		.thumb
 618              		.thumb_func
 620              	RTC_RefClockCmd:
 621              	.LFB117:
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 622              		.loc 1 661 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 16
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626 0330 80B5     		push	{r7, lr}
 627              	.LCFI20:
 628              		.cfi_def_cfa_offset 8
 629              		.cfi_offset 7, -8
 630              		.cfi_offset 14, -4
 631 0332 84B0     		sub	sp, sp, #16
 632              	.LCFI21:
 633              		.cfi_def_cfa_offset 24
 634 0334 00AF     		add	r7, sp, #0
 635              	.LCFI22:
 636              		.cfi_def_cfa_register 7
 637 0336 0346     		mov	r3, r0
 638 0338 FB71     		strb	r3, [r7, #7]
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 639              		.loc 1 662 0
 640 033a 4FF00003 		mov	r3, #0
 641 033e FB73     		strb	r3, [r7, #15]
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 642              		.loc 1 668 0
 643 0340 174B     		ldr	r3, .L49
 644 0342 4FF0CA02 		mov	r2, #202
 645 0346 5A62     		str	r2, [r3, #36]
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 646              		.loc 1 669 0
 647 0348 154B     		ldr	r3, .L49
 648 034a 4FF05302 		mov	r2, #83
 649 034e 5A62     		str	r2, [r3, #36]
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 650              		.loc 1 672 0
 651 0350 FFF7FEFF 		bl	RTC_EnterInitMode
 652 0354 0346     		mov	r3, r0
 653 0356 002B     		cmp	r3, #0
 654 0358 03D1     		bne	.L44
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 655              		.loc 1 674 0
 656 035a 4FF00003 		mov	r3, #0
 657 035e FB73     		strb	r3, [r7, #15]
 658 0360 14E0     		b	.L45
 659              	.L44:
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 660              		.loc 1 678 0
 661 0362 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 662 0364 002B     		cmp	r3, #0
 663 0366 06D0     		beq	.L46
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 664              		.loc 1 681 0
 665 0368 0D4B     		ldr	r3, .L49
 666 036a 0D4A     		ldr	r2, .L49
 667 036c 9268     		ldr	r2, [r2, #8]
 668 036e 42F01002 		orr	r2, r2, #16
 669 0372 9A60     		str	r2, [r3, #8]
 670 0374 05E0     		b	.L47
 671              	.L46:
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 672              		.loc 1 686 0
 673 0376 0A4B     		ldr	r3, .L49
 674 0378 094A     		ldr	r2, .L49
 675 037a 9268     		ldr	r2, [r2, #8]
 676 037c 22F01002 		bic	r2, r2, #16
 677 0380 9A60     		str	r2, [r3, #8]
 678              	.L47:
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 679              		.loc 1 689 0
 680 0382 FFF7FEFF 		bl	RTC_ExitInitMode
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 681              		.loc 1 691 0
 682 0386 4FF00103 		mov	r3, #1
 683 038a FB73     		strb	r3, [r7, #15]
 684              	.L45:
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 685              		.loc 1 695 0
 686 038c 044B     		ldr	r3, .L49
 687 038e 4FF0FF02 		mov	r2, #255
 688 0392 5A62     		str	r2, [r3, #36]
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 689              		.loc 1 697 0
 690 0394 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 691              		.loc 1 698 0
 692 0396 1846     		mov	r0, r3
 693 0398 07F11007 		add	r7, r7, #16
 694 039c BD46     		mov	sp, r7
 695 039e 80BD     		pop	{r7, pc}
 696              	.L50:
 697              		.align	2
 698              	.L49:
 699 03a0 00280040 		.word	1073752064
 700              		.cfi_endproc
 701              	.LFE117:
 703              		.align	2
 704              		.global	RTC_BypassShadowCmd
 705              		.thumb
 706              		.thumb_func
 708              	RTC_BypassShadowCmd:
 709              	.LFB118:
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 710              		.loc 1 709 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715 03a4 80B4     		push	{r7}
 716              	.LCFI23:
 717              		.cfi_def_cfa_offset 4
 718              		.cfi_offset 7, -4
 719 03a6 83B0     		sub	sp, sp, #12
 720              	.LCFI24:
 721              		.cfi_def_cfa_offset 16
 722 03a8 00AF     		add	r7, sp, #0
 723              	.LCFI25:
 724              		.cfi_def_cfa_register 7
 725 03aa 0346     		mov	r3, r0
 726 03ac FB71     		strb	r3, [r7, #7]
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 727              		.loc 1 714 0
 728 03ae 104B     		ldr	r3, .L54
 729 03b0 4FF0CA02 		mov	r2, #202
 730 03b4 5A62     		str	r2, [r3, #36]
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 731              		.loc 1 715 0
 732 03b6 0E4B     		ldr	r3, .L54
 733 03b8 4FF05302 		mov	r2, #83
 734 03bc 5A62     		str	r2, [r3, #36]
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 735              		.loc 1 717 0
 736 03be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 737 03c0 002B     		cmp	r3, #0
 738 03c2 06D0     		beq	.L52
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 739              		.loc 1 720 0
 740 03c4 0A4B     		ldr	r3, .L54
 741 03c6 0A4A     		ldr	r2, .L54
 742 03c8 9268     		ldr	r2, [r2, #8]
 743 03ca 42F02002 		orr	r2, r2, #32
 744 03ce 9A60     		str	r2, [r3, #8]
 745 03d0 05E0     		b	.L53
 746              	.L52:
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 747              		.loc 1 725 0
 748 03d2 074B     		ldr	r3, .L54
 749 03d4 064A     		ldr	r2, .L54
 750 03d6 9268     		ldr	r2, [r2, #8]
 751 03d8 02F0DF02 		and	r2, r2, #223
 752 03dc 9A60     		str	r2, [r3, #8]
 753              	.L53:
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 754              		.loc 1 729 0
 755 03de 044B     		ldr	r3, .L54
 756 03e0 4FF0FF02 		mov	r2, #255
 757 03e4 5A62     		str	r2, [r3, #36]
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 758              		.loc 1 730 0
 759 03e6 07F10C07 		add	r7, r7, #12
 760 03ea BD46     		mov	sp, r7
 761 03ec 80BC     		pop	{r7}
 762 03ee 7047     		bx	lr
 763              	.L55:
 764              		.align	2
 765              	.L54:
 766 03f0 00280040 		.word	1073752064
 767              		.cfi_endproc
 768              	.LFE118:
 770              		.align	2
 771              		.global	RTC_SetTime
 772              		.thumb
 773              		.thumb_func
 775              	RTC_SetTime:
 776              	.LFB119:
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 777              		.loc 1 764 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 16
 780              		@ frame_needed = 1, uses_anonymous_args = 0
 781 03f4 90B5     		push	{r4, r7, lr}
 782              	.LCFI26:
 783              		.cfi_def_cfa_offset 12
 784              		.cfi_offset 4, -12
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 03f6 85B0     		sub	sp, sp, #20
 788              	.LCFI27:
 789              		.cfi_def_cfa_offset 32
 790 03f8 00AF     		add	r7, sp, #0
 791              	.LCFI28:
 792              		.cfi_def_cfa_register 7
 793 03fa 7860     		str	r0, [r7, #4]
 794 03fc 3960     		str	r1, [r7, #0]
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 795              		.loc 1 765 0
 796 03fe 4FF00003 		mov	r3, #0
 797 0402 FB60     		str	r3, [r7, #12]
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 798              		.loc 1 766 0
 799 0404 4FF00003 		mov	r3, #0
 800 0408 FB72     		strb	r3, [r7, #11]
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 801              		.loc 1 771 0
 802 040a 7B68     		ldr	r3, [r7, #4]
 803 040c 002B     		cmp	r3, #0
 804 040e 0AD1     		bne	.L57
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 805              		.loc 1 773 0
 806 0410 454B     		ldr	r3, .L67
 807 0412 9B68     		ldr	r3, [r3, #8]
 808 0414 03F04003 		and	r3, r3, #64
 809 0418 002B     		cmp	r3, #0
 810 041a 16D1     		bne	.L58
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 811              		.loc 1 780 0
 812 041c 3B68     		ldr	r3, [r7, #0]
 813 041e 4FF00002 		mov	r2, #0
 814 0422 DA70     		strb	r2, [r3, #3]
 815 0424 11E0     		b	.L58
 816              	.L57:
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 817              		.loc 1 788 0
 818 0426 404B     		ldr	r3, .L67
 819 0428 9B68     		ldr	r3, [r3, #8]
 820 042a 03F04003 		and	r3, r3, #64
 821 042e 002B     		cmp	r3, #0
 822 0430 07D0     		beq	.L59
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 823              		.loc 1 790 0
 824 0432 3B68     		ldr	r3, [r7, #0]
 825 0434 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 826 0436 1846     		mov	r0, r3
 827 0438 01F058F9 		bl	RTC_Bcd2ToByte
 828 043c 0346     		mov	r3, r0
 829 043e FB60     		str	r3, [r7, #12]
 830 0440 03E0     		b	.L58
 831              	.L59:
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 832              		.loc 1 796 0
 833 0442 3B68     		ldr	r3, [r7, #0]
 834 0444 4FF00002 		mov	r2, #0
 835 0448 DA70     		strb	r2, [r3, #3]
 836              	.L58:
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 837              		.loc 1 804 0
 838 044a 7B68     		ldr	r3, [r7, #4]
 839 044c 002B     		cmp	r3, #0
 840 044e 12D0     		beq	.L60
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 841              		.loc 1 806 0
 842 0450 3B68     		ldr	r3, [r7, #0]
 843 0452 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 844 0454 4FEA0342 		lsl	r2, r3, #16
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 845              		.loc 1 807 0
 846 0458 3B68     		ldr	r3, [r7, #0]
 847 045a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 848 045c 4FEA0323 		lsl	r3, r3, #8
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 849              		.loc 1 806 0
 850 0460 1A43     		orrs	r2, r2, r3
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 851              		.loc 1 808 0
 852 0462 3B68     		ldr	r3, [r7, #0]
 853 0464 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 854              		.loc 1 807 0
 855 0466 1A43     		orrs	r2, r2, r3
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 856              		.loc 1 809 0
 857 0468 3B68     		ldr	r3, [r7, #0]
 858 046a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 859 046c 4FEA0343 		lsl	r3, r3, #16
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 860              		.loc 1 806 0
 861 0470 1343     		orrs	r3, r3, r2
 862 0472 FB60     		str	r3, [r7, #12]
 863 0474 1EE0     		b	.L61
 864              	.L60:
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 865              		.loc 1 813 0
 866 0476 3B68     		ldr	r3, [r7, #0]
 867 0478 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 868 047a 1846     		mov	r0, r3
 869 047c 01F014F9 		bl	RTC_ByteToBcd2
 870 0480 0346     		mov	r3, r0
 871 0482 4FEA0344 		lsl	r4, r3, #16
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 872              		.loc 1 814 0
 873 0486 3B68     		ldr	r3, [r7, #0]
 874 0488 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 875 048a 1846     		mov	r0, r3
 876 048c 01F00CF9 		bl	RTC_ByteToBcd2
 877 0490 0346     		mov	r3, r0
 878 0492 4FEA0323 		lsl	r3, r3, #8
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 879              		.loc 1 813 0
 880 0496 1C43     		orrs	r4, r4, r3
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 881              		.loc 1 815 0
 882 0498 3B68     		ldr	r3, [r7, #0]
 883 049a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 884 049c 1846     		mov	r0, r3
 885 049e 01F003F9 		bl	RTC_ByteToBcd2
 886 04a2 0346     		mov	r3, r0
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 887              		.loc 1 814 0
 888 04a4 44EA0302 		orr	r2, r4, r3
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 889              		.loc 1 816 0
 890 04a8 3B68     		ldr	r3, [r7, #0]
 891 04aa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 892 04ac 4FEA0343 		lsl	r3, r3, #16
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 893              		.loc 1 813 0
 894 04b0 1343     		orrs	r3, r3, r2
 895 04b2 FB60     		str	r3, [r7, #12]
 896              	.L61:
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 897              		.loc 1 820 0
 898 04b4 1C4B     		ldr	r3, .L67
 899 04b6 4FF0CA02 		mov	r2, #202
 900 04ba 5A62     		str	r2, [r3, #36]
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 901              		.loc 1 821 0
 902 04bc 1A4B     		ldr	r3, .L67
 903 04be 4FF05302 		mov	r2, #83
 904 04c2 5A62     		str	r2, [r3, #36]
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 905              		.loc 1 824 0
 906 04c4 FFF7FEFF 		bl	RTC_EnterInitMode
 907 04c8 0346     		mov	r3, r0
 908 04ca 002B     		cmp	r3, #0
 909 04cc 03D1     		bne	.L62
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 910              		.loc 1 826 0
 911 04ce 4FF00003 		mov	r3, #0
 912 04d2 FB72     		strb	r3, [r7, #11]
 913 04d4 1EE0     		b	.L63
 914              	.L62:
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 915              		.loc 1 831 0
 916 04d6 144A     		ldr	r2, .L67
 917 04d8 FB68     		ldr	r3, [r7, #12]
 918 04da 03F07F33 		and	r3, r3, #2139062143
 919 04de 23F0FE43 		bic	r3, r3, #2130706432
 920 04e2 1360     		str	r3, [r2, #0]
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 921              		.loc 1 834 0
 922 04e4 FFF7FEFF 		bl	RTC_ExitInitMode
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 923              		.loc 1 837 0
 924 04e8 0F4B     		ldr	r3, .L67
 925 04ea 9B68     		ldr	r3, [r3, #8]
 926 04ec 03F02003 		and	r3, r3, #32
 927 04f0 002B     		cmp	r3, #0
 928 04f2 0CD1     		bne	.L64
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 929              		.loc 1 839 0
 930 04f4 FFF7FEFF 		bl	RTC_WaitForSynchro
 931 04f8 0346     		mov	r3, r0
 932 04fa 002B     		cmp	r3, #0
 933 04fc 03D1     		bne	.L65
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 934              		.loc 1 841 0
 935 04fe 4FF00003 		mov	r3, #0
 936 0502 FB72     		strb	r3, [r7, #11]
 937 0504 06E0     		b	.L63
 938              	.L65:
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 939              		.loc 1 845 0
 940 0506 4FF00103 		mov	r3, #1
 941 050a FB72     		strb	r3, [r7, #11]
 942 050c 02E0     		b	.L63
 943              	.L64:
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 944              		.loc 1 850 0
 945 050e 4FF00103 		mov	r3, #1
 946 0512 FB72     		strb	r3, [r7, #11]
 947              	.L63:
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 948              		.loc 1 854 0
 949 0514 044B     		ldr	r3, .L67
 950 0516 4FF0FF02 		mov	r2, #255
 951 051a 5A62     		str	r2, [r3, #36]
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 952              		.loc 1 856 0
 953 051c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 954              		.loc 1 857 0
 955 051e 1846     		mov	r0, r3
 956 0520 07F11407 		add	r7, r7, #20
 957 0524 BD46     		mov	sp, r7
 958 0526 90BD     		pop	{r4, r7, pc}
 959              	.L68:
 960              		.align	2
 961              	.L67:
 962 0528 00280040 		.word	1073752064
 963              		.cfi_endproc
 964              	.LFE119:
 966              		.align	2
 967              		.global	RTC_TimeStructInit
 968              		.thumb
 969              		.thumb_func
 971              	RTC_TimeStructInit:
 972              	.LFB120:
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 973              		.loc 1 867 0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 8
 976              		@ frame_needed = 1, uses_anonymous_args = 0
 977              		@ link register save eliminated.
 978 052c 80B4     		push	{r7}
 979              	.LCFI29:
 980              		.cfi_def_cfa_offset 4
 981              		.cfi_offset 7, -4
 982 052e 83B0     		sub	sp, sp, #12
 983              	.LCFI30:
 984              		.cfi_def_cfa_offset 16
 985 0530 00AF     		add	r7, sp, #0
 986              	.LCFI31:
 987              		.cfi_def_cfa_register 7
 988 0532 7860     		str	r0, [r7, #4]
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 989              		.loc 1 869 0
 990 0534 7B68     		ldr	r3, [r7, #4]
 991 0536 4FF00002 		mov	r2, #0
 992 053a DA70     		strb	r2, [r3, #3]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 993              		.loc 1 870 0
 994 053c 7B68     		ldr	r3, [r7, #4]
 995 053e 4FF00002 		mov	r2, #0
 996 0542 1A70     		strb	r2, [r3, #0]
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 997              		.loc 1 871 0
 998 0544 7B68     		ldr	r3, [r7, #4]
 999 0546 4FF00002 		mov	r2, #0
 1000 054a 5A70     		strb	r2, [r3, #1]
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1001              		.loc 1 872 0
 1002 054c 7B68     		ldr	r3, [r7, #4]
 1003 054e 4FF00002 		mov	r2, #0
 1004 0552 9A70     		strb	r2, [r3, #2]
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1005              		.loc 1 873 0
 1006 0554 07F10C07 		add	r7, r7, #12
 1007 0558 BD46     		mov	sp, r7
 1008 055a 80BC     		pop	{r7}
 1009 055c 7047     		bx	lr
 1010              		.cfi_endproc
 1011              	.LFE120:
 1013 055e 00BF     		.align	2
 1014              		.global	RTC_GetTime
 1015              		.thumb
 1016              		.thumb_func
 1018              	RTC_GetTime:
 1019              	.LFB121:
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1020              		.loc 1 886 0
 1021              		.cfi_startproc
 1022              		@ args = 0, pretend = 0, frame = 16
 1023              		@ frame_needed = 1, uses_anonymous_args = 0
 1024 0560 80B5     		push	{r7, lr}
 1025              	.LCFI32:
 1026              		.cfi_def_cfa_offset 8
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 1029 0562 84B0     		sub	sp, sp, #16
 1030              	.LCFI33:
 1031              		.cfi_def_cfa_offset 24
 1032 0564 00AF     		add	r7, sp, #0
 1033              	.LCFI34:
 1034              		.cfi_def_cfa_register 7
 1035 0566 7860     		str	r0, [r7, #4]
 1036 0568 3960     		str	r1, [r7, #0]
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1037              		.loc 1 887 0
 1038 056a 4FF00003 		mov	r3, #0
 1039 056e FB60     		str	r3, [r7, #12]
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1040              		.loc 1 893 0
 1041 0570 234B     		ldr	r3, .L72
 1042 0572 1B68     		ldr	r3, [r3, #0]
 1043 0574 03F07F33 		and	r3, r3, #2139062143
 1044 0578 23F0FE43 		bic	r3, r3, #2130706432
 1045 057c FB60     		str	r3, [r7, #12]
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1046              		.loc 1 896 0
 1047 057e FB68     		ldr	r3, [r7, #12]
 1048 0580 03F47C13 		and	r3, r3, #4128768
 1049 0584 4FEA1343 		lsr	r3, r3, #16
 1050 0588 DAB2     		uxtb	r2, r3
 1051 058a 3B68     		ldr	r3, [r7, #0]
 1052 058c 1A70     		strb	r2, [r3, #0]
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1053              		.loc 1 897 0
 1054 058e FB68     		ldr	r3, [r7, #12]
 1055 0590 03F4FE43 		and	r3, r3, #32512
 1056 0594 4FEA1323 		lsr	r3, r3, #8
 1057 0598 DAB2     		uxtb	r2, r3
 1058 059a 3B68     		ldr	r3, [r7, #0]
 1059 059c 5A70     		strb	r2, [r3, #1]
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1060              		.loc 1 898 0
 1061 059e FB68     		ldr	r3, [r7, #12]
 1062 05a0 DBB2     		uxtb	r3, r3
 1063 05a2 03F07F03 		and	r3, r3, #127
 1064 05a6 DAB2     		uxtb	r2, r3
 1065 05a8 3B68     		ldr	r3, [r7, #0]
 1066 05aa 9A70     		strb	r2, [r3, #2]
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1067              		.loc 1 899 0
 1068 05ac FB68     		ldr	r3, [r7, #12]
 1069 05ae 03F48003 		and	r3, r3, #4194304
 1070 05b2 4FEA1343 		lsr	r3, r3, #16
 1071 05b6 DAB2     		uxtb	r2, r3
 1072 05b8 3B68     		ldr	r3, [r7, #0]
 1073 05ba DA70     		strb	r2, [r3, #3]
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1074              		.loc 1 902 0
 1075 05bc 7B68     		ldr	r3, [r7, #4]
 1076 05be 002B     		cmp	r3, #0
 1077 05c0 1AD1     		bne	.L70
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1078              		.loc 1 905 0
 1079 05c2 3B68     		ldr	r3, [r7, #0]
 1080 05c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1081 05c6 1846     		mov	r0, r3
 1082 05c8 01F090F8 		bl	RTC_Bcd2ToByte
 1083 05cc 0346     		mov	r3, r0
 1084 05ce 1A46     		mov	r2, r3
 1085 05d0 3B68     		ldr	r3, [r7, #0]
 1086 05d2 1A70     		strb	r2, [r3, #0]
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1087              		.loc 1 906 0
 1088 05d4 3B68     		ldr	r3, [r7, #0]
 1089 05d6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1090 05d8 1846     		mov	r0, r3
 1091 05da 01F087F8 		bl	RTC_Bcd2ToByte
 1092 05de 0346     		mov	r3, r0
 1093 05e0 1A46     		mov	r2, r3
 1094 05e2 3B68     		ldr	r3, [r7, #0]
 1095 05e4 5A70     		strb	r2, [r3, #1]
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1096              		.loc 1 907 0
 1097 05e6 3B68     		ldr	r3, [r7, #0]
 1098 05e8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1099 05ea 1846     		mov	r0, r3
 1100 05ec 01F07EF8 		bl	RTC_Bcd2ToByte
 1101 05f0 0346     		mov	r3, r0
 1102 05f2 1A46     		mov	r2, r3
 1103 05f4 3B68     		ldr	r3, [r7, #0]
 1104 05f6 9A70     		strb	r2, [r3, #2]
 1105              	.L70:
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1106              		.loc 1 909 0
 1107 05f8 07F11007 		add	r7, r7, #16
 1108 05fc BD46     		mov	sp, r7
 1109 05fe 80BD     		pop	{r7, pc}
 1110              	.L73:
 1111              		.align	2
 1112              	.L72:
 1113 0600 00280040 		.word	1073752064
 1114              		.cfi_endproc
 1115              	.LFE121:
 1117              		.align	2
 1118              		.global	RTC_GetSubSecond
 1119              		.thumb
 1120              		.thumb_func
 1122              	RTC_GetSubSecond:
 1123              	.LFB122:
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1124              		.loc 1 919 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 8
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128              		@ link register save eliminated.
 1129 0604 80B4     		push	{r7}
 1130              	.LCFI35:
 1131              		.cfi_def_cfa_offset 4
 1132              		.cfi_offset 7, -4
 1133 0606 83B0     		sub	sp, sp, #12
 1134              	.LCFI36:
 1135              		.cfi_def_cfa_offset 16
 1136 0608 00AF     		add	r7, sp, #0
 1137              	.LCFI37:
 1138              		.cfi_def_cfa_register 7
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1139              		.loc 1 920 0
 1140 060a 4FF00003 		mov	r3, #0
 1141 060e 7B60     		str	r3, [r7, #4]
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1142              		.loc 1 923 0
 1143 0610 054B     		ldr	r3, .L76
 1144 0612 9B6A     		ldr	r3, [r3, #40]
 1145 0614 7B60     		str	r3, [r7, #4]
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1146              		.loc 1 926 0
 1147 0616 044B     		ldr	r3, .L76
 1148 0618 5B68     		ldr	r3, [r3, #4]
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1149              		.loc 1 928 0
 1150 061a 7B68     		ldr	r3, [r7, #4]
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1151              		.loc 1 929 0
 1152 061c 1846     		mov	r0, r3
 1153 061e 07F10C07 		add	r7, r7, #12
 1154 0622 BD46     		mov	sp, r7
 1155 0624 80BC     		pop	{r7}
 1156 0626 7047     		bx	lr
 1157              	.L77:
 1158              		.align	2
 1159              	.L76:
 1160 0628 00280040 		.word	1073752064
 1161              		.cfi_endproc
 1162              	.LFE122:
 1164              		.align	2
 1165              		.global	RTC_SetDate
 1166              		.thumb
 1167              		.thumb_func
 1169              	RTC_SetDate:
 1170              	.LFB123:
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1171              		.loc 1 944 0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 16
 1174              		@ frame_needed = 1, uses_anonymous_args = 0
 1175 062c 90B5     		push	{r4, r7, lr}
 1176              	.LCFI38:
 1177              		.cfi_def_cfa_offset 12
 1178              		.cfi_offset 4, -12
 1179              		.cfi_offset 7, -8
 1180              		.cfi_offset 14, -4
 1181 062e 85B0     		sub	sp, sp, #20
 1182              	.LCFI39:
 1183              		.cfi_def_cfa_offset 32
 1184 0630 00AF     		add	r7, sp, #0
 1185              	.LCFI40:
 1186              		.cfi_def_cfa_register 7
 1187 0632 7860     		str	r0, [r7, #4]
 1188 0634 3960     		str	r1, [r7, #0]
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1189              		.loc 1 945 0
 1190 0636 4FF00003 		mov	r3, #0
 1191 063a FB60     		str	r3, [r7, #12]
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1192              		.loc 1 946 0
 1193 063c 4FF00003 		mov	r3, #0
 1194 0640 FB72     		strb	r3, [r7, #11]
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1195              		.loc 1 951 0
 1196 0642 7B68     		ldr	r3, [r7, #4]
 1197 0644 002B     		cmp	r3, #0
 1198 0646 0FD1     		bne	.L79
 1199              		.loc 1 951 0 is_stmt 0 discriminator 1
 1200 0648 3B68     		ldr	r3, [r7, #0]
 1201 064a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1202 064c 03F01003 		and	r3, r3, #16
 1203 0650 002B     		cmp	r3, #0
 1204 0652 09D0     		beq	.L79
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1205              		.loc 1 953 0 is_stmt 1
 1206 0654 3B68     		ldr	r3, [r7, #0]
 1207 0656 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1208 0658 23F01003 		bic	r3, r3, #16
 1209 065c DBB2     		uxtb	r3, r3
 1210 065e 03F10A03 		add	r3, r3, #10
 1211 0662 DAB2     		uxtb	r2, r3
 1212 0664 3B68     		ldr	r3, [r7, #0]
 1213 0666 5A70     		strb	r2, [r3, #1]
 1214              	.L79:
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1215              		.loc 1 955 0
 1216 0668 7B68     		ldr	r3, [r7, #4]
 1217 066a 002B     		cmp	r3, #0
 1218 066c 0DD0     		beq	.L80
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1219              		.loc 1 964 0
 1220 066e 3B68     		ldr	r3, [r7, #0]
 1221 0670 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1222 0672 1846     		mov	r0, r3
 1223 0674 01F03AF8 		bl	RTC_Bcd2ToByte
 1224 0678 0346     		mov	r3, r0
 1225 067a FB60     		str	r3, [r7, #12]
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1226              		.loc 1 966 0
 1227 067c 3B68     		ldr	r3, [r7, #0]
 1228 067e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1229 0680 1846     		mov	r0, r3
 1230 0682 01F033F8 		bl	RTC_Bcd2ToByte
 1231 0686 0346     		mov	r3, r0
 1232 0688 FB60     		str	r3, [r7, #12]
 1233              	.L80:
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1234              		.loc 1 972 0
 1235 068a 7B68     		ldr	r3, [r7, #4]
 1236 068c 002B     		cmp	r3, #0
 1237 068e 12D0     		beq	.L81
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1238              		.loc 1 974 0
 1239 0690 3B68     		ldr	r3, [r7, #0]
 1240 0692 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1241 0694 4FEA0342 		lsl	r2, r3, #16
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1242              		.loc 1 975 0
 1243 0698 3B68     		ldr	r3, [r7, #0]
 1244 069a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1245 069c 4FEA0323 		lsl	r3, r3, #8
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1246              		.loc 1 974 0
 1247 06a0 1A43     		orrs	r2, r2, r3
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1248              		.loc 1 976 0
 1249 06a2 3B68     		ldr	r3, [r7, #0]
 1250 06a4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1251              		.loc 1 975 0
 1252 06a6 1A43     		orrs	r2, r2, r3
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1253              		.loc 1 977 0
 1254 06a8 3B68     		ldr	r3, [r7, #0]
 1255 06aa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1256 06ac 4FEA4333 		lsl	r3, r3, #13
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1257              		.loc 1 974 0
 1258 06b0 1343     		orrs	r3, r3, r2
 1259 06b2 FB60     		str	r3, [r7, #12]
 1260 06b4 1EE0     		b	.L82
 1261              	.L81:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1262              		.loc 1 981 0
 1263 06b6 3B68     		ldr	r3, [r7, #0]
 1264 06b8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1265 06ba 1846     		mov	r0, r3
 1266 06bc 00F0F4FF 		bl	RTC_ByteToBcd2
 1267 06c0 0346     		mov	r3, r0
 1268 06c2 4FEA0344 		lsl	r4, r3, #16
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1269              		.loc 1 982 0
 1270 06c6 3B68     		ldr	r3, [r7, #0]
 1271 06c8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1272 06ca 1846     		mov	r0, r3
 1273 06cc 00F0ECFF 		bl	RTC_ByteToBcd2
 1274 06d0 0346     		mov	r3, r0
 1275 06d2 4FEA0323 		lsl	r3, r3, #8
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1276              		.loc 1 981 0
 1277 06d6 1C43     		orrs	r4, r4, r3
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1278              		.loc 1 983 0
 1279 06d8 3B68     		ldr	r3, [r7, #0]
 1280 06da 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1281 06dc 1846     		mov	r0, r3
 1282 06de 00F0E3FF 		bl	RTC_ByteToBcd2
 1283 06e2 0346     		mov	r3, r0
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1284              		.loc 1 982 0
 1285 06e4 44EA0302 		orr	r2, r4, r3
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1286              		.loc 1 984 0
 1287 06e8 3B68     		ldr	r3, [r7, #0]
 1288 06ea 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1289 06ec 4FEA4333 		lsl	r3, r3, #13
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1290              		.loc 1 981 0
 1291 06f0 1343     		orrs	r3, r3, r2
 1292 06f2 FB60     		str	r3, [r7, #12]
 1293              	.L82:
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1294              		.loc 1 988 0
 1295 06f4 1C4B     		ldr	r3, .L88
 1296 06f6 4FF0CA02 		mov	r2, #202
 1297 06fa 5A62     		str	r2, [r3, #36]
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1298              		.loc 1 989 0
 1299 06fc 1A4B     		ldr	r3, .L88
 1300 06fe 4FF05302 		mov	r2, #83
 1301 0702 5A62     		str	r2, [r3, #36]
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1302              		.loc 1 992 0
 1303 0704 FFF7FEFF 		bl	RTC_EnterInitMode
 1304 0708 0346     		mov	r3, r0
 1305 070a 002B     		cmp	r3, #0
 1306 070c 03D1     		bne	.L83
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1307              		.loc 1 994 0
 1308 070e 4FF00003 		mov	r3, #0
 1309 0712 FB72     		strb	r3, [r7, #11]
 1310 0714 1EE0     		b	.L84
 1311              	.L83:
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1312              		.loc 1 999 0
 1313 0716 144A     		ldr	r2, .L88
 1314 0718 FB68     		ldr	r3, [r7, #12]
 1315 071a 23F07F43 		bic	r3, r3, #-16777216
 1316 071e 23F0C003 		bic	r3, r3, #192
 1317 0722 5360     		str	r3, [r2, #4]
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1318              		.loc 1 1002 0
 1319 0724 FFF7FEFF 		bl	RTC_ExitInitMode
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1320              		.loc 1 1005 0
 1321 0728 0F4B     		ldr	r3, .L88
 1322 072a 9B68     		ldr	r3, [r3, #8]
 1323 072c 03F02003 		and	r3, r3, #32
 1324 0730 002B     		cmp	r3, #0
 1325 0732 0CD1     		bne	.L85
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 1326              		.loc 1 1007 0
 1327 0734 FFF7FEFF 		bl	RTC_WaitForSynchro
 1328 0738 0346     		mov	r3, r0
 1329 073a 002B     		cmp	r3, #0
 1330 073c 03D1     		bne	.L86
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 1331              		.loc 1 1009 0
 1332 073e 4FF00003 		mov	r3, #0
 1333 0742 FB72     		strb	r3, [r7, #11]
 1334 0744 06E0     		b	.L84
 1335              	.L86:
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 1336              		.loc 1 1013 0
 1337 0746 4FF00103 		mov	r3, #1
 1338 074a FB72     		strb	r3, [r7, #11]
 1339 074c 02E0     		b	.L84
 1340              	.L85:
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1341              		.loc 1 1018 0
 1342 074e 4FF00103 		mov	r3, #1
 1343 0752 FB72     		strb	r3, [r7, #11]
 1344              	.L84:
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1345              		.loc 1 1022 0
 1346 0754 044B     		ldr	r3, .L88
 1347 0756 4FF0FF02 		mov	r2, #255
 1348 075a 5A62     		str	r2, [r3, #36]
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1349              		.loc 1 1024 0
 1350 075c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1351              		.loc 1 1025 0
 1352 075e 1846     		mov	r0, r3
 1353 0760 07F11407 		add	r7, r7, #20
 1354 0764 BD46     		mov	sp, r7
 1355 0766 90BD     		pop	{r4, r7, pc}
 1356              	.L89:
 1357              		.align	2
 1358              	.L88:
 1359 0768 00280040 		.word	1073752064
 1360              		.cfi_endproc
 1361              	.LFE123:
 1363              		.align	2
 1364              		.global	RTC_DateStructInit
 1365              		.thumb
 1366              		.thumb_func
 1368              	RTC_DateStructInit:
 1369              	.LFB124:
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1370              		.loc 1 1035 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 8
 1373              		@ frame_needed = 1, uses_anonymous_args = 0
 1374              		@ link register save eliminated.
 1375 076c 80B4     		push	{r7}
 1376              	.LCFI41:
 1377              		.cfi_def_cfa_offset 4
 1378              		.cfi_offset 7, -4
 1379 076e 83B0     		sub	sp, sp, #12
 1380              	.LCFI42:
 1381              		.cfi_def_cfa_offset 16
 1382 0770 00AF     		add	r7, sp, #0
 1383              	.LCFI43:
 1384              		.cfi_def_cfa_register 7
 1385 0772 7860     		str	r0, [r7, #4]
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1386              		.loc 1 1037 0
 1387 0774 7B68     		ldr	r3, [r7, #4]
 1388 0776 4FF00102 		mov	r2, #1
 1389 077a 1A70     		strb	r2, [r3, #0]
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1390              		.loc 1 1038 0
 1391 077c 7B68     		ldr	r3, [r7, #4]
 1392 077e 4FF00102 		mov	r2, #1
 1393 0782 9A70     		strb	r2, [r3, #2]
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1394              		.loc 1 1039 0
 1395 0784 7B68     		ldr	r3, [r7, #4]
 1396 0786 4FF00102 		mov	r2, #1
 1397 078a 5A70     		strb	r2, [r3, #1]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1398              		.loc 1 1040 0
 1399 078c 7B68     		ldr	r3, [r7, #4]
 1400 078e 4FF00002 		mov	r2, #0
 1401 0792 DA70     		strb	r2, [r3, #3]
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1402              		.loc 1 1041 0
 1403 0794 07F10C07 		add	r7, r7, #12
 1404 0798 BD46     		mov	sp, r7
 1405 079a 80BC     		pop	{r7}
 1406 079c 7047     		bx	lr
 1407              		.cfi_endproc
 1408              	.LFE124:
 1410 079e 00BF     		.align	2
 1411              		.global	RTC_GetDate
 1412              		.thumb
 1413              		.thumb_func
 1415              	RTC_GetDate:
 1416              	.LFB125:
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1417              		.loc 1 1054 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 16
 1420              		@ frame_needed = 1, uses_anonymous_args = 0
 1421 07a0 80B5     		push	{r7, lr}
 1422              	.LCFI44:
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 07a2 84B0     		sub	sp, sp, #16
 1427              	.LCFI45:
 1428              		.cfi_def_cfa_offset 24
 1429 07a4 00AF     		add	r7, sp, #0
 1430              	.LCFI46:
 1431              		.cfi_def_cfa_register 7
 1432 07a6 7860     		str	r0, [r7, #4]
 1433 07a8 3960     		str	r1, [r7, #0]
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1434              		.loc 1 1055 0
 1435 07aa 4FF00003 		mov	r3, #0
 1436 07ae FB60     		str	r3, [r7, #12]
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1437              		.loc 1 1061 0
 1438 07b0 234B     		ldr	r3, .L93
 1439 07b2 5B68     		ldr	r3, [r3, #4]
 1440 07b4 23F07F43 		bic	r3, r3, #-16777216
 1441 07b8 23F0C003 		bic	r3, r3, #192
 1442 07bc FB60     		str	r3, [r7, #12]
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1443              		.loc 1 1064 0
 1444 07be FB68     		ldr	r3, [r7, #12]
 1445 07c0 03F47F03 		and	r3, r3, #16711680
 1446 07c4 4FEA1343 		lsr	r3, r3, #16
 1447 07c8 DAB2     		uxtb	r2, r3
 1448 07ca 3B68     		ldr	r3, [r7, #0]
 1449 07cc DA70     		strb	r2, [r3, #3]
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1450              		.loc 1 1065 0
 1451 07ce FB68     		ldr	r3, [r7, #12]
 1452 07d0 03F4F853 		and	r3, r3, #7936
 1453 07d4 4FEA1323 		lsr	r3, r3, #8
 1454 07d8 DAB2     		uxtb	r2, r3
 1455 07da 3B68     		ldr	r3, [r7, #0]
 1456 07dc 5A70     		strb	r2, [r3, #1]
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1457              		.loc 1 1066 0
 1458 07de FB68     		ldr	r3, [r7, #12]
 1459 07e0 DBB2     		uxtb	r3, r3
 1460 07e2 03F03F03 		and	r3, r3, #63
 1461 07e6 DAB2     		uxtb	r2, r3
 1462 07e8 3B68     		ldr	r3, [r7, #0]
 1463 07ea 9A70     		strb	r2, [r3, #2]
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1464              		.loc 1 1067 0
 1465 07ec FB68     		ldr	r3, [r7, #12]
 1466 07ee 03F46043 		and	r3, r3, #57344
 1467 07f2 4FEA5333 		lsr	r3, r3, #13
 1468 07f6 DAB2     		uxtb	r2, r3
 1469 07f8 3B68     		ldr	r3, [r7, #0]
 1470 07fa 1A70     		strb	r2, [r3, #0]
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1471              		.loc 1 1070 0
 1472 07fc 7B68     		ldr	r3, [r7, #4]
 1473 07fe 002B     		cmp	r3, #0
 1474 0800 1AD1     		bne	.L91
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1475              		.loc 1 1073 0
 1476 0802 3B68     		ldr	r3, [r7, #0]
 1477 0804 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1478 0806 1846     		mov	r0, r3
 1479 0808 00F070FF 		bl	RTC_Bcd2ToByte
 1480 080c 0346     		mov	r3, r0
 1481 080e 1A46     		mov	r2, r3
 1482 0810 3B68     		ldr	r3, [r7, #0]
 1483 0812 DA70     		strb	r2, [r3, #3]
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1484              		.loc 1 1074 0
 1485 0814 3B68     		ldr	r3, [r7, #0]
 1486 0816 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1487 0818 1846     		mov	r0, r3
 1488 081a 00F067FF 		bl	RTC_Bcd2ToByte
 1489 081e 0346     		mov	r3, r0
 1490 0820 1A46     		mov	r2, r3
 1491 0822 3B68     		ldr	r3, [r7, #0]
 1492 0824 5A70     		strb	r2, [r3, #1]
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1493              		.loc 1 1075 0
 1494 0826 3B68     		ldr	r3, [r7, #0]
 1495 0828 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1496 082a 1846     		mov	r0, r3
 1497 082c 00F05EFF 		bl	RTC_Bcd2ToByte
 1498 0830 0346     		mov	r3, r0
 1499 0832 1A46     		mov	r2, r3
 1500 0834 3B68     		ldr	r3, [r7, #0]
 1501 0836 9A70     		strb	r2, [r3, #2]
 1502              	.L91:
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1503              		.loc 1 1077 0
 1504 0838 07F11007 		add	r7, r7, #16
 1505 083c BD46     		mov	sp, r7
 1506 083e 80BD     		pop	{r7, pc}
 1507              	.L94:
 1508              		.align	2
 1509              	.L93:
 1510 0840 00280040 		.word	1073752064
 1511              		.cfi_endproc
 1512              	.LFE125:
 1514              		.align	2
 1515              		.global	RTC_SetAlarm
 1516              		.thumb
 1517              		.thumb_func
 1519              	RTC_SetAlarm:
 1520              	.LFB126:
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1521              		.loc 1 1114 0
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 24
 1524              		@ frame_needed = 1, uses_anonymous_args = 0
 1525 0844 90B5     		push	{r4, r7, lr}
 1526              	.LCFI47:
 1527              		.cfi_def_cfa_offset 12
 1528              		.cfi_offset 4, -12
 1529              		.cfi_offset 7, -8
 1530              		.cfi_offset 14, -4
 1531 0846 87B0     		sub	sp, sp, #28
 1532              	.LCFI48:
 1533              		.cfi_def_cfa_offset 40
 1534 0848 00AF     		add	r7, sp, #0
 1535              	.LCFI49:
 1536              		.cfi_def_cfa_register 7
 1537 084a F860     		str	r0, [r7, #12]
 1538 084c B960     		str	r1, [r7, #8]
 1539 084e 7A60     		str	r2, [r7, #4]
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1540              		.loc 1 1115 0
 1541 0850 4FF00003 		mov	r3, #0
 1542 0854 7B61     		str	r3, [r7, #20]
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1543              		.loc 1 1123 0
 1544 0856 FB68     		ldr	r3, [r7, #12]
 1545 0858 002B     		cmp	r3, #0
 1546 085a 0AD1     		bne	.L96
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1547              		.loc 1 1125 0
 1548 085c 4D4B     		ldr	r3, .L106
 1549 085e 9B68     		ldr	r3, [r3, #8]
 1550 0860 03F04003 		and	r3, r3, #64
 1551 0864 002B     		cmp	r3, #0
 1552 0866 29D1     		bne	.L98
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1553              		.loc 1 1132 0
 1554 0868 7B68     		ldr	r3, [r7, #4]
 1555 086a 4FF00002 		mov	r2, #0
 1556 086e DA70     		strb	r2, [r3, #3]
 1557 0870 24E0     		b	.L98
 1558              	.L96:
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1559              		.loc 1 1149 0
 1560 0872 484B     		ldr	r3, .L106
 1561 0874 9B68     		ldr	r3, [r3, #8]
 1562 0876 03F04003 		and	r3, r3, #64
 1563 087a 002B     		cmp	r3, #0
 1564 087c 07D0     		beq	.L99
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1565              		.loc 1 1151 0
 1566 087e 7B68     		ldr	r3, [r7, #4]
 1567 0880 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1568 0882 1846     		mov	r0, r3
 1569 0884 00F032FF 		bl	RTC_Bcd2ToByte
 1570 0888 0346     		mov	r3, r0
 1571 088a 7B61     		str	r3, [r7, #20]
 1572 088c 03E0     		b	.L100
 1573              	.L99:
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1574              		.loc 1 1157 0
 1575 088e 7B68     		ldr	r3, [r7, #4]
 1576 0890 4FF00002 		mov	r2, #0
 1577 0894 DA70     		strb	r2, [r3, #3]
 1578              	.L100:
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1579              		.loc 1 1164 0
 1580 0896 7B68     		ldr	r3, [r7, #4]
 1581 0898 9B68     		ldr	r3, [r3, #8]
 1582 089a 002B     		cmp	r3, #0
 1583 089c 07D1     		bne	.L101
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1584              		.loc 1 1166 0
 1585 089e 7B68     		ldr	r3, [r7, #4]
 1586 08a0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1587 08a2 1846     		mov	r0, r3
 1588 08a4 00F022FF 		bl	RTC_Bcd2ToByte
 1589 08a8 0346     		mov	r3, r0
 1590 08aa 7B61     		str	r3, [r7, #20]
 1591 08ac 06E0     		b	.L98
 1592              	.L101:
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1593              		.loc 1 1171 0
 1594 08ae 7B68     		ldr	r3, [r7, #4]
 1595 08b0 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1596 08b2 1846     		mov	r0, r3
 1597 08b4 00F01AFF 		bl	RTC_Bcd2ToByte
 1598 08b8 0346     		mov	r3, r0
 1599 08ba 7B61     		str	r3, [r7, #20]
 1600              	.L98:
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1601              		.loc 1 1177 0
 1602 08bc FB68     		ldr	r3, [r7, #12]
 1603 08be 002B     		cmp	r3, #0
 1604 08c0 1DD0     		beq	.L102
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1605              		.loc 1 1179 0
 1606 08c2 7B68     		ldr	r3, [r7, #4]
 1607 08c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1608 08c6 4FEA0342 		lsl	r2, r3, #16
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1609              		.loc 1 1180 0
 1610 08ca 7B68     		ldr	r3, [r7, #4]
 1611 08cc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1612 08ce 4FEA0323 		lsl	r3, r3, #8
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1613              		.loc 1 1179 0
 1614 08d2 1A43     		orrs	r2, r2, r3
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1615              		.loc 1 1181 0
 1616 08d4 7B68     		ldr	r3, [r7, #4]
 1617 08d6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1618              		.loc 1 1180 0
 1619 08d8 1A43     		orrs	r2, r2, r3
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1620              		.loc 1 1182 0
 1621 08da 7B68     		ldr	r3, [r7, #4]
 1622 08dc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1623 08de 4FEA0343 		lsl	r3, r3, #16
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1624              		.loc 1 1181 0
 1625 08e2 1A43     		orrs	r2, r2, r3
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1626              		.loc 1 1183 0
 1627 08e4 7B68     		ldr	r3, [r7, #4]
 1628 08e6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1629 08e8 4FEA0363 		lsl	r3, r3, #24
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1630              		.loc 1 1182 0
 1631 08ec 1A43     		orrs	r2, r2, r3
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1632              		.loc 1 1184 0
 1633 08ee 7B68     		ldr	r3, [r7, #4]
 1634 08f0 9B68     		ldr	r3, [r3, #8]
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1635              		.loc 1 1183 0
 1636 08f2 1A43     		orrs	r2, r2, r3
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1637              		.loc 1 1185 0
 1638 08f4 7B68     		ldr	r3, [r7, #4]
 1639 08f6 5B68     		ldr	r3, [r3, #4]
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1640              		.loc 1 1179 0
 1641 08f8 1343     		orrs	r3, r3, r2
 1642 08fa 7B61     		str	r3, [r7, #20]
 1643 08fc 2FE0     		b	.L103
 1644              	.L102:
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1645              		.loc 1 1189 0
 1646 08fe 7B68     		ldr	r3, [r7, #4]
 1647 0900 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1648 0902 1846     		mov	r0, r3
 1649 0904 00F0D0FE 		bl	RTC_ByteToBcd2
 1650 0908 0346     		mov	r3, r0
 1651 090a 4FEA0344 		lsl	r4, r3, #16
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1652              		.loc 1 1190 0
 1653 090e 7B68     		ldr	r3, [r7, #4]
 1654 0910 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1655 0912 1846     		mov	r0, r3
 1656 0914 00F0C8FE 		bl	RTC_ByteToBcd2
 1657 0918 0346     		mov	r3, r0
 1658 091a 4FEA0323 		lsl	r3, r3, #8
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1659              		.loc 1 1189 0
 1660 091e 1C43     		orrs	r4, r4, r3
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1661              		.loc 1 1191 0
 1662 0920 7B68     		ldr	r3, [r7, #4]
 1663 0922 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1664 0924 1846     		mov	r0, r3
 1665 0926 00F0BFFE 		bl	RTC_ByteToBcd2
 1666 092a 0346     		mov	r3, r0
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1667              		.loc 1 1190 0
 1668 092c 44EA0302 		orr	r2, r4, r3
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1669              		.loc 1 1192 0
 1670 0930 7B68     		ldr	r3, [r7, #4]
 1671 0932 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1672 0934 4FEA0343 		lsl	r3, r3, #16
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1673              		.loc 1 1191 0
 1674 0938 42EA0304 		orr	r4, r2, r3
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1675              		.loc 1 1193 0
 1676 093c 7B68     		ldr	r3, [r7, #4]
 1677 093e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1678 0940 1846     		mov	r0, r3
 1679 0942 00F0B1FE 		bl	RTC_ByteToBcd2
 1680 0946 0346     		mov	r3, r0
 1681 0948 4FEA0363 		lsl	r3, r3, #24
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1682              		.loc 1 1192 0
 1683 094c 44EA0302 		orr	r2, r4, r3
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1684              		.loc 1 1194 0
 1685 0950 7B68     		ldr	r3, [r7, #4]
 1686 0952 9B68     		ldr	r3, [r3, #8]
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1687              		.loc 1 1193 0
 1688 0954 1A43     		orrs	r2, r2, r3
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1689              		.loc 1 1195 0
 1690 0956 7B68     		ldr	r3, [r7, #4]
 1691 0958 5B68     		ldr	r3, [r3, #4]
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1692              		.loc 1 1189 0
 1693 095a 1343     		orrs	r3, r3, r2
 1694 095c 7B61     		str	r3, [r7, #20]
 1695              	.L103:
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1696              		.loc 1 1199 0
 1697 095e 0D4B     		ldr	r3, .L106
 1698 0960 4FF0CA02 		mov	r2, #202
 1699 0964 5A62     		str	r2, [r3, #36]
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1700              		.loc 1 1200 0
 1701 0966 0B4B     		ldr	r3, .L106
 1702 0968 4FF05302 		mov	r2, #83
 1703 096c 5A62     		str	r2, [r3, #36]
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1704              		.loc 1 1203 0
 1705 096e BB68     		ldr	r3, [r7, #8]
 1706 0970 B3F5807F 		cmp	r3, #256
 1707 0974 03D1     		bne	.L104
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1708              		.loc 1 1205 0
 1709 0976 074B     		ldr	r3, .L106
 1710 0978 7A69     		ldr	r2, [r7, #20]
 1711 097a DA61     		str	r2, [r3, #28]
 1712 097c 02E0     		b	.L105
 1713              	.L104:
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1714              		.loc 1 1209 0
 1715 097e 054B     		ldr	r3, .L106
 1716 0980 7A69     		ldr	r2, [r7, #20]
 1717 0982 1A62     		str	r2, [r3, #32]
 1718              	.L105:
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1719              		.loc 1 1213 0
 1720 0984 034B     		ldr	r3, .L106
 1721 0986 4FF0FF02 		mov	r2, #255
 1722 098a 5A62     		str	r2, [r3, #36]
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1723              		.loc 1 1214 0
 1724 098c 07F11C07 		add	r7, r7, #28
 1725 0990 BD46     		mov	sp, r7
 1726 0992 90BD     		pop	{r4, r7, pc}
 1727              	.L107:
 1728              		.align	2
 1729              	.L106:
 1730 0994 00280040 		.word	1073752064
 1731              		.cfi_endproc
 1732              	.LFE126:
 1734              		.align	2
 1735              		.global	RTC_AlarmStructInit
 1736              		.thumb
 1737              		.thumb_func
 1739              	RTC_AlarmStructInit:
 1740              	.LFB127:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1741              		.loc 1 1225 0
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 8
 1744              		@ frame_needed = 1, uses_anonymous_args = 0
 1745              		@ link register save eliminated.
 1746 0998 80B4     		push	{r7}
 1747              	.LCFI50:
 1748              		.cfi_def_cfa_offset 4
 1749              		.cfi_offset 7, -4
 1750 099a 83B0     		sub	sp, sp, #12
 1751              	.LCFI51:
 1752              		.cfi_def_cfa_offset 16
 1753 099c 00AF     		add	r7, sp, #0
 1754              	.LCFI52:
 1755              		.cfi_def_cfa_register 7
 1756 099e 7860     		str	r0, [r7, #4]
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1757              		.loc 1 1227 0
 1758 09a0 7B68     		ldr	r3, [r7, #4]
 1759 09a2 4FF00002 		mov	r2, #0
 1760 09a6 DA70     		strb	r2, [r3, #3]
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1761              		.loc 1 1228 0
 1762 09a8 7B68     		ldr	r3, [r7, #4]
 1763 09aa 4FF00002 		mov	r2, #0
 1764 09ae 1A70     		strb	r2, [r3, #0]
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1765              		.loc 1 1229 0
 1766 09b0 7B68     		ldr	r3, [r7, #4]
 1767 09b2 4FF00002 		mov	r2, #0
 1768 09b6 5A70     		strb	r2, [r3, #1]
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1769              		.loc 1 1230 0
 1770 09b8 7B68     		ldr	r3, [r7, #4]
 1771 09ba 4FF00002 		mov	r2, #0
 1772 09be 9A70     		strb	r2, [r3, #2]
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1773              		.loc 1 1233 0
 1774 09c0 7B68     		ldr	r3, [r7, #4]
 1775 09c2 4FF00002 		mov	r2, #0
 1776 09c6 9A60     		str	r2, [r3, #8]
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1777              		.loc 1 1234 0
 1778 09c8 7B68     		ldr	r3, [r7, #4]
 1779 09ca 4FF00102 		mov	r2, #1
 1780 09ce 1A73     		strb	r2, [r3, #12]
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1781              		.loc 1 1237 0
 1782 09d0 7B68     		ldr	r3, [r7, #4]
 1783 09d2 4FF00002 		mov	r2, #0
 1784 09d6 5A60     		str	r2, [r3, #4]
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1785              		.loc 1 1238 0
 1786 09d8 07F10C07 		add	r7, r7, #12
 1787 09dc BD46     		mov	sp, r7
 1788 09de 80BC     		pop	{r7}
 1789 09e0 7047     		bx	lr
 1790              		.cfi_endproc
 1791              	.LFE127:
 1793 09e2 00BF     		.align	2
 1794              		.global	RTC_GetAlarm
 1795              		.thumb
 1796              		.thumb_func
 1798              	RTC_GetAlarm:
 1799              	.LFB128:
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1800              		.loc 1 1255 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 24
 1803              		@ frame_needed = 1, uses_anonymous_args = 0
 1804 09e4 80B5     		push	{r7, lr}
 1805              	.LCFI53:
 1806              		.cfi_def_cfa_offset 8
 1807              		.cfi_offset 7, -8
 1808              		.cfi_offset 14, -4
 1809 09e6 86B0     		sub	sp, sp, #24
 1810              	.LCFI54:
 1811              		.cfi_def_cfa_offset 32
 1812 09e8 00AF     		add	r7, sp, #0
 1813              	.LCFI55:
 1814              		.cfi_def_cfa_register 7
 1815 09ea F860     		str	r0, [r7, #12]
 1816 09ec B960     		str	r1, [r7, #8]
 1817 09ee 7A60     		str	r2, [r7, #4]
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1818              		.loc 1 1256 0
 1819 09f0 4FF00003 		mov	r3, #0
 1820 09f4 7B61     		str	r3, [r7, #20]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1821              		.loc 1 1263 0
 1822 09f6 BB68     		ldr	r3, [r7, #8]
 1823 09f8 B3F5807F 		cmp	r3, #256
 1824 09fc 03D1     		bne	.L110
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1825              		.loc 1 1265 0
 1826 09fe 314B     		ldr	r3, .L113
 1827 0a00 DB69     		ldr	r3, [r3, #28]
 1828 0a02 7B61     		str	r3, [r7, #20]
 1829 0a04 02E0     		b	.L111
 1830              	.L110:
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1831              		.loc 1 1269 0
 1832 0a06 2F4B     		ldr	r3, .L113
 1833 0a08 1B6A     		ldr	r3, [r3, #32]
 1834 0a0a 7B61     		str	r3, [r7, #20]
 1835              	.L111:
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1836              		.loc 1 1273 0
 1837 0a0c 7B69     		ldr	r3, [r7, #20]
 1838 0a0e 03F47C13 		and	r3, r3, #4128768
 1839 0a12 4FEA1343 		lsr	r3, r3, #16
 1840 0a16 DAB2     		uxtb	r2, r3
 1841 0a18 7B68     		ldr	r3, [r7, #4]
 1842 0a1a 1A70     		strb	r2, [r3, #0]
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1843              		.loc 1 1275 0
 1844 0a1c 7B69     		ldr	r3, [r7, #20]
 1845 0a1e 03F4FE43 		and	r3, r3, #32512
 1846 0a22 4FEA1323 		lsr	r3, r3, #8
 1847 0a26 DAB2     		uxtb	r2, r3
 1848 0a28 7B68     		ldr	r3, [r7, #4]
 1849 0a2a 5A70     		strb	r2, [r3, #1]
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1850              		.loc 1 1277 0
 1851 0a2c 7B69     		ldr	r3, [r7, #20]
 1852 0a2e DBB2     		uxtb	r3, r3
 1853 0a30 03F07F03 		and	r3, r3, #127
 1854 0a34 DAB2     		uxtb	r2, r3
 1855 0a36 7B68     		ldr	r3, [r7, #4]
 1856 0a38 9A70     		strb	r2, [r3, #2]
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1857              		.loc 1 1279 0
 1858 0a3a 7B69     		ldr	r3, [r7, #20]
 1859 0a3c 03F48003 		and	r3, r3, #4194304
 1860 0a40 4FEA1343 		lsr	r3, r3, #16
 1861 0a44 DAB2     		uxtb	r2, r3
 1862 0a46 7B68     		ldr	r3, [r7, #4]
 1863 0a48 DA70     		strb	r2, [r3, #3]
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1864              		.loc 1 1280 0
 1865 0a4a 7B69     		ldr	r3, [r7, #20]
 1866 0a4c 03F07C53 		and	r3, r3, #1056964608
 1867 0a50 4FEA1363 		lsr	r3, r3, #24
 1868 0a54 DAB2     		uxtb	r2, r3
 1869 0a56 7B68     		ldr	r3, [r7, #4]
 1870 0a58 1A73     		strb	r2, [r3, #12]
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1871              		.loc 1 1281 0
 1872 0a5a 7B69     		ldr	r3, [r7, #20]
 1873 0a5c 03F08042 		and	r2, r3, #1073741824
 1874 0a60 7B68     		ldr	r3, [r7, #4]
 1875 0a62 9A60     		str	r2, [r3, #8]
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1876              		.loc 1 1282 0
 1877 0a64 7B69     		ldr	r3, [r7, #20]
 1878 0a66 03F08032 		and	r2, r3, #-2139062144
 1879 0a6a 7B68     		ldr	r3, [r7, #4]
 1880 0a6c 5A60     		str	r2, [r3, #4]
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1881              		.loc 1 1284 0
 1882 0a6e FB68     		ldr	r3, [r7, #12]
 1883 0a70 002B     		cmp	r3, #0
 1884 0a72 23D1     		bne	.L109
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1885              		.loc 1 1286 0
 1886 0a74 7B68     		ldr	r3, [r7, #4]
 1887 0a76 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1888 0a78 1846     		mov	r0, r3
 1889 0a7a 00F037FE 		bl	RTC_Bcd2ToByte
 1890 0a7e 0346     		mov	r3, r0
 1891 0a80 1A46     		mov	r2, r3
 1892 0a82 7B68     		ldr	r3, [r7, #4]
 1893 0a84 1A70     		strb	r2, [r3, #0]
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1894              		.loc 1 1288 0
 1895 0a86 7B68     		ldr	r3, [r7, #4]
 1896 0a88 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1897 0a8a 1846     		mov	r0, r3
 1898 0a8c 00F02EFE 		bl	RTC_Bcd2ToByte
 1899 0a90 0346     		mov	r3, r0
 1900 0a92 1A46     		mov	r2, r3
 1901 0a94 7B68     		ldr	r3, [r7, #4]
 1902 0a96 5A70     		strb	r2, [r3, #1]
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1903              		.loc 1 1290 0
 1904 0a98 7B68     		ldr	r3, [r7, #4]
 1905 0a9a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1906 0a9c 1846     		mov	r0, r3
 1907 0a9e 00F025FE 		bl	RTC_Bcd2ToByte
 1908 0aa2 0346     		mov	r3, r0
 1909 0aa4 1A46     		mov	r2, r3
 1910 0aa6 7B68     		ldr	r3, [r7, #4]
 1911 0aa8 9A70     		strb	r2, [r3, #2]
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1912              		.loc 1 1292 0
 1913 0aaa 7B68     		ldr	r3, [r7, #4]
 1914 0aac 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1915 0aae 1846     		mov	r0, r3
 1916 0ab0 00F01CFE 		bl	RTC_Bcd2ToByte
 1917 0ab4 0346     		mov	r3, r0
 1918 0ab6 1A46     		mov	r2, r3
 1919 0ab8 7B68     		ldr	r3, [r7, #4]
 1920 0aba 1A73     		strb	r2, [r3, #12]
 1921              	.L109:
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1922              		.loc 1 1294 0
 1923 0abc 07F11807 		add	r7, r7, #24
 1924 0ac0 BD46     		mov	sp, r7
 1925 0ac2 80BD     		pop	{r7, pc}
 1926              	.L114:
 1927              		.align	2
 1928              	.L113:
 1929 0ac4 00280040 		.word	1073752064
 1930              		.cfi_endproc
 1931              	.LFE128:
 1933              		.align	2
 1934              		.global	RTC_AlarmCmd
 1935              		.thumb
 1936              		.thumb_func
 1938              	RTC_AlarmCmd:
 1939              	.LFB129:
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1940              		.loc 1 1309 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 24
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944              		@ link register save eliminated.
 1945 0ac8 80B4     		push	{r7}
 1946              	.LCFI56:
 1947              		.cfi_def_cfa_offset 4
 1948              		.cfi_offset 7, -4
 1949 0aca 87B0     		sub	sp, sp, #28
 1950              	.LCFI57:
 1951              		.cfi_def_cfa_offset 32
 1952 0acc 00AF     		add	r7, sp, #0
 1953              	.LCFI58:
 1954              		.cfi_def_cfa_register 7
 1955 0ace 7860     		str	r0, [r7, #4]
 1956 0ad0 0B46     		mov	r3, r1
 1957 0ad2 FB70     		strb	r3, [r7, #3]
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1958              		.loc 1 1310 0
 1959 0ad4 4FF00003 		mov	r3, #0
 1960 0ad8 FB60     		str	r3, [r7, #12]
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1961              		.loc 1 1311 0
 1962 0ada 4FF00003 		mov	r3, #0
 1963 0ade 3B61     		str	r3, [r7, #16]
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1964              		.loc 1 1312 0
 1965 0ae0 4FF00003 		mov	r3, #0
 1966 0ae4 FB75     		strb	r3, [r7, #23]
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1967              		.loc 1 1319 0
 1968 0ae6 244B     		ldr	r3, .L122
 1969 0ae8 4FF0CA02 		mov	r2, #202
 1970 0aec 5A62     		str	r2, [r3, #36]
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1971              		.loc 1 1320 0
 1972 0aee 224B     		ldr	r3, .L122
 1973 0af0 4FF05302 		mov	r2, #83
 1974 0af4 5A62     		str	r2, [r3, #36]
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1975              		.loc 1 1323 0
 1976 0af6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1977 0af8 002B     		cmp	r3, #0
 1978 0afa 09D0     		beq	.L116
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1979              		.loc 1 1325 0
 1980 0afc 1E4B     		ldr	r3, .L122
 1981 0afe 1E4A     		ldr	r2, .L122
 1982 0b00 9168     		ldr	r1, [r2, #8]
 1983 0b02 7A68     		ldr	r2, [r7, #4]
 1984 0b04 0A43     		orrs	r2, r2, r1
 1985 0b06 9A60     		str	r2, [r3, #8]
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1986              		.loc 1 1327 0
 1987 0b08 4FF00103 		mov	r3, #1
 1988 0b0c FB75     		strb	r3, [r7, #23]
 1989 0b0e 28E0     		b	.L117
 1990              	.L116:
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1991              		.loc 1 1332 0
 1992 0b10 194B     		ldr	r3, .L122
 1993 0b12 194A     		ldr	r2, .L122
 1994 0b14 9168     		ldr	r1, [r2, #8]
 1995 0b16 7A68     		ldr	r2, [r7, #4]
 1996 0b18 6FEA0202 		mvn	r2, r2
 1997 0b1c 0A40     		ands	r2, r2, r1
 1998 0b1e 9A60     		str	r2, [r3, #8]
 1999              	.L119:
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2000              		.loc 1 1337 0 discriminator 1
 2001 0b20 154B     		ldr	r3, .L122
 2002 0b22 DA68     		ldr	r2, [r3, #12]
 2003 0b24 7B68     		ldr	r3, [r7, #4]
 2004 0b26 4FEA1323 		lsr	r3, r3, #8
 2005 0b2a 1340     		ands	r3, r3, r2
 2006 0b2c 3B61     		str	r3, [r7, #16]
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2007              		.loc 1 1338 0 discriminator 1
 2008 0b2e FB68     		ldr	r3, [r7, #12]
 2009 0b30 03F10103 		add	r3, r3, #1
 2010 0b34 FB60     		str	r3, [r7, #12]
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2011              		.loc 1 1339 0 discriminator 1
 2012 0b36 FB68     		ldr	r3, [r7, #12]
 2013 0b38 B3F5803F 		cmp	r3, #65536
 2014 0b3c 02D0     		beq	.L118
 2015 0b3e 3B69     		ldr	r3, [r7, #16]
 2016 0b40 002B     		cmp	r3, #0
 2017 0b42 EDD0     		beq	.L119
 2018              	.L118:
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2019              		.loc 1 1341 0
 2020 0b44 0C4B     		ldr	r3, .L122
 2021 0b46 DA68     		ldr	r2, [r3, #12]
 2022 0b48 7B68     		ldr	r3, [r7, #4]
 2023 0b4a 4FEA1323 		lsr	r3, r3, #8
 2024 0b4e 1340     		ands	r3, r3, r2
 2025 0b50 002B     		cmp	r3, #0
 2026 0b52 03D1     		bne	.L120
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2027              		.loc 1 1343 0
 2028 0b54 4FF00003 		mov	r3, #0
 2029 0b58 FB75     		strb	r3, [r7, #23]
 2030 0b5a 02E0     		b	.L117
 2031              	.L120:
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2032              		.loc 1 1347 0
 2033 0b5c 4FF00103 		mov	r3, #1
 2034 0b60 FB75     		strb	r3, [r7, #23]
 2035              	.L117:
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2036              		.loc 1 1352 0
 2037 0b62 054B     		ldr	r3, .L122
 2038 0b64 4FF0FF02 		mov	r2, #255
 2039 0b68 5A62     		str	r2, [r3, #36]
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2040              		.loc 1 1354 0
 2041 0b6a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2042              		.loc 1 1355 0
 2043 0b6c 1846     		mov	r0, r3
 2044 0b6e 07F11C07 		add	r7, r7, #28
 2045 0b72 BD46     		mov	sp, r7
 2046 0b74 80BC     		pop	{r7}
 2047 0b76 7047     		bx	lr
 2048              	.L123:
 2049              		.align	2
 2050              	.L122:
 2051 0b78 00280040 		.word	1073752064
 2052              		.cfi_endproc
 2053              	.LFE129:
 2055              		.align	2
 2056              		.global	RTC_AlarmSubSecondConfig
 2057              		.thumb
 2058              		.thumb_func
 2060              	RTC_AlarmSubSecondConfig:
 2061              	.LFB130:
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2062              		.loc 1 1403 0
 2063              		.cfi_startproc
 2064              		@ args = 0, pretend = 0, frame = 24
 2065              		@ frame_needed = 1, uses_anonymous_args = 0
 2066              		@ link register save eliminated.
 2067 0b7c 80B4     		push	{r7}
 2068              	.LCFI59:
 2069              		.cfi_def_cfa_offset 4
 2070              		.cfi_offset 7, -4
 2071 0b7e 87B0     		sub	sp, sp, #28
 2072              	.LCFI60:
 2073              		.cfi_def_cfa_offset 32
 2074 0b80 00AF     		add	r7, sp, #0
 2075              	.LCFI61:
 2076              		.cfi_def_cfa_register 7
 2077 0b82 F860     		str	r0, [r7, #12]
 2078 0b84 B960     		str	r1, [r7, #8]
 2079 0b86 7A60     		str	r2, [r7, #4]
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2080              		.loc 1 1404 0
 2081 0b88 4FF00003 		mov	r3, #0
 2082 0b8c 7B61     		str	r3, [r7, #20]
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2083              		.loc 1 1412 0
 2084 0b8e 104B     		ldr	r3, .L127
 2085 0b90 4FF0CA02 		mov	r2, #202
 2086 0b94 5A62     		str	r2, [r3, #36]
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2087              		.loc 1 1413 0
 2088 0b96 0E4B     		ldr	r3, .L127
 2089 0b98 4FF05302 		mov	r2, #83
 2090 0b9c 5A62     		str	r2, [r3, #36]
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2091              		.loc 1 1416 0
 2092 0b9e BA68     		ldr	r2, [r7, #8]
 2093 0ba0 7B68     		ldr	r3, [r7, #4]
 2094 0ba2 1343     		orrs	r3, r3, r2
 2095 0ba4 7B61     		str	r3, [r7, #20]
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2096              		.loc 1 1418 0
 2097 0ba6 FB68     		ldr	r3, [r7, #12]
 2098 0ba8 B3F5807F 		cmp	r3, #256
 2099 0bac 03D1     		bne	.L125
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2100              		.loc 1 1421 0
 2101 0bae 084B     		ldr	r3, .L127
 2102 0bb0 7A69     		ldr	r2, [r7, #20]
 2103 0bb2 5A64     		str	r2, [r3, #68]
 2104 0bb4 02E0     		b	.L126
 2105              	.L125:
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2106              		.loc 1 1426 0
 2107 0bb6 064B     		ldr	r3, .L127
 2108 0bb8 7A69     		ldr	r2, [r7, #20]
 2109 0bba 9A64     		str	r2, [r3, #72]
 2110              	.L126:
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2111              		.loc 1 1430 0
 2112 0bbc 044B     		ldr	r3, .L127
 2113 0bbe 4FF0FF02 		mov	r2, #255
 2114 0bc2 5A62     		str	r2, [r3, #36]
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2115              		.loc 1 1432 0
 2116 0bc4 07F11C07 		add	r7, r7, #28
 2117 0bc8 BD46     		mov	sp, r7
 2118 0bca 80BC     		pop	{r7}
 2119 0bcc 7047     		bx	lr
 2120              	.L128:
 2121 0bce 00BF     		.align	2
 2122              	.L127:
 2123 0bd0 00280040 		.word	1073752064
 2124              		.cfi_endproc
 2125              	.LFE130:
 2127              		.align	2
 2128              		.global	RTC_GetAlarmSubSecond
 2129              		.thumb
 2130              		.thumb_func
 2132              	RTC_GetAlarmSubSecond:
 2133              	.LFB131:
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2134              		.loc 1 1444 0
 2135              		.cfi_startproc
 2136              		@ args = 0, pretend = 0, frame = 16
 2137              		@ frame_needed = 1, uses_anonymous_args = 0
 2138              		@ link register save eliminated.
 2139 0bd4 80B4     		push	{r7}
 2140              	.LCFI62:
 2141              		.cfi_def_cfa_offset 4
 2142              		.cfi_offset 7, -4
 2143 0bd6 85B0     		sub	sp, sp, #20
 2144              	.LCFI63:
 2145              		.cfi_def_cfa_offset 24
 2146 0bd8 00AF     		add	r7, sp, #0
 2147              	.LCFI64:
 2148              		.cfi_def_cfa_register 7
 2149 0bda 7860     		str	r0, [r7, #4]
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2150              		.loc 1 1445 0
 2151 0bdc 4FF00003 		mov	r3, #0
 2152 0be0 FB60     		str	r3, [r7, #12]
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2153              		.loc 1 1448 0
 2154 0be2 7B68     		ldr	r3, [r7, #4]
 2155 0be4 B3F5807F 		cmp	r3, #256
 2156 0be8 07D1     		bne	.L130
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2157              		.loc 1 1450 0
 2158 0bea 0B4B     		ldr	r3, .L133
 2159 0bec 5B6C     		ldr	r3, [r3, #68]
 2160 0bee 4FEA4343 		lsl	r3, r3, #17
 2161 0bf2 4FEA5343 		lsr	r3, r3, #17
 2162 0bf6 FB60     		str	r3, [r7, #12]
 2163 0bf8 06E0     		b	.L131
 2164              	.L130:
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2165              		.loc 1 1454 0
 2166 0bfa 074B     		ldr	r3, .L133
 2167 0bfc 9B6C     		ldr	r3, [r3, #72]
 2168 0bfe 4FEA4343 		lsl	r3, r3, #17
 2169 0c02 4FEA5343 		lsr	r3, r3, #17
 2170 0c06 FB60     		str	r3, [r7, #12]
 2171              	.L131:
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2172              		.loc 1 1457 0
 2173 0c08 FB68     		ldr	r3, [r7, #12]
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2174              		.loc 1 1458 0
 2175 0c0a 1846     		mov	r0, r3
 2176 0c0c 07F11407 		add	r7, r7, #20
 2177 0c10 BD46     		mov	sp, r7
 2178 0c12 80BC     		pop	{r7}
 2179 0c14 7047     		bx	lr
 2180              	.L134:
 2181 0c16 00BF     		.align	2
 2182              	.L133:
 2183 0c18 00280040 		.word	1073752064
 2184              		.cfi_endproc
 2185              	.LFE131:
 2187              		.align	2
 2188              		.global	RTC_WakeUpClockConfig
 2189              		.thumb
 2190              		.thumb_func
 2192              	RTC_WakeUpClockConfig:
 2193              	.LFB132:
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2194              		.loc 1 1493 0
 2195              		.cfi_startproc
 2196              		@ args = 0, pretend = 0, frame = 8
 2197              		@ frame_needed = 1, uses_anonymous_args = 0
 2198              		@ link register save eliminated.
 2199 0c1c 80B4     		push	{r7}
 2200              	.LCFI65:
 2201              		.cfi_def_cfa_offset 4
 2202              		.cfi_offset 7, -4
 2203 0c1e 83B0     		sub	sp, sp, #12
 2204              	.LCFI66:
 2205              		.cfi_def_cfa_offset 16
 2206 0c20 00AF     		add	r7, sp, #0
 2207              	.LCFI67:
 2208              		.cfi_def_cfa_register 7
 2209 0c22 7860     		str	r0, [r7, #4]
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2210              		.loc 1 1498 0
 2211 0c24 0E4B     		ldr	r3, .L136
 2212 0c26 4FF0CA02 		mov	r2, #202
 2213 0c2a 5A62     		str	r2, [r3, #36]
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2214              		.loc 1 1499 0
 2215 0c2c 0C4B     		ldr	r3, .L136
 2216 0c2e 4FF05302 		mov	r2, #83
 2217 0c32 5A62     		str	r2, [r3, #36]
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2218              		.loc 1 1502 0
 2219 0c34 0A4B     		ldr	r3, .L136
 2220 0c36 0A4A     		ldr	r2, .L136
 2221 0c38 9268     		ldr	r2, [r2, #8]
 2222 0c3a 22F00702 		bic	r2, r2, #7
 2223 0c3e 9A60     		str	r2, [r3, #8]
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2224              		.loc 1 1505 0
 2225 0c40 074B     		ldr	r3, .L136
 2226 0c42 074A     		ldr	r2, .L136
 2227 0c44 9168     		ldr	r1, [r2, #8]
 2228 0c46 7A68     		ldr	r2, [r7, #4]
 2229 0c48 0A43     		orrs	r2, r2, r1
 2230 0c4a 9A60     		str	r2, [r3, #8]
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2231              		.loc 1 1508 0
 2232 0c4c 044B     		ldr	r3, .L136
 2233 0c4e 4FF0FF02 		mov	r2, #255
 2234 0c52 5A62     		str	r2, [r3, #36]
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2235              		.loc 1 1509 0
 2236 0c54 07F10C07 		add	r7, r7, #12
 2237 0c58 BD46     		mov	sp, r7
 2238 0c5a 80BC     		pop	{r7}
 2239 0c5c 7047     		bx	lr
 2240              	.L137:
 2241 0c5e 00BF     		.align	2
 2242              	.L136:
 2243 0c60 00280040 		.word	1073752064
 2244              		.cfi_endproc
 2245              	.LFE132:
 2247              		.align	2
 2248              		.global	RTC_SetWakeUpCounter
 2249              		.thumb
 2250              		.thumb_func
 2252              	RTC_SetWakeUpCounter:
 2253              	.LFB133:
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2254              		.loc 1 1520 0
 2255              		.cfi_startproc
 2256              		@ args = 0, pretend = 0, frame = 8
 2257              		@ frame_needed = 1, uses_anonymous_args = 0
 2258              		@ link register save eliminated.
 2259 0c64 80B4     		push	{r7}
 2260              	.LCFI68:
 2261              		.cfi_def_cfa_offset 4
 2262              		.cfi_offset 7, -4
 2263 0c66 83B0     		sub	sp, sp, #12
 2264              	.LCFI69:
 2265              		.cfi_def_cfa_offset 16
 2266 0c68 00AF     		add	r7, sp, #0
 2267              	.LCFI70:
 2268              		.cfi_def_cfa_register 7
 2269 0c6a 7860     		str	r0, [r7, #4]
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2270              		.loc 1 1525 0
 2271 0c6c 094B     		ldr	r3, .L139
 2272 0c6e 4FF0CA02 		mov	r2, #202
 2273 0c72 5A62     		str	r2, [r3, #36]
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2274              		.loc 1 1526 0
 2275 0c74 074B     		ldr	r3, .L139
 2276 0c76 4FF05302 		mov	r2, #83
 2277 0c7a 5A62     		str	r2, [r3, #36]
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2278              		.loc 1 1529 0
 2279 0c7c 054B     		ldr	r3, .L139
 2280 0c7e 7A68     		ldr	r2, [r7, #4]
 2281 0c80 5A61     		str	r2, [r3, #20]
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2282              		.loc 1 1532 0
 2283 0c82 044B     		ldr	r3, .L139
 2284 0c84 4FF0FF02 		mov	r2, #255
 2285 0c88 5A62     		str	r2, [r3, #36]
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2286              		.loc 1 1533 0
 2287 0c8a 07F10C07 		add	r7, r7, #12
 2288 0c8e BD46     		mov	sp, r7
 2289 0c90 80BC     		pop	{r7}
 2290 0c92 7047     		bx	lr
 2291              	.L140:
 2292              		.align	2
 2293              	.L139:
 2294 0c94 00280040 		.word	1073752064
 2295              		.cfi_endproc
 2296              	.LFE133:
 2298              		.align	2
 2299              		.global	RTC_GetWakeUpCounter
 2300              		.thumb
 2301              		.thumb_func
 2303              	RTC_GetWakeUpCounter:
 2304              	.LFB134:
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2305              		.loc 1 1541 0
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 0
 2308              		@ frame_needed = 1, uses_anonymous_args = 0
 2309              		@ link register save eliminated.
 2310 0c98 80B4     		push	{r7}
 2311              	.LCFI71:
 2312              		.cfi_def_cfa_offset 4
 2313              		.cfi_offset 7, -4
 2314 0c9a 00AF     		add	r7, sp, #0
 2315              	.LCFI72:
 2316              		.cfi_def_cfa_register 7
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2317              		.loc 1 1543 0
 2318 0c9c 044B     		ldr	r3, .L143
 2319 0c9e 5B69     		ldr	r3, [r3, #20]
 2320 0ca0 4FEA0343 		lsl	r3, r3, #16
 2321 0ca4 4FEA1343 		lsr	r3, r3, #16
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2322              		.loc 1 1544 0
 2323 0ca8 1846     		mov	r0, r3
 2324 0caa BD46     		mov	sp, r7
 2325 0cac 80BC     		pop	{r7}
 2326 0cae 7047     		bx	lr
 2327              	.L144:
 2328              		.align	2
 2329              	.L143:
 2330 0cb0 00280040 		.word	1073752064
 2331              		.cfi_endproc
 2332              	.LFE134:
 2334              		.align	2
 2335              		.global	RTC_WakeUpCmd
 2336              		.thumb
 2337              		.thumb_func
 2339              	RTC_WakeUpCmd:
 2340              	.LFB135:
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2341              		.loc 1 1553 0
 2342              		.cfi_startproc
 2343              		@ args = 0, pretend = 0, frame = 24
 2344              		@ frame_needed = 1, uses_anonymous_args = 0
 2345              		@ link register save eliminated.
 2346 0cb4 80B4     		push	{r7}
 2347              	.LCFI73:
 2348              		.cfi_def_cfa_offset 4
 2349              		.cfi_offset 7, -4
 2350 0cb6 87B0     		sub	sp, sp, #28
 2351              	.LCFI74:
 2352              		.cfi_def_cfa_offset 32
 2353 0cb8 00AF     		add	r7, sp, #0
 2354              	.LCFI75:
 2355              		.cfi_def_cfa_register 7
 2356 0cba 0346     		mov	r3, r0
 2357 0cbc FB71     		strb	r3, [r7, #7]
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2358              		.loc 1 1554 0
 2359 0cbe 4FF00003 		mov	r3, #0
 2360 0cc2 FB60     		str	r3, [r7, #12]
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2361              		.loc 1 1555 0
 2362 0cc4 4FF00003 		mov	r3, #0
 2363 0cc8 3B61     		str	r3, [r7, #16]
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2364              		.loc 1 1556 0
 2365 0cca 4FF00003 		mov	r3, #0
 2366 0cce FB75     		strb	r3, [r7, #23]
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2367              		.loc 1 1562 0
 2368 0cd0 214B     		ldr	r3, .L152
 2369 0cd2 4FF0CA02 		mov	r2, #202
 2370 0cd6 5A62     		str	r2, [r3, #36]
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2371              		.loc 1 1563 0
 2372 0cd8 1F4B     		ldr	r3, .L152
 2373 0cda 4FF05302 		mov	r2, #83
 2374 0cde 5A62     		str	r2, [r3, #36]
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2375              		.loc 1 1565 0
 2376 0ce0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2377 0ce2 002B     		cmp	r3, #0
 2378 0ce4 09D0     		beq	.L146
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2379              		.loc 1 1568 0
 2380 0ce6 1C4B     		ldr	r3, .L152
 2381 0ce8 1B4A     		ldr	r2, .L152
 2382 0cea 9268     		ldr	r2, [r2, #8]
 2383 0cec 42F48062 		orr	r2, r2, #1024
 2384 0cf0 9A60     		str	r2, [r3, #8]
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2385              		.loc 1 1569 0
 2386 0cf2 4FF00103 		mov	r3, #1
 2387 0cf6 FB75     		strb	r3, [r7, #23]
 2388 0cf8 22E0     		b	.L147
 2389              	.L146:
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2390              		.loc 1 1574 0
 2391 0cfa 174B     		ldr	r3, .L152
 2392 0cfc 164A     		ldr	r2, .L152
 2393 0cfe 9268     		ldr	r2, [r2, #8]
 2394 0d00 22F48062 		bic	r2, r2, #1024
 2395 0d04 9A60     		str	r2, [r3, #8]
 2396              	.L149:
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2397              		.loc 1 1578 0 discriminator 1
 2398 0d06 144B     		ldr	r3, .L152
 2399 0d08 DB68     		ldr	r3, [r3, #12]
 2400 0d0a 03F00403 		and	r3, r3, #4
 2401 0d0e 3B61     		str	r3, [r7, #16]
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2402              		.loc 1 1579 0 discriminator 1
 2403 0d10 FB68     		ldr	r3, [r7, #12]
 2404 0d12 03F10103 		add	r3, r3, #1
 2405 0d16 FB60     		str	r3, [r7, #12]
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2406              		.loc 1 1580 0 discriminator 1
 2407 0d18 FB68     		ldr	r3, [r7, #12]
 2408 0d1a B3F5803F 		cmp	r3, #65536
 2409 0d1e 02D0     		beq	.L148
 2410 0d20 3B69     		ldr	r3, [r7, #16]
 2411 0d22 002B     		cmp	r3, #0
 2412 0d24 EFD0     		beq	.L149
 2413              	.L148:
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2414              		.loc 1 1582 0
 2415 0d26 0C4B     		ldr	r3, .L152
 2416 0d28 DB68     		ldr	r3, [r3, #12]
 2417 0d2a 03F00403 		and	r3, r3, #4
 2418 0d2e 002B     		cmp	r3, #0
 2419 0d30 03D1     		bne	.L150
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2420              		.loc 1 1584 0
 2421 0d32 4FF00003 		mov	r3, #0
 2422 0d36 FB75     		strb	r3, [r7, #23]
 2423 0d38 02E0     		b	.L147
 2424              	.L150:
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2425              		.loc 1 1588 0
 2426 0d3a 4FF00103 		mov	r3, #1
 2427 0d3e FB75     		strb	r3, [r7, #23]
 2428              	.L147:
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2429              		.loc 1 1593 0
 2430 0d40 054B     		ldr	r3, .L152
 2431 0d42 4FF0FF02 		mov	r2, #255
 2432 0d46 5A62     		str	r2, [r3, #36]
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2433              		.loc 1 1595 0
 2434 0d48 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2435              		.loc 1 1596 0
 2436 0d4a 1846     		mov	r0, r3
 2437 0d4c 07F11C07 		add	r7, r7, #28
 2438 0d50 BD46     		mov	sp, r7
 2439 0d52 80BC     		pop	{r7}
 2440 0d54 7047     		bx	lr
 2441              	.L153:
 2442 0d56 00BF     		.align	2
 2443              	.L152:
 2444 0d58 00280040 		.word	1073752064
 2445              		.cfi_endproc
 2446              	.LFE135:
 2448              		.align	2
 2449              		.global	RTC_DayLightSavingConfig
 2450              		.thumb
 2451              		.thumb_func
 2453              	RTC_DayLightSavingConfig:
 2454              	.LFB136:
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2455              		.loc 1 1630 0
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 8
 2458              		@ frame_needed = 1, uses_anonymous_args = 0
 2459              		@ link register save eliminated.
 2460 0d5c 80B4     		push	{r7}
 2461              	.LCFI76:
 2462              		.cfi_def_cfa_offset 4
 2463              		.cfi_offset 7, -4
 2464 0d5e 83B0     		sub	sp, sp, #12
 2465              	.LCFI77:
 2466              		.cfi_def_cfa_offset 16
 2467 0d60 00AF     		add	r7, sp, #0
 2468              	.LCFI78:
 2469              		.cfi_def_cfa_register 7
 2470 0d62 7860     		str	r0, [r7, #4]
 2471 0d64 3960     		str	r1, [r7, #0]
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2472              		.loc 1 1636 0
 2473 0d66 0F4B     		ldr	r3, .L155
 2474 0d68 4FF0CA02 		mov	r2, #202
 2475 0d6c 5A62     		str	r2, [r3, #36]
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2476              		.loc 1 1637 0
 2477 0d6e 0D4B     		ldr	r3, .L155
 2478 0d70 4FF05302 		mov	r2, #83
 2479 0d74 5A62     		str	r2, [r3, #36]
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2480              		.loc 1 1640 0
 2481 0d76 0B4B     		ldr	r3, .L155
 2482 0d78 0A4A     		ldr	r2, .L155
 2483 0d7a 9268     		ldr	r2, [r2, #8]
 2484 0d7c 22F48022 		bic	r2, r2, #262144
 2485 0d80 9A60     		str	r2, [r3, #8]
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2486              		.loc 1 1643 0
 2487 0d82 084B     		ldr	r3, .L155
 2488 0d84 074A     		ldr	r2, .L155
 2489 0d86 9168     		ldr	r1, [r2, #8]
 2490 0d88 7868     		ldr	r0, [r7, #4]
 2491 0d8a 3A68     		ldr	r2, [r7, #0]
 2492 0d8c 0243     		orrs	r2, r2, r0
 2493 0d8e 0A43     		orrs	r2, r2, r1
 2494 0d90 9A60     		str	r2, [r3, #8]
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2495              		.loc 1 1646 0
 2496 0d92 044B     		ldr	r3, .L155
 2497 0d94 4FF0FF02 		mov	r2, #255
 2498 0d98 5A62     		str	r2, [r3, #36]
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2499              		.loc 1 1647 0
 2500 0d9a 07F10C07 		add	r7, r7, #12
 2501 0d9e BD46     		mov	sp, r7
 2502 0da0 80BC     		pop	{r7}
 2503 0da2 7047     		bx	lr
 2504              	.L156:
 2505              		.align	2
 2506              	.L155:
 2507 0da4 00280040 		.word	1073752064
 2508              		.cfi_endproc
 2509              	.LFE136:
 2511              		.align	2
 2512              		.global	RTC_GetStoreOperation
 2513              		.thumb
 2514              		.thumb_func
 2516              	RTC_GetStoreOperation:
 2517              	.LFB137:
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2518              		.loc 1 1657 0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 0
 2521              		@ frame_needed = 1, uses_anonymous_args = 0
 2522              		@ link register save eliminated.
 2523 0da8 80B4     		push	{r7}
 2524              	.LCFI79:
 2525              		.cfi_def_cfa_offset 4
 2526              		.cfi_offset 7, -4
 2527 0daa 00AF     		add	r7, sp, #0
 2528              	.LCFI80:
 2529              		.cfi_def_cfa_register 7
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2530              		.loc 1 1658 0
 2531 0dac 034B     		ldr	r3, .L159
 2532 0dae 9B68     		ldr	r3, [r3, #8]
 2533 0db0 03F48023 		and	r3, r3, #262144
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2534              		.loc 1 1659 0
 2535 0db4 1846     		mov	r0, r3
 2536 0db6 BD46     		mov	sp, r7
 2537 0db8 80BC     		pop	{r7}
 2538 0dba 7047     		bx	lr
 2539              	.L160:
 2540              		.align	2
 2541              	.L159:
 2542 0dbc 00280040 		.word	1073752064
 2543              		.cfi_endproc
 2544              	.LFE137:
 2546              		.align	2
 2547              		.global	RTC_OutputConfig
 2548              		.thumb
 2549              		.thumb_func
 2551              	RTC_OutputConfig:
 2552              	.LFB138:
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2553              		.loc 1 1696 0
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 8
 2556              		@ frame_needed = 1, uses_anonymous_args = 0
 2557              		@ link register save eliminated.
 2558 0dc0 80B4     		push	{r7}
 2559              	.LCFI81:
 2560              		.cfi_def_cfa_offset 4
 2561              		.cfi_offset 7, -4
 2562 0dc2 83B0     		sub	sp, sp, #12
 2563              	.LCFI82:
 2564              		.cfi_def_cfa_offset 16
 2565 0dc4 00AF     		add	r7, sp, #0
 2566              	.LCFI83:
 2567              		.cfi_def_cfa_register 7
 2568 0dc6 7860     		str	r0, [r7, #4]
 2569 0dc8 3960     		str	r1, [r7, #0]
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2570              		.loc 1 1702 0
 2571 0dca 0F4B     		ldr	r3, .L162
 2572 0dcc 4FF0CA02 		mov	r2, #202
 2573 0dd0 5A62     		str	r2, [r3, #36]
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2574              		.loc 1 1703 0
 2575 0dd2 0D4B     		ldr	r3, .L162
 2576 0dd4 4FF05302 		mov	r2, #83
 2577 0dd8 5A62     		str	r2, [r3, #36]
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2578              		.loc 1 1706 0
 2579 0dda 0B4B     		ldr	r3, .L162
 2580 0ddc 0A4A     		ldr	r2, .L162
 2581 0dde 9268     		ldr	r2, [r2, #8]
 2582 0de0 22F4E002 		bic	r2, r2, #7340032
 2583 0de4 9A60     		str	r2, [r3, #8]
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2584              		.loc 1 1709 0
 2585 0de6 084B     		ldr	r3, .L162
 2586 0de8 074A     		ldr	r2, .L162
 2587 0dea 9168     		ldr	r1, [r2, #8]
 2588 0dec 7868     		ldr	r0, [r7, #4]
 2589 0dee 3A68     		ldr	r2, [r7, #0]
 2590 0df0 0243     		orrs	r2, r2, r0
 2591 0df2 0A43     		orrs	r2, r2, r1
 2592 0df4 9A60     		str	r2, [r3, #8]
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2593              		.loc 1 1712 0
 2594 0df6 044B     		ldr	r3, .L162
 2595 0df8 4FF0FF02 		mov	r2, #255
 2596 0dfc 5A62     		str	r2, [r3, #36]
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2597              		.loc 1 1713 0
 2598 0dfe 07F10C07 		add	r7, r7, #12
 2599 0e02 BD46     		mov	sp, r7
 2600 0e04 80BC     		pop	{r7}
 2601 0e06 7047     		bx	lr
 2602              	.L163:
 2603              		.align	2
 2604              	.L162:
 2605 0e08 00280040 		.word	1073752064
 2606              		.cfi_endproc
 2607              	.LFE138:
 2609              		.align	2
 2610              		.global	RTC_CoarseCalibConfig
 2611              		.thumb
 2612              		.thumb_func
 2614              	RTC_CoarseCalibConfig:
 2615              	.LFB139:
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2616              		.loc 1 1750 0
 2617              		.cfi_startproc
 2618              		@ args = 0, pretend = 0, frame = 16
 2619              		@ frame_needed = 1, uses_anonymous_args = 0
 2620 0e0c 80B5     		push	{r7, lr}
 2621              	.LCFI84:
 2622              		.cfi_def_cfa_offset 8
 2623              		.cfi_offset 7, -8
 2624              		.cfi_offset 14, -4
 2625 0e0e 84B0     		sub	sp, sp, #16
 2626              	.LCFI85:
 2627              		.cfi_def_cfa_offset 24
 2628 0e10 00AF     		add	r7, sp, #0
 2629              	.LCFI86:
 2630              		.cfi_def_cfa_register 7
 2631 0e12 7860     		str	r0, [r7, #4]
 2632 0e14 3960     		str	r1, [r7, #0]
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2633              		.loc 1 1751 0
 2634 0e16 4FF00003 		mov	r3, #0
 2635 0e1a FB73     		strb	r3, [r7, #15]
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2636              		.loc 1 1758 0
 2637 0e1c 124B     		ldr	r3, .L168
 2638 0e1e 4FF0CA02 		mov	r2, #202
 2639 0e22 5A62     		str	r2, [r3, #36]
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2640              		.loc 1 1759 0
 2641 0e24 104B     		ldr	r3, .L168
 2642 0e26 4FF05302 		mov	r2, #83
 2643 0e2a 5A62     		str	r2, [r3, #36]
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2644              		.loc 1 1762 0
 2645 0e2c FFF7FEFF 		bl	RTC_EnterInitMode
 2646 0e30 0346     		mov	r3, r0
 2647 0e32 002B     		cmp	r3, #0
 2648 0e34 03D1     		bne	.L165
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2649              		.loc 1 1764 0
 2650 0e36 4FF00003 		mov	r3, #0
 2651 0e3a FB73     		strb	r3, [r7, #15]
 2652 0e3c 09E0     		b	.L166
 2653              	.L165:
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2654              		.loc 1 1769 0
 2655 0e3e 0A4B     		ldr	r3, .L168
 2656 0e40 7968     		ldr	r1, [r7, #4]
 2657 0e42 3A68     		ldr	r2, [r7, #0]
 2658 0e44 0A43     		orrs	r2, r2, r1
 2659 0e46 9A61     		str	r2, [r3, #24]
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2660              		.loc 1 1771 0
 2661 0e48 FFF7FEFF 		bl	RTC_ExitInitMode
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2662              		.loc 1 1773 0
 2663 0e4c 4FF00103 		mov	r3, #1
 2664 0e50 FB73     		strb	r3, [r7, #15]
 2665              	.L166:
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2666              		.loc 1 1777 0
 2667 0e52 054B     		ldr	r3, .L168
 2668 0e54 4FF0FF02 		mov	r2, #255
 2669 0e58 5A62     		str	r2, [r3, #36]
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2670              		.loc 1 1779 0
 2671 0e5a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2672              		.loc 1 1780 0
 2673 0e5c 1846     		mov	r0, r3
 2674 0e5e 07F11007 		add	r7, r7, #16
 2675 0e62 BD46     		mov	sp, r7
 2676 0e64 80BD     		pop	{r7, pc}
 2677              	.L169:
 2678 0e66 00BF     		.align	2
 2679              	.L168:
 2680 0e68 00280040 		.word	1073752064
 2681              		.cfi_endproc
 2682              	.LFE139:
 2684              		.align	2
 2685              		.global	RTC_CoarseCalibCmd
 2686              		.thumb
 2687              		.thumb_func
 2689              	RTC_CoarseCalibCmd:
 2690              	.LFB140:
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2691              		.loc 1 1791 0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 16
 2694              		@ frame_needed = 1, uses_anonymous_args = 0
 2695 0e6c 80B5     		push	{r7, lr}
 2696              	.LCFI87:
 2697              		.cfi_def_cfa_offset 8
 2698              		.cfi_offset 7, -8
 2699              		.cfi_offset 14, -4
 2700 0e6e 84B0     		sub	sp, sp, #16
 2701              	.LCFI88:
 2702              		.cfi_def_cfa_offset 24
 2703 0e70 00AF     		add	r7, sp, #0
 2704              	.LCFI89:
 2705              		.cfi_def_cfa_register 7
 2706 0e72 0346     		mov	r3, r0
 2707 0e74 FB71     		strb	r3, [r7, #7]
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2708              		.loc 1 1792 0
 2709 0e76 4FF00003 		mov	r3, #0
 2710 0e7a FB73     		strb	r3, [r7, #15]
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2711              		.loc 1 1798 0
 2712 0e7c 174B     		ldr	r3, .L176
 2713 0e7e 4FF0CA02 		mov	r2, #202
 2714 0e82 5A62     		str	r2, [r3, #36]
1799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2715              		.loc 1 1799 0
 2716 0e84 154B     		ldr	r3, .L176
 2717 0e86 4FF05302 		mov	r2, #83
 2718 0e8a 5A62     		str	r2, [r3, #36]
1800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2719              		.loc 1 1802 0
 2720 0e8c FFF7FEFF 		bl	RTC_EnterInitMode
 2721 0e90 0346     		mov	r3, r0
 2722 0e92 002B     		cmp	r3, #0
 2723 0e94 03D1     		bne	.L171
1803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2724              		.loc 1 1804 0
 2725 0e96 4FF00003 		mov	r3, #0
 2726 0e9a FB73     		strb	r3, [r7, #15]
 2727 0e9c 14E0     		b	.L172
 2728              	.L171:
1805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2729              		.loc 1 1808 0
 2730 0e9e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2731 0ea0 002B     		cmp	r3, #0
 2732 0ea2 06D0     		beq	.L173
1809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2733              		.loc 1 1811 0
 2734 0ea4 0D4B     		ldr	r3, .L176
 2735 0ea6 0D4A     		ldr	r2, .L176
 2736 0ea8 9268     		ldr	r2, [r2, #8]
 2737 0eaa 42F08002 		orr	r2, r2, #128
 2738 0eae 9A60     		str	r2, [r3, #8]
 2739 0eb0 05E0     		b	.L174
 2740              	.L173:
1812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2741              		.loc 1 1816 0
 2742 0eb2 0A4B     		ldr	r3, .L176
 2743 0eb4 094A     		ldr	r2, .L176
 2744 0eb6 9268     		ldr	r2, [r2, #8]
 2745 0eb8 22F08002 		bic	r2, r2, #128
 2746 0ebc 9A60     		str	r2, [r3, #8]
 2747              	.L174:
1817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2748              		.loc 1 1819 0
 2749 0ebe FFF7FEFF 		bl	RTC_ExitInitMode
1820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2750              		.loc 1 1821 0
 2751 0ec2 4FF00103 		mov	r3, #1
 2752 0ec6 FB73     		strb	r3, [r7, #15]
 2753              	.L172:
1822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2754              		.loc 1 1825 0
 2755 0ec8 044B     		ldr	r3, .L176
 2756 0eca 4FF0FF02 		mov	r2, #255
 2757 0ece 5A62     		str	r2, [r3, #36]
1826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2758              		.loc 1 1827 0
 2759 0ed0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2760              		.loc 1 1828 0
 2761 0ed2 1846     		mov	r0, r3
 2762 0ed4 07F11007 		add	r7, r7, #16
 2763 0ed8 BD46     		mov	sp, r7
 2764 0eda 80BD     		pop	{r7, pc}
 2765              	.L177:
 2766              		.align	2
 2767              	.L176:
 2768 0edc 00280040 		.word	1073752064
 2769              		.cfi_endproc
 2770              	.LFE140:
 2772              		.align	2
 2773              		.global	RTC_CalibOutputCmd
 2774              		.thumb
 2775              		.thumb_func
 2777              	RTC_CalibOutputCmd:
 2778              	.LFB141:
1829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2779              		.loc 1 1837 0
 2780              		.cfi_startproc
 2781              		@ args = 0, pretend = 0, frame = 8
 2782              		@ frame_needed = 1, uses_anonymous_args = 0
 2783              		@ link register save eliminated.
 2784 0ee0 80B4     		push	{r7}
 2785              	.LCFI90:
 2786              		.cfi_def_cfa_offset 4
 2787              		.cfi_offset 7, -4
 2788 0ee2 83B0     		sub	sp, sp, #12
 2789              	.LCFI91:
 2790              		.cfi_def_cfa_offset 16
 2791 0ee4 00AF     		add	r7, sp, #0
 2792              	.LCFI92:
 2793              		.cfi_def_cfa_register 7
 2794 0ee6 0346     		mov	r3, r0
 2795 0ee8 FB71     		strb	r3, [r7, #7]
1838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2796              		.loc 1 1842 0
 2797 0eea 104B     		ldr	r3, .L181
 2798 0eec 4FF0CA02 		mov	r2, #202
 2799 0ef0 5A62     		str	r2, [r3, #36]
1843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2800              		.loc 1 1843 0
 2801 0ef2 0E4B     		ldr	r3, .L181
 2802 0ef4 4FF05302 		mov	r2, #83
 2803 0ef8 5A62     		str	r2, [r3, #36]
1844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2804              		.loc 1 1845 0
 2805 0efa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2806 0efc 002B     		cmp	r3, #0
 2807 0efe 06D0     		beq	.L179
1846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2808              		.loc 1 1848 0
 2809 0f00 0A4B     		ldr	r3, .L181
 2810 0f02 0A4A     		ldr	r2, .L181
 2811 0f04 9268     		ldr	r2, [r2, #8]
 2812 0f06 42F40002 		orr	r2, r2, #8388608
 2813 0f0a 9A60     		str	r2, [r3, #8]
 2814 0f0c 05E0     		b	.L180
 2815              	.L179:
1849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2816              		.loc 1 1853 0
 2817 0f0e 074B     		ldr	r3, .L181
 2818 0f10 064A     		ldr	r2, .L181
 2819 0f12 9268     		ldr	r2, [r2, #8]
 2820 0f14 22F40002 		bic	r2, r2, #8388608
 2821 0f18 9A60     		str	r2, [r3, #8]
 2822              	.L180:
1854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2823              		.loc 1 1857 0
 2824 0f1a 044B     		ldr	r3, .L181
 2825 0f1c 4FF0FF02 		mov	r2, #255
 2826 0f20 5A62     		str	r2, [r3, #36]
1858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2827              		.loc 1 1858 0
 2828 0f22 07F10C07 		add	r7, r7, #12
 2829 0f26 BD46     		mov	sp, r7
 2830 0f28 80BC     		pop	{r7}
 2831 0f2a 7047     		bx	lr
 2832              	.L182:
 2833              		.align	2
 2834              	.L181:
 2835 0f2c 00280040 		.word	1073752064
 2836              		.cfi_endproc
 2837              	.LFE141:
 2839              		.align	2
 2840              		.global	RTC_CalibOutputConfig
 2841              		.thumb
 2842              		.thumb_func
 2844              	RTC_CalibOutputConfig:
 2845              	.LFB142:
1859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2846              		.loc 1 1869 0
 2847              		.cfi_startproc
 2848              		@ args = 0, pretend = 0, frame = 8
 2849              		@ frame_needed = 1, uses_anonymous_args = 0
 2850              		@ link register save eliminated.
 2851 0f30 80B4     		push	{r7}
 2852              	.LCFI93:
 2853              		.cfi_def_cfa_offset 4
 2854              		.cfi_offset 7, -4
 2855 0f32 83B0     		sub	sp, sp, #12
 2856              	.LCFI94:
 2857              		.cfi_def_cfa_offset 16
 2858 0f34 00AF     		add	r7, sp, #0
 2859              	.LCFI95:
 2860              		.cfi_def_cfa_register 7
 2861 0f36 7860     		str	r0, [r7, #4]
1870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2862              		.loc 1 1874 0
 2863 0f38 0E4B     		ldr	r3, .L184
 2864 0f3a 4FF0CA02 		mov	r2, #202
 2865 0f3e 5A62     		str	r2, [r3, #36]
1875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2866              		.loc 1 1875 0
 2867 0f40 0C4B     		ldr	r3, .L184
 2868 0f42 4FF05302 		mov	r2, #83
 2869 0f46 5A62     		str	r2, [r3, #36]
1876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2870              		.loc 1 1878 0
 2871 0f48 0A4B     		ldr	r3, .L184
 2872 0f4a 0A4A     		ldr	r2, .L184
 2873 0f4c 9268     		ldr	r2, [r2, #8]
 2874 0f4e 22F40022 		bic	r2, r2, #524288
 2875 0f52 9A60     		str	r2, [r3, #8]
1879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2876              		.loc 1 1881 0
 2877 0f54 074B     		ldr	r3, .L184
 2878 0f56 074A     		ldr	r2, .L184
 2879 0f58 9168     		ldr	r1, [r2, #8]
 2880 0f5a 7A68     		ldr	r2, [r7, #4]
 2881 0f5c 0A43     		orrs	r2, r2, r1
 2882 0f5e 9A60     		str	r2, [r3, #8]
1882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2883              		.loc 1 1884 0
 2884 0f60 044B     		ldr	r3, .L184
 2885 0f62 4FF0FF02 		mov	r2, #255
 2886 0f66 5A62     		str	r2, [r3, #36]
1885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2887              		.loc 1 1885 0
 2888 0f68 07F10C07 		add	r7, r7, #12
 2889 0f6c BD46     		mov	sp, r7
 2890 0f6e 80BC     		pop	{r7}
 2891 0f70 7047     		bx	lr
 2892              	.L185:
 2893 0f72 00BF     		.align	2
 2894              	.L184:
 2895 0f74 00280040 		.word	1073752064
 2896              		.cfi_endproc
 2897              	.LFE142:
 2899              		.align	2
 2900              		.global	RTC_SmoothCalibConfig
 2901              		.thumb
 2902              		.thumb_func
 2904              	RTC_SmoothCalibConfig:
 2905              	.LFB143:
1886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2906              		.loc 1 1907 0
 2907              		.cfi_startproc
 2908              		@ args = 0, pretend = 0, frame = 24
 2909              		@ frame_needed = 1, uses_anonymous_args = 0
 2910              		@ link register save eliminated.
 2911 0f78 80B4     		push	{r7}
 2912              	.LCFI96:
 2913              		.cfi_def_cfa_offset 4
 2914              		.cfi_offset 7, -4
 2915 0f7a 87B0     		sub	sp, sp, #28
 2916              	.LCFI97:
 2917              		.cfi_def_cfa_offset 32
 2918 0f7c 00AF     		add	r7, sp, #0
 2919              	.LCFI98:
 2920              		.cfi_def_cfa_register 7
 2921 0f7e F860     		str	r0, [r7, #12]
 2922 0f80 B960     		str	r1, [r7, #8]
 2923 0f82 7A60     		str	r2, [r7, #4]
1908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2924              		.loc 1 1908 0
 2925 0f84 4FF00003 		mov	r3, #0
 2926 0f88 FB75     		strb	r3, [r7, #23]
1909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2927              		.loc 1 1909 0
 2928 0f8a 4FF00003 		mov	r3, #0
 2929 0f8e 3B61     		str	r3, [r7, #16]
1910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2930              		.loc 1 1917 0
 2931 0f90 1D4B     		ldr	r3, .L193
 2932 0f92 4FF0CA02 		mov	r2, #202
 2933 0f96 5A62     		str	r2, [r3, #36]
1918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2934              		.loc 1 1918 0
 2935 0f98 1B4B     		ldr	r3, .L193
 2936 0f9a 4FF05302 		mov	r2, #83
 2937 0f9e 5A62     		str	r2, [r3, #36]
1919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2938              		.loc 1 1921 0
 2939 0fa0 194B     		ldr	r3, .L193
 2940 0fa2 DB68     		ldr	r3, [r3, #12]
 2941 0fa4 03F48033 		and	r3, r3, #65536
 2942 0fa8 002B     		cmp	r3, #0
 2943 0faa 0ED0     		beq	.L187
1922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2944              		.loc 1 1924 0
 2945 0fac 03E0     		b	.L188
 2946              	.L189:
1925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2947              		.loc 1 1926 0
 2948 0fae 3B69     		ldr	r3, [r7, #16]
 2949 0fb0 03F10103 		add	r3, r3, #1
 2950 0fb4 3B61     		str	r3, [r7, #16]
 2951              	.L188:
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2952              		.loc 1 1924 0 discriminator 1
 2953 0fb6 144B     		ldr	r3, .L193
 2954 0fb8 DB68     		ldr	r3, [r3, #12]
 2955 0fba 03F48033 		and	r3, r3, #65536
 2956 0fbe 002B     		cmp	r3, #0
 2957 0fc0 03D0     		beq	.L187
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2958              		.loc 1 1924 0 is_stmt 0 discriminator 2
 2959 0fc2 3B69     		ldr	r3, [r7, #16]
 2960 0fc4 B3F5003F 		cmp	r3, #131072
 2961 0fc8 F1D1     		bne	.L189
 2962              	.L187:
1927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2963              		.loc 1 1931 0 is_stmt 1
 2964 0fca 0F4B     		ldr	r3, .L193
 2965 0fcc DB68     		ldr	r3, [r3, #12]
 2966 0fce 03F48033 		and	r3, r3, #65536
 2967 0fd2 002B     		cmp	r3, #0
 2968 0fd4 0AD1     		bne	.L190
1932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2969              		.loc 1 1934 0
 2970 0fd6 0C4B     		ldr	r3, .L193
 2971 0fd8 F968     		ldr	r1, [r7, #12]
 2972 0fda BA68     		ldr	r2, [r7, #8]
 2973 0fdc 1143     		orrs	r1, r1, r2
 2974 0fde 7A68     		ldr	r2, [r7, #4]
 2975 0fe0 0A43     		orrs	r2, r2, r1
 2976 0fe2 DA63     		str	r2, [r3, #60]
1935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2977              		.loc 1 1936 0
 2978 0fe4 4FF00103 		mov	r3, #1
 2979 0fe8 FB75     		strb	r3, [r7, #23]
 2980 0fea 02E0     		b	.L191
 2981              	.L190:
1937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2982              		.loc 1 1940 0
 2983 0fec 4FF00003 		mov	r3, #0
 2984 0ff0 FB75     		strb	r3, [r7, #23]
 2985              	.L191:
1941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2986              		.loc 1 1944 0
 2987 0ff2 054B     		ldr	r3, .L193
 2988 0ff4 4FF0FF02 		mov	r2, #255
 2989 0ff8 5A62     		str	r2, [r3, #36]
1945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 2990              		.loc 1 1946 0
 2991 0ffa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2992              		.loc 1 1947 0
 2993 0ffc 1846     		mov	r0, r3
 2994 0ffe 07F11C07 		add	r7, r7, #28
 2995 1002 BD46     		mov	sp, r7
 2996 1004 80BC     		pop	{r7}
 2997 1006 7047     		bx	lr
 2998              	.L194:
 2999              		.align	2
 3000              	.L193:
 3001 1008 00280040 		.word	1073752064
 3002              		.cfi_endproc
 3003              	.LFE143:
 3005              		.align	2
 3006              		.global	RTC_TimeStampCmd
 3007              		.thumb
 3008              		.thumb_func
 3010              	RTC_TimeStampCmd:
 3011              	.LFB144:
1948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3012              		.loc 1 1981 0
 3013              		.cfi_startproc
 3014              		@ args = 0, pretend = 0, frame = 16
 3015              		@ frame_needed = 1, uses_anonymous_args = 0
 3016              		@ link register save eliminated.
 3017 100c 80B4     		push	{r7}
 3018              	.LCFI99:
 3019              		.cfi_def_cfa_offset 4
 3020              		.cfi_offset 7, -4
 3021 100e 85B0     		sub	sp, sp, #20
 3022              	.LCFI100:
 3023              		.cfi_def_cfa_offset 24
 3024 1010 00AF     		add	r7, sp, #0
 3025              	.LCFI101:
 3026              		.cfi_def_cfa_register 7
 3027 1012 7860     		str	r0, [r7, #4]
 3028 1014 0B46     		mov	r3, r1
 3029 1016 FB70     		strb	r3, [r7, #3]
1982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3030              		.loc 1 1982 0
 3031 1018 4FF00003 		mov	r3, #0
 3032 101c FB60     		str	r3, [r7, #12]
1983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3033              		.loc 1 1989 0
 3034 101e 144B     		ldr	r3, .L198
 3035 1020 9B68     		ldr	r3, [r3, #8]
 3036 1022 23F40063 		bic	r3, r3, #2048
 3037 1026 23F00803 		bic	r3, r3, #8
 3038 102a FB60     		str	r3, [r7, #12]
1990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3039              		.loc 1 1992 0
 3040 102c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3041 102e 002B     		cmp	r3, #0
 3042 1030 06D0     		beq	.L196
1993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3043              		.loc 1 1994 0
 3044 1032 7A68     		ldr	r2, [r7, #4]
 3045 1034 FB68     		ldr	r3, [r7, #12]
 3046 1036 1343     		orrs	r3, r3, r2
 3047 1038 43F40063 		orr	r3, r3, #2048
 3048 103c FB60     		str	r3, [r7, #12]
 3049 103e 03E0     		b	.L197
 3050              	.L196:
1995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3051              		.loc 1 1998 0
 3052 1040 FA68     		ldr	r2, [r7, #12]
 3053 1042 7B68     		ldr	r3, [r7, #4]
 3054 1044 1343     		orrs	r3, r3, r2
 3055 1046 FB60     		str	r3, [r7, #12]
 3056              	.L197:
1999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3057              		.loc 1 2002 0
 3058 1048 094B     		ldr	r3, .L198
 3059 104a 4FF0CA02 		mov	r2, #202
 3060 104e 5A62     		str	r2, [r3, #36]
2003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3061              		.loc 1 2003 0
 3062 1050 074B     		ldr	r3, .L198
 3063 1052 4FF05302 		mov	r2, #83
 3064 1056 5A62     		str	r2, [r3, #36]
2004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3065              		.loc 1 2006 0
 3066 1058 054B     		ldr	r3, .L198
 3067 105a FA68     		ldr	r2, [r7, #12]
 3068 105c 9A60     		str	r2, [r3, #8]
2007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3069              		.loc 1 2009 0
 3070 105e 044B     		ldr	r3, .L198
 3071 1060 4FF0FF02 		mov	r2, #255
 3072 1064 5A62     		str	r2, [r3, #36]
2010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3073              		.loc 1 2010 0
 3074 1066 07F11407 		add	r7, r7, #20
 3075 106a BD46     		mov	sp, r7
 3076 106c 80BC     		pop	{r7}
 3077 106e 7047     		bx	lr
 3078              	.L199:
 3079              		.align	2
 3080              	.L198:
 3081 1070 00280040 		.word	1073752064
 3082              		.cfi_endproc
 3083              	.LFE144:
 3085              		.align	2
 3086              		.global	RTC_GetTimeStamp
 3087              		.thumb
 3088              		.thumb_func
 3090              	RTC_GetTimeStamp:
 3091              	.LFB145:
2011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3092              		.loc 1 2026 0
 3093              		.cfi_startproc
 3094              		@ args = 0, pretend = 0, frame = 24
 3095              		@ frame_needed = 1, uses_anonymous_args = 0
 3096 1074 80B5     		push	{r7, lr}
 3097              	.LCFI102:
 3098              		.cfi_def_cfa_offset 8
 3099              		.cfi_offset 7, -8
 3100              		.cfi_offset 14, -4
 3101 1076 86B0     		sub	sp, sp, #24
 3102              	.LCFI103:
 3103              		.cfi_def_cfa_offset 32
 3104 1078 00AF     		add	r7, sp, #0
 3105              	.LCFI104:
 3106              		.cfi_def_cfa_register 7
 3107 107a F860     		str	r0, [r7, #12]
 3108 107c B960     		str	r1, [r7, #8]
 3109 107e 7A60     		str	r2, [r7, #4]
2027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3110              		.loc 1 2027 0
 3111 1080 4FF00003 		mov	r3, #0
 3112 1084 7B61     		str	r3, [r7, #20]
 3113 1086 4FF00003 		mov	r3, #0
 3114 108a 3B61     		str	r3, [r7, #16]
2028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3115              		.loc 1 2033 0
 3116 108c 424B     		ldr	r3, .L202
 3117 108e 1B6B     		ldr	r3, [r3, #48]
 3118 1090 03F07F33 		and	r3, r3, #2139062143
 3119 1094 23F0FE43 		bic	r3, r3, #2130706432
 3120 1098 7B61     		str	r3, [r7, #20]
2034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3121              		.loc 1 2034 0
 3122 109a 3F4B     		ldr	r3, .L202
 3123 109c 5B6B     		ldr	r3, [r3, #52]
 3124 109e 23F07F43 		bic	r3, r3, #-16777216
 3125 10a2 23F0C003 		bic	r3, r3, #192
 3126 10a6 3B61     		str	r3, [r7, #16]
2035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3127              		.loc 1 2037 0
 3128 10a8 7B69     		ldr	r3, [r7, #20]
 3129 10aa 03F47C13 		and	r3, r3, #4128768
 3130 10ae 4FEA1343 		lsr	r3, r3, #16
 3131 10b2 DAB2     		uxtb	r2, r3
 3132 10b4 BB68     		ldr	r3, [r7, #8]
 3133 10b6 1A70     		strb	r2, [r3, #0]
2038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3134              		.loc 1 2038 0
 3135 10b8 7B69     		ldr	r3, [r7, #20]
 3136 10ba 03F4FE43 		and	r3, r3, #32512
 3137 10be 4FEA1323 		lsr	r3, r3, #8
 3138 10c2 DAB2     		uxtb	r2, r3
 3139 10c4 BB68     		ldr	r3, [r7, #8]
 3140 10c6 5A70     		strb	r2, [r3, #1]
2039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3141              		.loc 1 2039 0
 3142 10c8 7B69     		ldr	r3, [r7, #20]
 3143 10ca DBB2     		uxtb	r3, r3
 3144 10cc 03F07F03 		and	r3, r3, #127
 3145 10d0 DAB2     		uxtb	r2, r3
 3146 10d2 BB68     		ldr	r3, [r7, #8]
 3147 10d4 9A70     		strb	r2, [r3, #2]
2040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3148              		.loc 1 2040 0
 3149 10d6 7B69     		ldr	r3, [r7, #20]
 3150 10d8 03F48003 		and	r3, r3, #4194304
 3151 10dc 4FEA1343 		lsr	r3, r3, #16
 3152 10e0 DAB2     		uxtb	r2, r3
 3153 10e2 BB68     		ldr	r3, [r7, #8]
 3154 10e4 DA70     		strb	r2, [r3, #3]
2041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3155              		.loc 1 2043 0
 3156 10e6 7B68     		ldr	r3, [r7, #4]
 3157 10e8 4FF00002 		mov	r2, #0
 3158 10ec DA70     		strb	r2, [r3, #3]
2044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3159              		.loc 1 2044 0
 3160 10ee 3B69     		ldr	r3, [r7, #16]
 3161 10f0 03F4F853 		and	r3, r3, #7936
 3162 10f4 4FEA1323 		lsr	r3, r3, #8
 3163 10f8 DAB2     		uxtb	r2, r3
 3164 10fa 7B68     		ldr	r3, [r7, #4]
 3165 10fc 5A70     		strb	r2, [r3, #1]
2045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3166              		.loc 1 2045 0
 3167 10fe 3B69     		ldr	r3, [r7, #16]
 3168 1100 DBB2     		uxtb	r3, r3
 3169 1102 03F03F03 		and	r3, r3, #63
 3170 1106 DAB2     		uxtb	r2, r3
 3171 1108 7B68     		ldr	r3, [r7, #4]
 3172 110a 9A70     		strb	r2, [r3, #2]
2046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3173              		.loc 1 2046 0
 3174 110c 3B69     		ldr	r3, [r7, #16]
 3175 110e 03F46043 		and	r3, r3, #57344
 3176 1112 4FEA5333 		lsr	r3, r3, #13
 3177 1116 DAB2     		uxtb	r2, r3
 3178 1118 7B68     		ldr	r3, [r7, #4]
 3179 111a 1A70     		strb	r2, [r3, #0]
2047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3180              		.loc 1 2049 0
 3181 111c FB68     		ldr	r3, [r7, #12]
 3182 111e 002B     		cmp	r3, #0
 3183 1120 35D1     		bne	.L200
2050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3184              		.loc 1 2052 0
 3185 1122 BB68     		ldr	r3, [r7, #8]
 3186 1124 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3187 1126 1846     		mov	r0, r3
 3188 1128 00F0E0FA 		bl	RTC_Bcd2ToByte
 3189 112c 0346     		mov	r3, r0
 3190 112e 1A46     		mov	r2, r3
 3191 1130 BB68     		ldr	r3, [r7, #8]
 3192 1132 1A70     		strb	r2, [r3, #0]
2053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3193              		.loc 1 2053 0
 3194 1134 BB68     		ldr	r3, [r7, #8]
 3195 1136 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3196 1138 1846     		mov	r0, r3
 3197 113a 00F0D7FA 		bl	RTC_Bcd2ToByte
 3198 113e 0346     		mov	r3, r0
 3199 1140 1A46     		mov	r2, r3
 3200 1142 BB68     		ldr	r3, [r7, #8]
 3201 1144 5A70     		strb	r2, [r3, #1]
2054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3202              		.loc 1 2054 0
 3203 1146 BB68     		ldr	r3, [r7, #8]
 3204 1148 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3205 114a 1846     		mov	r0, r3
 3206 114c 00F0CEFA 		bl	RTC_Bcd2ToByte
 3207 1150 0346     		mov	r3, r0
 3208 1152 1A46     		mov	r2, r3
 3209 1154 BB68     		ldr	r3, [r7, #8]
 3210 1156 9A70     		strb	r2, [r3, #2]
2055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3211              		.loc 1 2057 0
 3212 1158 7B68     		ldr	r3, [r7, #4]
 3213 115a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3214 115c 1846     		mov	r0, r3
 3215 115e 00F0C5FA 		bl	RTC_Bcd2ToByte
 3216 1162 0346     		mov	r3, r0
 3217 1164 1A46     		mov	r2, r3
 3218 1166 7B68     		ldr	r3, [r7, #4]
 3219 1168 5A70     		strb	r2, [r3, #1]
2058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3220              		.loc 1 2058 0
 3221 116a 7B68     		ldr	r3, [r7, #4]
 3222 116c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3223 116e 1846     		mov	r0, r3
 3224 1170 00F0BCFA 		bl	RTC_Bcd2ToByte
 3225 1174 0346     		mov	r3, r0
 3226 1176 1A46     		mov	r2, r3
 3227 1178 7B68     		ldr	r3, [r7, #4]
 3228 117a 9A70     		strb	r2, [r3, #2]
2059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3229              		.loc 1 2059 0
 3230 117c 7B68     		ldr	r3, [r7, #4]
 3231 117e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3232 1180 1846     		mov	r0, r3
 3233 1182 00F0B3FA 		bl	RTC_Bcd2ToByte
 3234 1186 0346     		mov	r3, r0
 3235 1188 1A46     		mov	r2, r3
 3236 118a 7B68     		ldr	r3, [r7, #4]
 3237 118c 1A70     		strb	r2, [r3, #0]
 3238              	.L200:
2060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3239              		.loc 1 2061 0
 3240 118e 07F11807 		add	r7, r7, #24
 3241 1192 BD46     		mov	sp, r7
 3242 1194 80BD     		pop	{r7, pc}
 3243              	.L203:
 3244 1196 00BF     		.align	2
 3245              	.L202:
 3246 1198 00280040 		.word	1073752064
 3247              		.cfi_endproc
 3248              	.LFE145:
 3250              		.align	2
 3251              		.global	RTC_GetTimeStampSubSecond
 3252              		.thumb
 3253              		.thumb_func
 3255              	RTC_GetTimeStampSubSecond:
 3256              	.LFB146:
2062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3257              		.loc 1 2069 0
 3258              		.cfi_startproc
 3259              		@ args = 0, pretend = 0, frame = 0
 3260              		@ frame_needed = 1, uses_anonymous_args = 0
 3261              		@ link register save eliminated.
 3262 119c 80B4     		push	{r7}
 3263              	.LCFI105:
 3264              		.cfi_def_cfa_offset 4
 3265              		.cfi_offset 7, -4
 3266 119e 00AF     		add	r7, sp, #0
 3267              	.LCFI106:
 3268              		.cfi_def_cfa_register 7
2070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3269              		.loc 1 2071 0
 3270 11a0 024B     		ldr	r3, .L206
 3271 11a2 9B6B     		ldr	r3, [r3, #56]
2072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3272              		.loc 1 2072 0
 3273 11a4 1846     		mov	r0, r3
 3274 11a6 BD46     		mov	sp, r7
 3275 11a8 80BC     		pop	{r7}
 3276 11aa 7047     		bx	lr
 3277              	.L207:
 3278              		.align	2
 3279              	.L206:
 3280 11ac 00280040 		.word	1073752064
 3281              		.cfi_endproc
 3282              	.LFE146:
 3284              		.align	2
 3285              		.global	RTC_TamperTriggerConfig
 3286              		.thumb
 3287              		.thumb_func
 3289              	RTC_TamperTriggerConfig:
 3290              	.LFB147:
2073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3291              		.loc 1 2104 0
 3292              		.cfi_startproc
 3293              		@ args = 0, pretend = 0, frame = 8
 3294              		@ frame_needed = 1, uses_anonymous_args = 0
 3295              		@ link register save eliminated.
 3296 11b0 80B4     		push	{r7}
 3297              	.LCFI107:
 3298              		.cfi_def_cfa_offset 4
 3299              		.cfi_offset 7, -4
 3300 11b2 83B0     		sub	sp, sp, #12
 3301              	.LCFI108:
 3302              		.cfi_def_cfa_offset 16
 3303 11b4 00AF     		add	r7, sp, #0
 3304              	.LCFI109:
 3305              		.cfi_def_cfa_register 7
 3306 11b6 7860     		str	r0, [r7, #4]
 3307 11b8 3960     		str	r1, [r7, #0]
2105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3308              		.loc 1 2109 0
 3309 11ba 3B68     		ldr	r3, [r7, #0]
 3310 11bc 002B     		cmp	r3, #0
 3311 11be 0AD1     		bne	.L209
2110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3312              		.loc 1 2112 0
 3313 11c0 0B4B     		ldr	r3, .L211
 3314 11c2 0B4A     		ldr	r2, .L211
 3315 11c4 116C     		ldr	r1, [r2, #64]
 3316 11c6 7A68     		ldr	r2, [r7, #4]
 3317 11c8 4FEA4202 		lsl	r2, r2, #1
 3318 11cc 6FEA0202 		mvn	r2, r2
 3319 11d0 0A40     		ands	r2, r2, r1
 3320 11d2 1A64     		str	r2, [r3, #64]
 3321 11d4 07E0     		b	.L208
 3322              	.L209:
2113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3323              		.loc 1 2117 0
 3324 11d6 064B     		ldr	r3, .L211
 3325 11d8 054A     		ldr	r2, .L211
 3326 11da 116C     		ldr	r1, [r2, #64]
 3327 11dc 7A68     		ldr	r2, [r7, #4]
 3328 11de 4FEA4202 		lsl	r2, r2, #1
 3329 11e2 0A43     		orrs	r2, r2, r1
 3330 11e4 1A64     		str	r2, [r3, #64]
 3331              	.L208:
2118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3332              		.loc 1 2119 0
 3333 11e6 07F10C07 		add	r7, r7, #12
 3334 11ea BD46     		mov	sp, r7
 3335 11ec 80BC     		pop	{r7}
 3336 11ee 7047     		bx	lr
 3337              	.L212:
 3338              		.align	2
 3339              	.L211:
 3340 11f0 00280040 		.word	1073752064
 3341              		.cfi_endproc
 3342              	.LFE147:
 3344              		.align	2
 3345              		.global	RTC_TamperCmd
 3346              		.thumb
 3347              		.thumb_func
 3349              	RTC_TamperCmd:
 3350              	.LFB148:
2120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3351              		.loc 1 2130 0
 3352              		.cfi_startproc
 3353              		@ args = 0, pretend = 0, frame = 8
 3354              		@ frame_needed = 1, uses_anonymous_args = 0
 3355              		@ link register save eliminated.
 3356 11f4 80B4     		push	{r7}
 3357              	.LCFI110:
 3358              		.cfi_def_cfa_offset 4
 3359              		.cfi_offset 7, -4
 3360 11f6 83B0     		sub	sp, sp, #12
 3361              	.LCFI111:
 3362              		.cfi_def_cfa_offset 16
 3363 11f8 00AF     		add	r7, sp, #0
 3364              	.LCFI112:
 3365              		.cfi_def_cfa_register 7
 3366 11fa 7860     		str	r0, [r7, #4]
 3367 11fc 0B46     		mov	r3, r1
 3368 11fe FB70     		strb	r3, [r7, #3]
2131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3369              		.loc 1 2135 0
 3370 1200 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3371 1202 002B     		cmp	r3, #0
 3372 1204 06D0     		beq	.L214
2136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3373              		.loc 1 2138 0
 3374 1206 0A4B     		ldr	r3, .L216
 3375 1208 094A     		ldr	r2, .L216
 3376 120a 116C     		ldr	r1, [r2, #64]
 3377 120c 7A68     		ldr	r2, [r7, #4]
 3378 120e 0A43     		orrs	r2, r2, r1
 3379 1210 1A64     		str	r2, [r3, #64]
 3380 1212 07E0     		b	.L213
 3381              	.L214:
2139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3382              		.loc 1 2143 0
 3383 1214 064B     		ldr	r3, .L216
 3384 1216 064A     		ldr	r2, .L216
 3385 1218 116C     		ldr	r1, [r2, #64]
 3386 121a 7A68     		ldr	r2, [r7, #4]
 3387 121c 6FEA0202 		mvn	r2, r2
 3388 1220 0A40     		ands	r2, r2, r1
 3389 1222 1A64     		str	r2, [r3, #64]
 3390              	.L213:
2144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3391              		.loc 1 2145 0
 3392 1224 07F10C07 		add	r7, r7, #12
 3393 1228 BD46     		mov	sp, r7
 3394 122a 80BC     		pop	{r7}
 3395 122c 7047     		bx	lr
 3396              	.L217:
 3397 122e 00BF     		.align	2
 3398              	.L216:
 3399 1230 00280040 		.word	1073752064
 3400              		.cfi_endproc
 3401              	.LFE148:
 3403              		.align	2
 3404              		.global	RTC_TamperFilterConfig
 3405              		.thumb
 3406              		.thumb_func
 3408              	RTC_TamperFilterConfig:
 3409              	.LFB149:
2146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3410              		.loc 1 2161 0
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 8
 3413              		@ frame_needed = 1, uses_anonymous_args = 0
 3414              		@ link register save eliminated.
 3415 1234 80B4     		push	{r7}
 3416              	.LCFI113:
 3417              		.cfi_def_cfa_offset 4
 3418              		.cfi_offset 7, -4
 3419 1236 83B0     		sub	sp, sp, #12
 3420              	.LCFI114:
 3421              		.cfi_def_cfa_offset 16
 3422 1238 00AF     		add	r7, sp, #0
 3423              	.LCFI115:
 3424              		.cfi_def_cfa_register 7
 3425 123a 7860     		str	r0, [r7, #4]
2162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3426              		.loc 1 2166 0
 3427 123c 084B     		ldr	r3, .L219
 3428 123e 084A     		ldr	r2, .L219
 3429 1240 126C     		ldr	r2, [r2, #64]
 3430 1242 22F4C052 		bic	r2, r2, #6144
 3431 1246 1A64     		str	r2, [r3, #64]
2167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3432              		.loc 1 2169 0
 3433 1248 054B     		ldr	r3, .L219
 3434 124a 054A     		ldr	r2, .L219
 3435 124c 116C     		ldr	r1, [r2, #64]
 3436 124e 7A68     		ldr	r2, [r7, #4]
 3437 1250 0A43     		orrs	r2, r2, r1
 3438 1252 1A64     		str	r2, [r3, #64]
2170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3439              		.loc 1 2170 0
 3440 1254 07F10C07 		add	r7, r7, #12
 3441 1258 BD46     		mov	sp, r7
 3442 125a 80BC     		pop	{r7}
 3443 125c 7047     		bx	lr
 3444              	.L220:
 3445 125e 00BF     		.align	2
 3446              	.L219:
 3447 1260 00280040 		.word	1073752064
 3448              		.cfi_endproc
 3449              	.LFE149:
 3451              		.align	2
 3452              		.global	RTC_TamperSamplingFreqConfig
 3453              		.thumb
 3454              		.thumb_func
 3456              	RTC_TamperSamplingFreqConfig:
 3457              	.LFB150:
2171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3458              		.loc 1 2195 0
 3459              		.cfi_startproc
 3460              		@ args = 0, pretend = 0, frame = 8
 3461              		@ frame_needed = 1, uses_anonymous_args = 0
 3462              		@ link register save eliminated.
 3463 1264 80B4     		push	{r7}
 3464              	.LCFI116:
 3465              		.cfi_def_cfa_offset 4
 3466              		.cfi_offset 7, -4
 3467 1266 83B0     		sub	sp, sp, #12
 3468              	.LCFI117:
 3469              		.cfi_def_cfa_offset 16
 3470 1268 00AF     		add	r7, sp, #0
 3471              	.LCFI118:
 3472              		.cfi_def_cfa_register 7
 3473 126a 7860     		str	r0, [r7, #4]
2196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3474              		.loc 1 2200 0
 3475 126c 084B     		ldr	r3, .L222
 3476 126e 084A     		ldr	r2, .L222
 3477 1270 126C     		ldr	r2, [r2, #64]
 3478 1272 22F4E062 		bic	r2, r2, #1792
 3479 1276 1A64     		str	r2, [r3, #64]
2201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3480              		.loc 1 2203 0
 3481 1278 054B     		ldr	r3, .L222
 3482 127a 054A     		ldr	r2, .L222
 3483 127c 116C     		ldr	r1, [r2, #64]
 3484 127e 7A68     		ldr	r2, [r7, #4]
 3485 1280 0A43     		orrs	r2, r2, r1
 3486 1282 1A64     		str	r2, [r3, #64]
2204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3487              		.loc 1 2204 0
 3488 1284 07F10C07 		add	r7, r7, #12
 3489 1288 BD46     		mov	sp, r7
 3490 128a 80BC     		pop	{r7}
 3491 128c 7047     		bx	lr
 3492              	.L223:
 3493 128e 00BF     		.align	2
 3494              	.L222:
 3495 1290 00280040 		.word	1073752064
 3496              		.cfi_endproc
 3497              	.LFE150:
 3499              		.align	2
 3500              		.global	RTC_TamperPinsPrechargeDuration
 3501              		.thumb
 3502              		.thumb_func
 3504              	RTC_TamperPinsPrechargeDuration:
 3505              	.LFB151:
2205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3506              		.loc 1 2218 0
 3507              		.cfi_startproc
 3508              		@ args = 0, pretend = 0, frame = 8
 3509              		@ frame_needed = 1, uses_anonymous_args = 0
 3510              		@ link register save eliminated.
 3511 1294 80B4     		push	{r7}
 3512              	.LCFI119:
 3513              		.cfi_def_cfa_offset 4
 3514              		.cfi_offset 7, -4
 3515 1296 83B0     		sub	sp, sp, #12
 3516              	.LCFI120:
 3517              		.cfi_def_cfa_offset 16
 3518 1298 00AF     		add	r7, sp, #0
 3519              	.LCFI121:
 3520              		.cfi_def_cfa_register 7
 3521 129a 7860     		str	r0, [r7, #4]
2219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3522              		.loc 1 2223 0
 3523 129c 084B     		ldr	r3, .L225
 3524 129e 084A     		ldr	r2, .L225
 3525 12a0 126C     		ldr	r2, [r2, #64]
 3526 12a2 22F4C042 		bic	r2, r2, #24576
 3527 12a6 1A64     		str	r2, [r3, #64]
2224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3528              		.loc 1 2226 0
 3529 12a8 054B     		ldr	r3, .L225
 3530 12aa 054A     		ldr	r2, .L225
 3531 12ac 116C     		ldr	r1, [r2, #64]
 3532 12ae 7A68     		ldr	r2, [r7, #4]
 3533 12b0 0A43     		orrs	r2, r2, r1
 3534 12b2 1A64     		str	r2, [r3, #64]
2227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3535              		.loc 1 2227 0
 3536 12b4 07F10C07 		add	r7, r7, #12
 3537 12b8 BD46     		mov	sp, r7
 3538 12ba 80BC     		pop	{r7}
 3539 12bc 7047     		bx	lr
 3540              	.L226:
 3541 12be 00BF     		.align	2
 3542              	.L225:
 3543 12c0 00280040 		.word	1073752064
 3544              		.cfi_endproc
 3545              	.LFE151:
 3547              		.align	2
 3548              		.global	RTC_TimeStampOnTamperDetectionCmd
 3549              		.thumb
 3550              		.thumb_func
 3552              	RTC_TimeStampOnTamperDetectionCmd:
 3553              	.LFB152:
2228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3554              		.loc 1 2238 0
 3555              		.cfi_startproc
 3556              		@ args = 0, pretend = 0, frame = 8
 3557              		@ frame_needed = 1, uses_anonymous_args = 0
 3558              		@ link register save eliminated.
 3559 12c4 80B4     		push	{r7}
 3560              	.LCFI122:
 3561              		.cfi_def_cfa_offset 4
 3562              		.cfi_offset 7, -4
 3563 12c6 83B0     		sub	sp, sp, #12
 3564              	.LCFI123:
 3565              		.cfi_def_cfa_offset 16
 3566 12c8 00AF     		add	r7, sp, #0
 3567              	.LCFI124:
 3568              		.cfi_def_cfa_register 7
 3569 12ca 0346     		mov	r3, r0
 3570 12cc FB71     		strb	r3, [r7, #7]
2239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3571              		.loc 1 2242 0
 3572 12ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3573 12d0 002B     		cmp	r3, #0
 3574 12d2 06D0     		beq	.L228
2243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3575              		.loc 1 2245 0
 3576 12d4 084B     		ldr	r3, .L230
 3577 12d6 084A     		ldr	r2, .L230
 3578 12d8 126C     		ldr	r2, [r2, #64]
 3579 12da 42F08002 		orr	r2, r2, #128
 3580 12de 1A64     		str	r2, [r3, #64]
 3581 12e0 05E0     		b	.L227
 3582              	.L228:
2246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3583              		.loc 1 2250 0
 3584 12e2 054B     		ldr	r3, .L230
 3585 12e4 044A     		ldr	r2, .L230
 3586 12e6 126C     		ldr	r2, [r2, #64]
 3587 12e8 22F08002 		bic	r2, r2, #128
 3588 12ec 1A64     		str	r2, [r3, #64]
 3589              	.L227:
2251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3590              		.loc 1 2252 0
 3591 12ee 07F10C07 		add	r7, r7, #12
 3592 12f2 BD46     		mov	sp, r7
 3593 12f4 80BC     		pop	{r7}
 3594 12f6 7047     		bx	lr
 3595              	.L231:
 3596              		.align	2
 3597              	.L230:
 3598 12f8 00280040 		.word	1073752064
 3599              		.cfi_endproc
 3600              	.LFE152:
 3602              		.align	2
 3603              		.global	RTC_TamperPullUpCmd
 3604              		.thumb
 3605              		.thumb_func
 3607              	RTC_TamperPullUpCmd:
 3608              	.LFB153:
2253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3609              		.loc 1 2261 0
 3610              		.cfi_startproc
 3611              		@ args = 0, pretend = 0, frame = 8
 3612              		@ frame_needed = 1, uses_anonymous_args = 0
 3613              		@ link register save eliminated.
 3614 12fc 80B4     		push	{r7}
 3615              	.LCFI125:
 3616              		.cfi_def_cfa_offset 4
 3617              		.cfi_offset 7, -4
 3618 12fe 83B0     		sub	sp, sp, #12
 3619              	.LCFI126:
 3620              		.cfi_def_cfa_offset 16
 3621 1300 00AF     		add	r7, sp, #0
 3622              	.LCFI127:
 3623              		.cfi_def_cfa_register 7
 3624 1302 0346     		mov	r3, r0
 3625 1304 FB71     		strb	r3, [r7, #7]
2262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3626              		.loc 1 2265 0
 3627 1306 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3628 1308 002B     		cmp	r3, #0
 3629 130a 06D0     		beq	.L233
2266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3630              		.loc 1 2268 0
 3631 130c 084B     		ldr	r3, .L235
 3632 130e 084A     		ldr	r2, .L235
 3633 1310 126C     		ldr	r2, [r2, #64]
 3634 1312 22F40042 		bic	r2, r2, #32768
 3635 1316 1A64     		str	r2, [r3, #64]
 3636 1318 05E0     		b	.L232
 3637              	.L233:
2269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3638              		.loc 1 2273 0
 3639 131a 054B     		ldr	r3, .L235
 3640 131c 044A     		ldr	r2, .L235
 3641 131e 126C     		ldr	r2, [r2, #64]
 3642 1320 42F40042 		orr	r2, r2, #32768
 3643 1324 1A64     		str	r2, [r3, #64]
 3644              	.L232:
2274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3645              		.loc 1 2275 0
 3646 1326 07F10C07 		add	r7, r7, #12
 3647 132a BD46     		mov	sp, r7
 3648 132c 80BC     		pop	{r7}
 3649 132e 7047     		bx	lr
 3650              	.L236:
 3651              		.align	2
 3652              	.L235:
 3653 1330 00280040 		.word	1073752064
 3654              		.cfi_endproc
 3655              	.LFE153:
 3657              		.align	2
 3658              		.global	RTC_WriteBackupRegister
 3659              		.thumb
 3660              		.thumb_func
 3662              	RTC_WriteBackupRegister:
 3663              	.LFB154:
2276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3664              		.loc 1 2302 0
 3665              		.cfi_startproc
 3666              		@ args = 0, pretend = 0, frame = 16
 3667              		@ frame_needed = 1, uses_anonymous_args = 0
 3668              		@ link register save eliminated.
 3669 1334 80B4     		push	{r7}
 3670              	.LCFI128:
 3671              		.cfi_def_cfa_offset 4
 3672              		.cfi_offset 7, -4
 3673 1336 85B0     		sub	sp, sp, #20
 3674              	.LCFI129:
 3675              		.cfi_def_cfa_offset 24
 3676 1338 00AF     		add	r7, sp, #0
 3677              	.LCFI130:
 3678              		.cfi_def_cfa_register 7
 3679 133a 7860     		str	r0, [r7, #4]
 3680 133c 3960     		str	r1, [r7, #0]
2303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3681              		.loc 1 2303 0
 3682 133e 4FF00003 		mov	r3, #0
 3683 1342 FB60     		str	r3, [r7, #12]
2304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3684              		.loc 1 2308 0
 3685 1344 074B     		ldr	r3, .L238
 3686 1346 FB60     		str	r3, [r7, #12]
2309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3687              		.loc 1 2309 0
 3688 1348 7B68     		ldr	r3, [r7, #4]
 3689 134a 4FEA8302 		lsl	r2, r3, #2
 3690 134e FB68     		ldr	r3, [r7, #12]
 3691 1350 D318     		adds	r3, r2, r3
 3692 1352 FB60     		str	r3, [r7, #12]
2310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3693              		.loc 1 2312 0
 3694 1354 FB68     		ldr	r3, [r7, #12]
 3695 1356 3A68     		ldr	r2, [r7, #0]
 3696 1358 1A60     		str	r2, [r3, #0]
2313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3697              		.loc 1 2313 0
 3698 135a 07F11407 		add	r7, r7, #20
 3699 135e BD46     		mov	sp, r7
 3700 1360 80BC     		pop	{r7}
 3701 1362 7047     		bx	lr
 3702              	.L239:
 3703              		.align	2
 3704              	.L238:
 3705 1364 50280040 		.word	1073752144
 3706              		.cfi_endproc
 3707              	.LFE154:
 3709              		.align	2
 3710              		.global	RTC_ReadBackupRegister
 3711              		.thumb
 3712              		.thumb_func
 3714              	RTC_ReadBackupRegister:
 3715              	.LFB155:
2314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3716              		.loc 1 2323 0
 3717              		.cfi_startproc
 3718              		@ args = 0, pretend = 0, frame = 16
 3719              		@ frame_needed = 1, uses_anonymous_args = 0
 3720              		@ link register save eliminated.
 3721 1368 80B4     		push	{r7}
 3722              	.LCFI131:
 3723              		.cfi_def_cfa_offset 4
 3724              		.cfi_offset 7, -4
 3725 136a 85B0     		sub	sp, sp, #20
 3726              	.LCFI132:
 3727              		.cfi_def_cfa_offset 24
 3728 136c 00AF     		add	r7, sp, #0
 3729              	.LCFI133:
 3730              		.cfi_def_cfa_register 7
 3731 136e 7860     		str	r0, [r7, #4]
2324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3732              		.loc 1 2324 0
 3733 1370 4FF00003 		mov	r3, #0
 3734 1374 FB60     		str	r3, [r7, #12]
2325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3735              		.loc 1 2329 0
 3736 1376 084B     		ldr	r3, .L242
 3737 1378 FB60     		str	r3, [r7, #12]
2330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3738              		.loc 1 2330 0
 3739 137a 7B68     		ldr	r3, [r7, #4]
 3740 137c 4FEA8302 		lsl	r2, r3, #2
 3741 1380 FB68     		ldr	r3, [r7, #12]
 3742 1382 D318     		adds	r3, r2, r3
 3743 1384 FB60     		str	r3, [r7, #12]
2331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3744              		.loc 1 2333 0
 3745 1386 FB68     		ldr	r3, [r7, #12]
 3746 1388 1B68     		ldr	r3, [r3, #0]
2334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3747              		.loc 1 2334 0
 3748 138a 1846     		mov	r0, r3
 3749 138c 07F11407 		add	r7, r7, #20
 3750 1390 BD46     		mov	sp, r7
 3751 1392 80BC     		pop	{r7}
 3752 1394 7047     		bx	lr
 3753              	.L243:
 3754 1396 00BF     		.align	2
 3755              	.L242:
 3756 1398 50280040 		.word	1073752144
 3757              		.cfi_endproc
 3758              	.LFE155:
 3760              		.align	2
 3761              		.global	RTC_TamperPinSelection
 3762              		.thumb
 3763              		.thumb_func
 3765              	RTC_TamperPinSelection:
 3766              	.LFB156:
2335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3767              		.loc 1 2363 0
 3768              		.cfi_startproc
 3769              		@ args = 0, pretend = 0, frame = 8
 3770              		@ frame_needed = 1, uses_anonymous_args = 0
 3771              		@ link register save eliminated.
 3772 139c 80B4     		push	{r7}
 3773              	.LCFI134:
 3774              		.cfi_def_cfa_offset 4
 3775              		.cfi_offset 7, -4
 3776 139e 83B0     		sub	sp, sp, #12
 3777              	.LCFI135:
 3778              		.cfi_def_cfa_offset 16
 3779 13a0 00AF     		add	r7, sp, #0
 3780              	.LCFI136:
 3781              		.cfi_def_cfa_register 7
 3782 13a2 7860     		str	r0, [r7, #4]
2364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3783              		.loc 1 2367 0
 3784 13a4 084B     		ldr	r3, .L245
 3785 13a6 084A     		ldr	r2, .L245
 3786 13a8 126C     		ldr	r2, [r2, #64]
 3787 13aa 22F48032 		bic	r2, r2, #65536
 3788 13ae 1A64     		str	r2, [r3, #64]
2368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3789              		.loc 1 2368 0
 3790 13b0 054B     		ldr	r3, .L245
 3791 13b2 054A     		ldr	r2, .L245
 3792 13b4 116C     		ldr	r1, [r2, #64]
 3793 13b6 7A68     		ldr	r2, [r7, #4]
 3794 13b8 0A43     		orrs	r2, r2, r1
 3795 13ba 1A64     		str	r2, [r3, #64]
2369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3796              		.loc 1 2369 0
 3797 13bc 07F10C07 		add	r7, r7, #12
 3798 13c0 BD46     		mov	sp, r7
 3799 13c2 80BC     		pop	{r7}
 3800 13c4 7047     		bx	lr
 3801              	.L246:
 3802 13c6 00BF     		.align	2
 3803              	.L245:
 3804 13c8 00280040 		.word	1073752064
 3805              		.cfi_endproc
 3806              	.LFE156:
 3808              		.align	2
 3809              		.global	RTC_TimeStampPinSelection
 3810              		.thumb
 3811              		.thumb_func
 3813              	RTC_TimeStampPinSelection:
 3814              	.LFB157:
2370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3815              		.loc 1 2380 0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 8
 3818              		@ frame_needed = 1, uses_anonymous_args = 0
 3819              		@ link register save eliminated.
 3820 13cc 80B4     		push	{r7}
 3821              	.LCFI137:
 3822              		.cfi_def_cfa_offset 4
 3823              		.cfi_offset 7, -4
 3824 13ce 83B0     		sub	sp, sp, #12
 3825              	.LCFI138:
 3826              		.cfi_def_cfa_offset 16
 3827 13d0 00AF     		add	r7, sp, #0
 3828              	.LCFI139:
 3829              		.cfi_def_cfa_register 7
 3830 13d2 7860     		str	r0, [r7, #4]
2381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3831              		.loc 1 2384 0
 3832 13d4 084B     		ldr	r3, .L248
 3833 13d6 084A     		ldr	r2, .L248
 3834 13d8 126C     		ldr	r2, [r2, #64]
 3835 13da 22F40032 		bic	r2, r2, #131072
 3836 13de 1A64     		str	r2, [r3, #64]
2385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3837              		.loc 1 2385 0
 3838 13e0 054B     		ldr	r3, .L248
 3839 13e2 054A     		ldr	r2, .L248
 3840 13e4 116C     		ldr	r1, [r2, #64]
 3841 13e6 7A68     		ldr	r2, [r7, #4]
 3842 13e8 0A43     		orrs	r2, r2, r1
 3843 13ea 1A64     		str	r2, [r3, #64]
2386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3844              		.loc 1 2386 0
 3845 13ec 07F10C07 		add	r7, r7, #12
 3846 13f0 BD46     		mov	sp, r7
 3847 13f2 80BC     		pop	{r7}
 3848 13f4 7047     		bx	lr
 3849              	.L249:
 3850 13f6 00BF     		.align	2
 3851              	.L248:
 3852 13f8 00280040 		.word	1073752064
 3853              		.cfi_endproc
 3854              	.LFE157:
 3856              		.align	2
 3857              		.global	RTC_OutputTypeConfig
 3858              		.thumb
 3859              		.thumb_func
 3861              	RTC_OutputTypeConfig:
 3862              	.LFB158:
2387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3863              		.loc 1 2399 0
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 8
 3866              		@ frame_needed = 1, uses_anonymous_args = 0
 3867              		@ link register save eliminated.
 3868 13fc 80B4     		push	{r7}
 3869              	.LCFI140:
 3870              		.cfi_def_cfa_offset 4
 3871              		.cfi_offset 7, -4
 3872 13fe 83B0     		sub	sp, sp, #12
 3873              	.LCFI141:
 3874              		.cfi_def_cfa_offset 16
 3875 1400 00AF     		add	r7, sp, #0
 3876              	.LCFI142:
 3877              		.cfi_def_cfa_register 7
 3878 1402 7860     		str	r0, [r7, #4]
2400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3879              		.loc 1 2403 0
 3880 1404 084B     		ldr	r3, .L251
 3881 1406 084A     		ldr	r2, .L251
 3882 1408 126C     		ldr	r2, [r2, #64]
 3883 140a 22F48022 		bic	r2, r2, #262144
 3884 140e 1A64     		str	r2, [r3, #64]
2404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3885              		.loc 1 2404 0
 3886 1410 054B     		ldr	r3, .L251
 3887 1412 054A     		ldr	r2, .L251
 3888 1414 116C     		ldr	r1, [r2, #64]
 3889 1416 7A68     		ldr	r2, [r7, #4]
 3890 1418 0A43     		orrs	r2, r2, r1
 3891 141a 1A64     		str	r2, [r3, #64]
2405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3892              		.loc 1 2405 0
 3893 141c 07F10C07 		add	r7, r7, #12
 3894 1420 BD46     		mov	sp, r7
 3895 1422 80BC     		pop	{r7}
 3896 1424 7047     		bx	lr
 3897              	.L252:
 3898 1426 00BF     		.align	2
 3899              	.L251:
 3900 1428 00280040 		.word	1073752064
 3901              		.cfi_endproc
 3902              	.LFE158:
 3904              		.align	2
 3905              		.global	RTC_SynchroShiftConfig
 3906              		.thumb
 3907              		.thumb_func
 3909              	RTC_SynchroShiftConfig:
 3910              	.LFB159:
2406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3911              		.loc 1 2437 0
 3912              		.cfi_startproc
 3913              		@ args = 0, pretend = 0, frame = 16
 3914              		@ frame_needed = 1, uses_anonymous_args = 0
 3915 142c 80B5     		push	{r7, lr}
 3916              	.LCFI143:
 3917              		.cfi_def_cfa_offset 8
 3918              		.cfi_offset 7, -8
 3919              		.cfi_offset 14, -4
 3920 142e 84B0     		sub	sp, sp, #16
 3921              	.LCFI144:
 3922              		.cfi_def_cfa_offset 24
 3923 1430 00AF     		add	r7, sp, #0
 3924              	.LCFI145:
 3925              		.cfi_def_cfa_register 7
 3926 1432 7860     		str	r0, [r7, #4]
 3927 1434 3960     		str	r1, [r7, #0]
2438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3928              		.loc 1 2438 0
 3929 1436 4FF00003 		mov	r3, #0
 3930 143a FB73     		strb	r3, [r7, #15]
2439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3931              		.loc 1 2439 0
 3932 143c 4FF00003 		mov	r3, #0
 3933 1440 BB60     		str	r3, [r7, #8]
2440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3934              		.loc 1 2446 0
 3935 1442 264B     		ldr	r3, .L262
 3936 1444 4FF0CA02 		mov	r2, #202
 3937 1448 5A62     		str	r2, [r3, #36]
2447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3938              		.loc 1 2447 0
 3939 144a 244B     		ldr	r3, .L262
 3940 144c 4FF05302 		mov	r2, #83
 3941 1450 5A62     		str	r2, [r3, #36]
2448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3942              		.loc 1 2450 0
 3943 1452 224B     		ldr	r3, .L262
 3944 1454 DB68     		ldr	r3, [r3, #12]
 3945 1456 03F00803 		and	r3, r3, #8
 3946 145a 002B     		cmp	r3, #0
 3947 145c 0ED0     		beq	.L254
2451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3948              		.loc 1 2453 0
 3949 145e 03E0     		b	.L255
 3950              	.L256:
2454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 3951              		.loc 1 2455 0
 3952 1460 BB68     		ldr	r3, [r7, #8]
 3953 1462 03F10103 		add	r3, r3, #1
 3954 1466 BB60     		str	r3, [r7, #8]
 3955              	.L255:
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3956              		.loc 1 2453 0 discriminator 1
 3957 1468 1C4B     		ldr	r3, .L262
 3958 146a DB68     		ldr	r3, [r3, #12]
 3959 146c 03F00803 		and	r3, r3, #8
 3960 1470 002B     		cmp	r3, #0
 3961 1472 03D0     		beq	.L254
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3962              		.loc 1 2453 0 is_stmt 0 discriminator 2
 3963 1474 BB68     		ldr	r3, [r7, #8]
 3964 1476 B3F5805F 		cmp	r3, #4096
 3965 147a F1D1     		bne	.L256
 3966              	.L254:
2456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 3967              		.loc 1 2460 0 is_stmt 1
 3968 147c 174B     		ldr	r3, .L262
 3969 147e DB68     		ldr	r3, [r3, #12]
 3970 1480 03F00803 		and	r3, r3, #8
 3971 1484 002B     		cmp	r3, #0
 3972 1486 1BD1     		bne	.L257
2461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 3973              		.loc 1 2463 0
 3974 1488 144B     		ldr	r3, .L262
 3975 148a 9B68     		ldr	r3, [r3, #8]
 3976 148c 03F01003 		and	r3, r3, #16
 3977 1490 002B     		cmp	r3, #0
 3978 1492 11D1     		bne	.L258
2464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 3979              		.loc 1 2466 0
 3980 1494 114B     		ldr	r3, .L262
 3981 1496 3968     		ldr	r1, [r7, #0]
 3982 1498 7A68     		ldr	r2, [r7, #4]
 3983 149a 0A43     		orrs	r2, r2, r1
 3984 149c DA62     		str	r2, [r3, #44]
2467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 3985              		.loc 1 2468 0
 3986 149e FFF7FEFF 		bl	RTC_WaitForSynchro
 3987 14a2 0346     		mov	r3, r0
 3988 14a4 002B     		cmp	r3, #0
 3989 14a6 03D1     		bne	.L259
2469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 3990              		.loc 1 2470 0
 3991 14a8 4FF00003 		mov	r3, #0
 3992 14ac FB73     		strb	r3, [r7, #15]
 3993 14ae 0AE0     		b	.L260
 3994              	.L259:
2471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 3995              		.loc 1 2474 0
 3996 14b0 4FF00103 		mov	r3, #1
 3997 14b4 FB73     		strb	r3, [r7, #15]
 3998 14b6 06E0     		b	.L260
 3999              	.L258:
2475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4000              		.loc 1 2479 0
 4001 14b8 4FF00003 		mov	r3, #0
 4002 14bc FB73     		strb	r3, [r7, #15]
 4003 14be 02E0     		b	.L260
 4004              	.L257:
2480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4005              		.loc 1 2484 0
 4006 14c0 4FF00003 		mov	r3, #0
 4007 14c4 FB73     		strb	r3, [r7, #15]
 4008              	.L260:
2485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4009              		.loc 1 2488 0
 4010 14c6 054B     		ldr	r3, .L262
 4011 14c8 4FF0FF02 		mov	r2, #255
 4012 14cc 5A62     		str	r2, [r3, #36]
2489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4013              		.loc 1 2490 0
 4014 14ce FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4015              		.loc 1 2491 0
 4016 14d0 1846     		mov	r0, r3
 4017 14d2 07F11007 		add	r7, r7, #16
 4018 14d6 BD46     		mov	sp, r7
 4019 14d8 80BD     		pop	{r7, pc}
 4020              	.L263:
 4021 14da 00BF     		.align	2
 4022              	.L262:
 4023 14dc 00280040 		.word	1073752064
 4024              		.cfi_endproc
 4025              	.LFE159:
 4027              		.align	2
 4028              		.global	RTC_ITConfig
 4029              		.thumb
 4030              		.thumb_func
 4032              	RTC_ITConfig:
 4033              	.LFB160:
2492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4034              		.loc 1 2556 0
 4035              		.cfi_startproc
 4036              		@ args = 0, pretend = 0, frame = 8
 4037              		@ frame_needed = 1, uses_anonymous_args = 0
 4038              		@ link register save eliminated.
 4039 14e0 80B4     		push	{r7}
 4040              	.LCFI146:
 4041              		.cfi_def_cfa_offset 4
 4042              		.cfi_offset 7, -4
 4043 14e2 83B0     		sub	sp, sp, #12
 4044              	.LCFI147:
 4045              		.cfi_def_cfa_offset 16
 4046 14e4 00AF     		add	r7, sp, #0
 4047              	.LCFI148:
 4048              		.cfi_def_cfa_register 7
 4049 14e6 7860     		str	r0, [r7, #4]
 4050 14e8 0B46     		mov	r3, r1
 4051 14ea FB70     		strb	r3, [r7, #3]
2557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4052              		.loc 1 2562 0
 4053 14ec 1C4B     		ldr	r3, .L267
 4054 14ee 4FF0CA02 		mov	r2, #202
 4055 14f2 5A62     		str	r2, [r3, #36]
2563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4056              		.loc 1 2563 0
 4057 14f4 1A4B     		ldr	r3, .L267
 4058 14f6 4FF05302 		mov	r2, #83
 4059 14fa 5A62     		str	r2, [r3, #36]
2564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4060              		.loc 1 2565 0
 4061 14fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4062 14fe 002B     		cmp	r3, #0
 4063 1500 10D0     		beq	.L265
2566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4064              		.loc 1 2568 0
 4065 1502 174B     		ldr	r3, .L267
 4066 1504 164A     		ldr	r2, .L267
 4067 1506 9168     		ldr	r1, [r2, #8]
 4068 1508 7A68     		ldr	r2, [r7, #4]
 4069 150a 22F00402 		bic	r2, r2, #4
 4070 150e 0A43     		orrs	r2, r2, r1
 4071 1510 9A60     		str	r2, [r3, #8]
2569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4072              		.loc 1 2570 0
 4073 1512 134B     		ldr	r3, .L267
 4074 1514 124A     		ldr	r2, .L267
 4075 1516 116C     		ldr	r1, [r2, #64]
 4076 1518 7A68     		ldr	r2, [r7, #4]
 4077 151a 02F00402 		and	r2, r2, #4
 4078 151e 0A43     		orrs	r2, r2, r1
 4079 1520 1A64     		str	r2, [r3, #64]
 4080 1522 13E0     		b	.L266
 4081              	.L265:
2571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4082              		.loc 1 2575 0
 4083 1524 0E4B     		ldr	r3, .L267
 4084 1526 0E4A     		ldr	r2, .L267
 4085 1528 9168     		ldr	r1, [r2, #8]
 4086 152a 7A68     		ldr	r2, [r7, #4]
 4087 152c 22F00402 		bic	r2, r2, #4
 4088 1530 6FEA0202 		mvn	r2, r2
 4089 1534 0A40     		ands	r2, r2, r1
 4090 1536 9A60     		str	r2, [r3, #8]
2576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4091              		.loc 1 2577 0
 4092 1538 094B     		ldr	r3, .L267
 4093 153a 094A     		ldr	r2, .L267
 4094 153c 116C     		ldr	r1, [r2, #64]
 4095 153e 7A68     		ldr	r2, [r7, #4]
 4096 1540 02F00402 		and	r2, r2, #4
 4097 1544 6FEA0202 		mvn	r2, r2
 4098 1548 0A40     		ands	r2, r2, r1
 4099 154a 1A64     		str	r2, [r3, #64]
 4100              	.L266:
2578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4101              		.loc 1 2580 0
 4102 154c 044B     		ldr	r3, .L267
 4103 154e 4FF0FF02 		mov	r2, #255
 4104 1552 5A62     		str	r2, [r3, #36]
2581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4105              		.loc 1 2581 0
 4106 1554 07F10C07 		add	r7, r7, #12
 4107 1558 BD46     		mov	sp, r7
 4108 155a 80BC     		pop	{r7}
 4109 155c 7047     		bx	lr
 4110              	.L268:
 4111 155e 00BF     		.align	2
 4112              	.L267:
 4113 1560 00280040 		.word	1073752064
 4114              		.cfi_endproc
 4115              	.LFE160:
 4117              		.align	2
 4118              		.global	RTC_GetFlagStatus
 4119              		.thumb
 4120              		.thumb_func
 4122              	RTC_GetFlagStatus:
 4123              	.LFB161:
2582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4124              		.loc 1 2604 0
 4125              		.cfi_startproc
 4126              		@ args = 0, pretend = 0, frame = 16
 4127              		@ frame_needed = 1, uses_anonymous_args = 0
 4128              		@ link register save eliminated.
 4129 1564 80B4     		push	{r7}
 4130              	.LCFI149:
 4131              		.cfi_def_cfa_offset 4
 4132              		.cfi_offset 7, -4
 4133 1566 85B0     		sub	sp, sp, #20
 4134              	.LCFI150:
 4135              		.cfi_def_cfa_offset 24
 4136 1568 00AF     		add	r7, sp, #0
 4137              	.LCFI151:
 4138              		.cfi_def_cfa_register 7
 4139 156a 7860     		str	r0, [r7, #4]
2605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4140              		.loc 1 2605 0
 4141 156c 4FF00003 		mov	r3, #0
 4142 1570 FB73     		strb	r3, [r7, #15]
2606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4143              		.loc 1 2606 0
 4144 1572 4FF00003 		mov	r3, #0
 4145 1576 BB60     		str	r3, [r7, #8]
2607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4146              		.loc 1 2612 0
 4147 1578 0B4B     		ldr	r3, .L273
 4148 157a DA68     		ldr	r2, [r3, #12]
 4149 157c 0B4B     		ldr	r3, .L273+4
 4150 157e 1340     		ands	r3, r3, r2
 4151 1580 BB60     		str	r3, [r7, #8]
2613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4152              		.loc 1 2615 0
 4153 1582 BA68     		ldr	r2, [r7, #8]
 4154 1584 7B68     		ldr	r3, [r7, #4]
 4155 1586 1340     		ands	r3, r3, r2
 4156 1588 002B     		cmp	r3, #0
 4157 158a 03D0     		beq	.L270
2616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4158              		.loc 1 2617 0
 4159 158c 4FF00103 		mov	r3, #1
 4160 1590 FB73     		strb	r3, [r7, #15]
 4161 1592 02E0     		b	.L271
 4162              	.L270:
2618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4163              		.loc 1 2621 0
 4164 1594 4FF00003 		mov	r3, #0
 4165 1598 FB73     		strb	r3, [r7, #15]
 4166              	.L271:
2622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4167              		.loc 1 2623 0
 4168 159a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4169              		.loc 1 2624 0
 4170 159c 1846     		mov	r0, r3
 4171 159e 07F11407 		add	r7, r7, #20
 4172 15a2 BD46     		mov	sp, r7
 4173 15a4 80BC     		pop	{r7}
 4174 15a6 7047     		bx	lr
 4175              	.L274:
 4176              		.align	2
 4177              	.L273:
 4178 15a8 00280040 		.word	1073752064
 4179 15ac 7F3F0100 		.word	81791
 4180              		.cfi_endproc
 4181              	.LFE161:
 4183              		.align	2
 4184              		.global	RTC_ClearFlag
 4185              		.thumb
 4186              		.thumb_func
 4188              	RTC_ClearFlag:
 4189              	.LFB162:
2625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4190              		.loc 1 2640 0
 4191              		.cfi_startproc
 4192              		@ args = 0, pretend = 0, frame = 8
 4193              		@ frame_needed = 1, uses_anonymous_args = 0
 4194              		@ link register save eliminated.
 4195 15b0 80B4     		push	{r7}
 4196              	.LCFI152:
 4197              		.cfi_def_cfa_offset 4
 4198              		.cfi_offset 7, -4
 4199 15b2 83B0     		sub	sp, sp, #12
 4200              	.LCFI153:
 4201              		.cfi_def_cfa_offset 16
 4202 15b4 00AF     		add	r7, sp, #0
 4203              	.LCFI154:
 4204              		.cfi_def_cfa_register 7
 4205 15b6 7860     		str	r0, [r7, #4]
2641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4206              		.loc 1 2645 0
 4207 15b8 0A4A     		ldr	r2, .L276
 4208 15ba 7B68     		ldr	r3, [r7, #4]
 4209 15bc 4FEA0343 		lsl	r3, r3, #16
 4210 15c0 4FEA1343 		lsr	r3, r3, #16
 4211 15c4 43F08003 		orr	r3, r3, #128
 4212 15c8 6FEA0301 		mvn	r1, r3
 4213 15cc 054B     		ldr	r3, .L276
 4214 15ce DB68     		ldr	r3, [r3, #12]
 4215 15d0 03F08003 		and	r3, r3, #128
 4216 15d4 0B43     		orrs	r3, r3, r1
 4217 15d6 D360     		str	r3, [r2, #12]
2646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4218              		.loc 1 2646 0
 4219 15d8 07F10C07 		add	r7, r7, #12
 4220 15dc BD46     		mov	sp, r7
 4221 15de 80BC     		pop	{r7}
 4222 15e0 7047     		bx	lr
 4223              	.L277:
 4224 15e2 00BF     		.align	2
 4225              	.L276:
 4226 15e4 00280040 		.word	1073752064
 4227              		.cfi_endproc
 4228              	.LFE162:
 4230              		.align	2
 4231              		.global	RTC_GetITStatus
 4232              		.thumb
 4233              		.thumb_func
 4235              	RTC_GetITStatus:
 4236              	.LFB163:
2647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4237              		.loc 1 2660 0
 4238              		.cfi_startproc
 4239              		@ args = 0, pretend = 0, frame = 24
 4240              		@ frame_needed = 1, uses_anonymous_args = 0
 4241              		@ link register save eliminated.
 4242 15e8 80B4     		push	{r7}
 4243              	.LCFI155:
 4244              		.cfi_def_cfa_offset 4
 4245              		.cfi_offset 7, -4
 4246 15ea 87B0     		sub	sp, sp, #28
 4247              	.LCFI156:
 4248              		.cfi_def_cfa_offset 32
 4249 15ec 00AF     		add	r7, sp, #0
 4250              	.LCFI157:
 4251              		.cfi_def_cfa_register 7
 4252 15ee 7860     		str	r0, [r7, #4]
2661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4253              		.loc 1 2661 0
 4254 15f0 4FF00003 		mov	r3, #0
 4255 15f4 FB75     		strb	r3, [r7, #23]
2662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4256              		.loc 1 2662 0
 4257 15f6 4FF00003 		mov	r3, #0
 4258 15fa 3B61     		str	r3, [r7, #16]
 4259 15fc 4FF00003 		mov	r3, #0
 4260 1600 FB60     		str	r3, [r7, #12]
2663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4261              		.loc 1 2668 0
 4262 1602 174B     		ldr	r3, .L282
 4263 1604 1B6C     		ldr	r3, [r3, #64]
 4264 1606 03F00403 		and	r3, r3, #4
 4265 160a 3B61     		str	r3, [r7, #16]
2669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4266              		.loc 1 2671 0
 4267 160c 144B     		ldr	r3, .L282
 4268 160e 9A68     		ldr	r2, [r3, #8]
 4269 1610 7B68     		ldr	r3, [r7, #4]
 4270 1612 1A40     		ands	r2, r2, r3
 4271 1614 7B68     		ldr	r3, [r7, #4]
 4272 1616 4FEAD331 		lsr	r1, r3, #15
 4273 161a 3B69     		ldr	r3, [r7, #16]
 4274 161c 0B40     		ands	r3, r3, r1
 4275 161e 1343     		orrs	r3, r3, r2
 4276 1620 FB60     		str	r3, [r7, #12]
2672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4277              		.loc 1 2674 0
 4278 1622 0F4B     		ldr	r3, .L282
 4279 1624 DA68     		ldr	r2, [r3, #12]
 4280 1626 7B68     		ldr	r3, [r7, #4]
 4281 1628 4FEA1313 		lsr	r3, r3, #4
 4282 162c 1340     		ands	r3, r3, r2
 4283 162e 3B61     		str	r3, [r7, #16]
2675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4284              		.loc 1 2677 0
 4285 1630 FB68     		ldr	r3, [r7, #12]
 4286 1632 002B     		cmp	r3, #0
 4287 1634 0AD0     		beq	.L279
 4288              		.loc 1 2677 0 is_stmt 0 discriminator 1
 4289 1636 3B69     		ldr	r3, [r7, #16]
 4290 1638 4FEA0343 		lsl	r3, r3, #16
 4291 163c 4FEA1343 		lsr	r3, r3, #16
 4292 1640 002B     		cmp	r3, #0
 4293 1642 03D0     		beq	.L279
2678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4294              		.loc 1 2679 0 is_stmt 1
 4295 1644 4FF00103 		mov	r3, #1
 4296 1648 FB75     		strb	r3, [r7, #23]
 4297 164a 02E0     		b	.L280
 4298              	.L279:
2680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4299              		.loc 1 2683 0
 4300 164c 4FF00003 		mov	r3, #0
 4301 1650 FB75     		strb	r3, [r7, #23]
 4302              	.L280:
2684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4303              		.loc 1 2685 0
 4304 1652 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4305              		.loc 1 2686 0
 4306 1654 1846     		mov	r0, r3
 4307 1656 07F11C07 		add	r7, r7, #28
 4308 165a BD46     		mov	sp, r7
 4309 165c 80BC     		pop	{r7}
 4310 165e 7047     		bx	lr
 4311              	.L283:
 4312              		.align	2
 4313              	.L282:
 4314 1660 00280040 		.word	1073752064
 4315              		.cfi_endproc
 4316              	.LFE163:
 4318              		.align	2
 4319              		.global	RTC_ClearITPendingBit
 4320              		.thumb
 4321              		.thumb_func
 4323              	RTC_ClearITPendingBit:
 4324              	.LFB164:
2687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4325              		.loc 1 2700 0
 4326              		.cfi_startproc
 4327              		@ args = 0, pretend = 0, frame = 16
 4328              		@ frame_needed = 1, uses_anonymous_args = 0
 4329              		@ link register save eliminated.
 4330 1664 80B4     		push	{r7}
 4331              	.LCFI158:
 4332              		.cfi_def_cfa_offset 4
 4333              		.cfi_offset 7, -4
 4334 1666 85B0     		sub	sp, sp, #20
 4335              	.LCFI159:
 4336              		.cfi_def_cfa_offset 24
 4337 1668 00AF     		add	r7, sp, #0
 4338              	.LCFI160:
 4339              		.cfi_def_cfa_register 7
 4340 166a 7860     		str	r0, [r7, #4]
2701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4341              		.loc 1 2701 0
 4342 166c 4FF00003 		mov	r3, #0
 4343 1670 FB60     		str	r3, [r7, #12]
2702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4344              		.loc 1 2707 0
 4345 1672 7B68     		ldr	r3, [r7, #4]
 4346 1674 4FEA1313 		lsr	r3, r3, #4
 4347 1678 FB60     		str	r3, [r7, #12]
2708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4348              		.loc 1 2710 0
 4349 167a 0A4A     		ldr	r2, .L285
 4350 167c FB68     		ldr	r3, [r7, #12]
 4351 167e 4FEA0343 		lsl	r3, r3, #16
 4352 1682 4FEA1343 		lsr	r3, r3, #16
 4353 1686 43F08003 		orr	r3, r3, #128
 4354 168a 6FEA0301 		mvn	r1, r3
 4355 168e 054B     		ldr	r3, .L285
 4356 1690 DB68     		ldr	r3, [r3, #12]
 4357 1692 03F08003 		and	r3, r3, #128
 4358 1696 0B43     		orrs	r3, r3, r1
 4359 1698 D360     		str	r3, [r2, #12]
2711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4360              		.loc 1 2711 0
 4361 169a 07F11407 		add	r7, r7, #20
 4362 169e BD46     		mov	sp, r7
 4363 16a0 80BC     		pop	{r7}
 4364 16a2 7047     		bx	lr
 4365              	.L286:
 4366              		.align	2
 4367              	.L285:
 4368 16a4 00280040 		.word	1073752064
 4369              		.cfi_endproc
 4370              	.LFE164:
 4372              		.align	2
 4373              		.thumb
 4374              		.thumb_func
 4376              	RTC_ByteToBcd2:
 4377              	.LFB165:
2712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4378              		.loc 1 2723 0
 4379              		.cfi_startproc
 4380              		@ args = 0, pretend = 0, frame = 16
 4381              		@ frame_needed = 1, uses_anonymous_args = 0
 4382              		@ link register save eliminated.
 4383 16a8 80B4     		push	{r7}
 4384              	.LCFI161:
 4385              		.cfi_def_cfa_offset 4
 4386              		.cfi_offset 7, -4
 4387 16aa 85B0     		sub	sp, sp, #20
 4388              	.LCFI162:
 4389              		.cfi_def_cfa_offset 24
 4390 16ac 00AF     		add	r7, sp, #0
 4391              	.LCFI163:
 4392              		.cfi_def_cfa_register 7
 4393 16ae 0346     		mov	r3, r0
 4394 16b0 FB71     		strb	r3, [r7, #7]
2724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4395              		.loc 1 2724 0
 4396 16b2 4FF00003 		mov	r3, #0
 4397 16b6 FB73     		strb	r3, [r7, #15]
2725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4398              		.loc 1 2726 0
 4399 16b8 07E0     		b	.L288
 4400              	.L289:
2727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4401              		.loc 1 2728 0
 4402 16ba FB7B     		ldrb	r3, [r7, #15]
 4403 16bc 03F10103 		add	r3, r3, #1
 4404 16c0 FB73     		strb	r3, [r7, #15]
2729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4405              		.loc 1 2729 0
 4406 16c2 FB79     		ldrb	r3, [r7, #7]
 4407 16c4 A3F10A03 		sub	r3, r3, #10
 4408 16c8 FB71     		strb	r3, [r7, #7]
 4409              	.L288:
2726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4410              		.loc 1 2726 0 discriminator 1
 4411 16ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4412 16cc 092B     		cmp	r3, #9
 4413 16ce F4D8     		bhi	.L289
2730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4414              		.loc 1 2732 0
 4415 16d0 FB7B     		ldrb	r3, [r7, #15]
 4416 16d2 4FEA0313 		lsl	r3, r3, #4
 4417 16d6 DAB2     		uxtb	r2, r3
 4418 16d8 FB79     		ldrb	r3, [r7, #7]
 4419 16da 1343     		orrs	r3, r3, r2
 4420 16dc DBB2     		uxtb	r3, r3
2733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4421              		.loc 1 2733 0
 4422 16de 1846     		mov	r0, r3
 4423 16e0 07F11407 		add	r7, r7, #20
 4424 16e4 BD46     		mov	sp, r7
 4425 16e6 80BC     		pop	{r7}
 4426 16e8 7047     		bx	lr
 4427              		.cfi_endproc
 4428              	.LFE165:
 4430 16ea 00BF     		.align	2
 4431              		.thumb
 4432              		.thumb_func
 4434              	RTC_Bcd2ToByte:
 4435              	.LFB166:
2734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4436              		.loc 1 2741 0
 4437              		.cfi_startproc
 4438              		@ args = 0, pretend = 0, frame = 16
 4439              		@ frame_needed = 1, uses_anonymous_args = 0
 4440              		@ link register save eliminated.
 4441 16ec 80B4     		push	{r7}
 4442              	.LCFI164:
 4443              		.cfi_def_cfa_offset 4
 4444              		.cfi_offset 7, -4
 4445 16ee 85B0     		sub	sp, sp, #20
 4446              	.LCFI165:
 4447              		.cfi_def_cfa_offset 24
 4448 16f0 00AF     		add	r7, sp, #0
 4449              	.LCFI166:
 4450              		.cfi_def_cfa_register 7
 4451 16f2 0346     		mov	r3, r0
 4452 16f4 FB71     		strb	r3, [r7, #7]
2742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4453              		.loc 1 2742 0
 4454 16f6 4FF00003 		mov	r3, #0
 4455 16fa FB73     		strb	r3, [r7, #15]
2743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4456              		.loc 1 2743 0
 4457 16fc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4458 16fe 4FEA1313 		lsr	r3, r3, #4
 4459 1702 DBB2     		uxtb	r3, r3
 4460 1704 1A46     		mov	r2, r3
 4461 1706 4FEA8202 		lsl	r2, r2, #2
 4462 170a D318     		adds	r3, r2, r3
 4463 170c 4FEA4303 		lsl	r3, r3, #1
 4464 1710 FB73     		strb	r3, [r7, #15]
2744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4465              		.loc 1 2744 0
 4466 1712 FB79     		ldrb	r3, [r7, #7]
 4467 1714 03F00F03 		and	r3, r3, #15
 4468 1718 DAB2     		uxtb	r2, r3
 4469 171a FB7B     		ldrb	r3, [r7, #15]
 4470 171c D318     		adds	r3, r2, r3
 4471 171e DBB2     		uxtb	r3, r3
2745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4472              		.loc 1 2745 0
 4473 1720 1846     		mov	r0, r3
 4474 1722 07F11407 		add	r7, r7, #20
 4475 1726 BD46     		mov	sp, r7
 4476 1728 80BC     		pop	{r7}
 4477 172a 7047     		bx	lr
 4478              		.cfi_endproc
 4479              	.LFE166:
 4481              	.Letext0:
 4482              		.file 2 "/opt/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 4483              		.file 3 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Device/ST/STM
 4484              		.file 4 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/STM32F4xx_StdPeriph
 4485              		.file 5 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Include/core_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
     /tmp/ccz1FvFM.s:18     .text:00000000 $t
     /tmp/ccz1FvFM.s:23     .text:00000000 RTC_DeInit
     /tmp/ccz1FvFM.s:393    .text:0000020c RTC_EnterInitMode
     /tmp/ccz1FvFM.s:523    .text:000002a8 RTC_WaitForSynchro
     /tmp/ccz1FvFM.s:189    .text:00000118 $d
     /tmp/ccz1FvFM.s:194    .text:00000120 $t
     /tmp/ccz1FvFM.s:199    .text:00000120 RTC_Init
     /tmp/ccz1FvFM.s:487    .text:0000028c RTC_ExitInitMode
     /tmp/ccz1FvFM.s:286    .text:000001a4 $d
     /tmp/ccz1FvFM.s:290    .text:000001a8 $t
     /tmp/ccz1FvFM.s:295    .text:000001a8 RTC_StructInit
     /tmp/ccz1FvFM.s:338    .text:000001d4 RTC_WriteProtectionCmd
     /tmp/ccz1FvFM.s:384    .text:00000208 $d
     /tmp/ccz1FvFM.s:388    .text:0000020c $t
     /tmp/ccz1FvFM.s:478    .text:00000288 $d
     /tmp/ccz1FvFM.s:482    .text:0000028c $t
     /tmp/ccz1FvFM.s:514    .text:000002a4 $d
     /tmp/ccz1FvFM.s:518    .text:000002a8 $t
     /tmp/ccz1FvFM.s:611    .text:0000032c $d
     /tmp/ccz1FvFM.s:615    .text:00000330 $t
     /tmp/ccz1FvFM.s:620    .text:00000330 RTC_RefClockCmd
     /tmp/ccz1FvFM.s:699    .text:000003a0 $d
     /tmp/ccz1FvFM.s:703    .text:000003a4 $t
     /tmp/ccz1FvFM.s:708    .text:000003a4 RTC_BypassShadowCmd
     /tmp/ccz1FvFM.s:766    .text:000003f0 $d
     /tmp/ccz1FvFM.s:770    .text:000003f4 $t
     /tmp/ccz1FvFM.s:775    .text:000003f4 RTC_SetTime
     /tmp/ccz1FvFM.s:4434   .text:000016ec RTC_Bcd2ToByte
     /tmp/ccz1FvFM.s:4376   .text:000016a8 RTC_ByteToBcd2
     /tmp/ccz1FvFM.s:962    .text:00000528 $d
     /tmp/ccz1FvFM.s:966    .text:0000052c $t
     /tmp/ccz1FvFM.s:971    .text:0000052c RTC_TimeStructInit
     /tmp/ccz1FvFM.s:1018   .text:00000560 RTC_GetTime
     /tmp/ccz1FvFM.s:1113   .text:00000600 $d
     /tmp/ccz1FvFM.s:1117   .text:00000604 $t
     /tmp/ccz1FvFM.s:1122   .text:00000604 RTC_GetSubSecond
     /tmp/ccz1FvFM.s:1160   .text:00000628 $d
     /tmp/ccz1FvFM.s:1164   .text:0000062c $t
     /tmp/ccz1FvFM.s:1169   .text:0000062c RTC_SetDate
     /tmp/ccz1FvFM.s:1359   .text:00000768 $d
     /tmp/ccz1FvFM.s:1363   .text:0000076c $t
     /tmp/ccz1FvFM.s:1368   .text:0000076c RTC_DateStructInit
     /tmp/ccz1FvFM.s:1415   .text:000007a0 RTC_GetDate
     /tmp/ccz1FvFM.s:1510   .text:00000840 $d
     /tmp/ccz1FvFM.s:1514   .text:00000844 $t
     /tmp/ccz1FvFM.s:1519   .text:00000844 RTC_SetAlarm
     /tmp/ccz1FvFM.s:1730   .text:00000994 $d
     /tmp/ccz1FvFM.s:1734   .text:00000998 $t
     /tmp/ccz1FvFM.s:1739   .text:00000998 RTC_AlarmStructInit
     /tmp/ccz1FvFM.s:1798   .text:000009e4 RTC_GetAlarm
     /tmp/ccz1FvFM.s:1929   .text:00000ac4 $d
     /tmp/ccz1FvFM.s:1933   .text:00000ac8 $t
     /tmp/ccz1FvFM.s:1938   .text:00000ac8 RTC_AlarmCmd
     /tmp/ccz1FvFM.s:2051   .text:00000b78 $d
     /tmp/ccz1FvFM.s:2055   .text:00000b7c $t
     /tmp/ccz1FvFM.s:2060   .text:00000b7c RTC_AlarmSubSecondConfig
     /tmp/ccz1FvFM.s:2123   .text:00000bd0 $d
     /tmp/ccz1FvFM.s:2127   .text:00000bd4 $t
     /tmp/ccz1FvFM.s:2132   .text:00000bd4 RTC_GetAlarmSubSecond
     /tmp/ccz1FvFM.s:2183   .text:00000c18 $d
     /tmp/ccz1FvFM.s:2187   .text:00000c1c $t
     /tmp/ccz1FvFM.s:2192   .text:00000c1c RTC_WakeUpClockConfig
     /tmp/ccz1FvFM.s:2243   .text:00000c60 $d
     /tmp/ccz1FvFM.s:2247   .text:00000c64 $t
     /tmp/ccz1FvFM.s:2252   .text:00000c64 RTC_SetWakeUpCounter
     /tmp/ccz1FvFM.s:2294   .text:00000c94 $d
     /tmp/ccz1FvFM.s:2298   .text:00000c98 $t
     /tmp/ccz1FvFM.s:2303   .text:00000c98 RTC_GetWakeUpCounter
     /tmp/ccz1FvFM.s:2330   .text:00000cb0 $d
     /tmp/ccz1FvFM.s:2334   .text:00000cb4 $t
     /tmp/ccz1FvFM.s:2339   .text:00000cb4 RTC_WakeUpCmd
     /tmp/ccz1FvFM.s:2444   .text:00000d58 $d
     /tmp/ccz1FvFM.s:2448   .text:00000d5c $t
     /tmp/ccz1FvFM.s:2453   .text:00000d5c RTC_DayLightSavingConfig
     /tmp/ccz1FvFM.s:2507   .text:00000da4 $d
     /tmp/ccz1FvFM.s:2511   .text:00000da8 $t
     /tmp/ccz1FvFM.s:2516   .text:00000da8 RTC_GetStoreOperation
     /tmp/ccz1FvFM.s:2542   .text:00000dbc $d
     /tmp/ccz1FvFM.s:2546   .text:00000dc0 $t
     /tmp/ccz1FvFM.s:2551   .text:00000dc0 RTC_OutputConfig
     /tmp/ccz1FvFM.s:2605   .text:00000e08 $d
     /tmp/ccz1FvFM.s:2609   .text:00000e0c $t
     /tmp/ccz1FvFM.s:2614   .text:00000e0c RTC_CoarseCalibConfig
     /tmp/ccz1FvFM.s:2680   .text:00000e68 $d
     /tmp/ccz1FvFM.s:2684   .text:00000e6c $t
     /tmp/ccz1FvFM.s:2689   .text:00000e6c RTC_CoarseCalibCmd
     /tmp/ccz1FvFM.s:2768   .text:00000edc $d
     /tmp/ccz1FvFM.s:2772   .text:00000ee0 $t
     /tmp/ccz1FvFM.s:2777   .text:00000ee0 RTC_CalibOutputCmd
     /tmp/ccz1FvFM.s:2835   .text:00000f2c $d
     /tmp/ccz1FvFM.s:2839   .text:00000f30 $t
     /tmp/ccz1FvFM.s:2844   .text:00000f30 RTC_CalibOutputConfig
     /tmp/ccz1FvFM.s:2895   .text:00000f74 $d
     /tmp/ccz1FvFM.s:2899   .text:00000f78 $t
     /tmp/ccz1FvFM.s:2904   .text:00000f78 RTC_SmoothCalibConfig
     /tmp/ccz1FvFM.s:3001   .text:00001008 $d
     /tmp/ccz1FvFM.s:3005   .text:0000100c $t
     /tmp/ccz1FvFM.s:3010   .text:0000100c RTC_TimeStampCmd
     /tmp/ccz1FvFM.s:3081   .text:00001070 $d
     /tmp/ccz1FvFM.s:3085   .text:00001074 $t
     /tmp/ccz1FvFM.s:3090   .text:00001074 RTC_GetTimeStamp
     /tmp/ccz1FvFM.s:3246   .text:00001198 $d
     /tmp/ccz1FvFM.s:3250   .text:0000119c $t
     /tmp/ccz1FvFM.s:3255   .text:0000119c RTC_GetTimeStampSubSecond
     /tmp/ccz1FvFM.s:3280   .text:000011ac $d
     /tmp/ccz1FvFM.s:3284   .text:000011b0 $t
     /tmp/ccz1FvFM.s:3289   .text:000011b0 RTC_TamperTriggerConfig
     /tmp/ccz1FvFM.s:3340   .text:000011f0 $d
     /tmp/ccz1FvFM.s:3344   .text:000011f4 $t
     /tmp/ccz1FvFM.s:3349   .text:000011f4 RTC_TamperCmd
     /tmp/ccz1FvFM.s:3399   .text:00001230 $d
     /tmp/ccz1FvFM.s:3403   .text:00001234 $t
     /tmp/ccz1FvFM.s:3408   .text:00001234 RTC_TamperFilterConfig
     /tmp/ccz1FvFM.s:3447   .text:00001260 $d
     /tmp/ccz1FvFM.s:3451   .text:00001264 $t
     /tmp/ccz1FvFM.s:3456   .text:00001264 RTC_TamperSamplingFreqConfig
     /tmp/ccz1FvFM.s:3495   .text:00001290 $d
     /tmp/ccz1FvFM.s:3499   .text:00001294 $t
     /tmp/ccz1FvFM.s:3504   .text:00001294 RTC_TamperPinsPrechargeDuration
     /tmp/ccz1FvFM.s:3543   .text:000012c0 $d
     /tmp/ccz1FvFM.s:3547   .text:000012c4 $t
     /tmp/ccz1FvFM.s:3552   .text:000012c4 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccz1FvFM.s:3598   .text:000012f8 $d
     /tmp/ccz1FvFM.s:3602   .text:000012fc $t
     /tmp/ccz1FvFM.s:3607   .text:000012fc RTC_TamperPullUpCmd
     /tmp/ccz1FvFM.s:3653   .text:00001330 $d
     /tmp/ccz1FvFM.s:3657   .text:00001334 $t
     /tmp/ccz1FvFM.s:3662   .text:00001334 RTC_WriteBackupRegister
     /tmp/ccz1FvFM.s:3705   .text:00001364 $d
     /tmp/ccz1FvFM.s:3709   .text:00001368 $t
     /tmp/ccz1FvFM.s:3714   .text:00001368 RTC_ReadBackupRegister
     /tmp/ccz1FvFM.s:3756   .text:00001398 $d
     /tmp/ccz1FvFM.s:3760   .text:0000139c $t
     /tmp/ccz1FvFM.s:3765   .text:0000139c RTC_TamperPinSelection
     /tmp/ccz1FvFM.s:3804   .text:000013c8 $d
     /tmp/ccz1FvFM.s:3808   .text:000013cc $t
     /tmp/ccz1FvFM.s:3813   .text:000013cc RTC_TimeStampPinSelection
     /tmp/ccz1FvFM.s:3852   .text:000013f8 $d
     /tmp/ccz1FvFM.s:3856   .text:000013fc $t
     /tmp/ccz1FvFM.s:3861   .text:000013fc RTC_OutputTypeConfig
     /tmp/ccz1FvFM.s:3900   .text:00001428 $d
     /tmp/ccz1FvFM.s:3904   .text:0000142c $t
     /tmp/ccz1FvFM.s:3909   .text:0000142c RTC_SynchroShiftConfig
     /tmp/ccz1FvFM.s:4023   .text:000014dc $d
     /tmp/ccz1FvFM.s:4027   .text:000014e0 $t
     /tmp/ccz1FvFM.s:4032   .text:000014e0 RTC_ITConfig
     /tmp/ccz1FvFM.s:4113   .text:00001560 $d
     /tmp/ccz1FvFM.s:4117   .text:00001564 $t
     /tmp/ccz1FvFM.s:4122   .text:00001564 RTC_GetFlagStatus
     /tmp/ccz1FvFM.s:4178   .text:000015a8 $d
     /tmp/ccz1FvFM.s:4183   .text:000015b0 $t
     /tmp/ccz1FvFM.s:4188   .text:000015b0 RTC_ClearFlag
     /tmp/ccz1FvFM.s:4226   .text:000015e4 $d
     /tmp/ccz1FvFM.s:4230   .text:000015e8 $t
     /tmp/ccz1FvFM.s:4235   .text:000015e8 RTC_GetITStatus
     /tmp/ccz1FvFM.s:4314   .text:00001660 $d
     /tmp/ccz1FvFM.s:4318   .text:00001664 $t
     /tmp/ccz1FvFM.s:4323   .text:00001664 RTC_ClearITPendingBit
     /tmp/ccz1FvFM.s:4368   .text:000016a4 $d
     /tmp/ccz1FvFM.s:4372   .text:000016a8 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ee386580922180e5cad1057f989de60d
                           .group:00000000 wm4.stm32f4xx.h.54.6e1f0ee5c76cc1e53c8ea6d18297b5fd
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_adc.h.108.1710484bf41297b93f825b3b15cbdff8
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rng.h.31.1ec493d56b7a8e5a71238519cae6dea7
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stm32f4xx_rtc.h.133.164fac1a3524598ad8dc1934bac49883

NO UNDEFINED SYMBOLS
