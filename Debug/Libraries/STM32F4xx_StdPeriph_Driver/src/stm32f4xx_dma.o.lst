   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	DMA_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	DMA_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * You may not use this file except in compliance with the License.
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * You may obtain a copy of the License at:
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * See the License for the specific language governing permissions and
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * limitations under the License.
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
  26              		.loc 1 195 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  42              		.loc 1 200 0
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 1B68     		ldr	r3, [r3, #0]
  45 000c 23F00102 		bic	r2, r3, #1
  46 0010 7B68     		ldr	r3, [r7, #4]
  47 0012 1A60     		str	r2, [r3, #0]
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  48              		.loc 1 203 0
  49 0014 7B68     		ldr	r3, [r7, #4]
  50 0016 4FF00002 		mov	r2, #0
  51 001a 1A60     		str	r2, [r3, #0]
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  52              		.loc 1 206 0
  53 001c 7B68     		ldr	r3, [r7, #4]
  54 001e 4FF00002 		mov	r2, #0
  55 0022 5A60     		str	r2, [r3, #4]
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  56              		.loc 1 209 0
  57 0024 7B68     		ldr	r3, [r7, #4]
  58 0026 4FF00002 		mov	r2, #0
  59 002a 9A60     		str	r2, [r3, #8]
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  60              		.loc 1 212 0
  61 002c 7B68     		ldr	r3, [r7, #4]
  62 002e 4FF00002 		mov	r2, #0
  63 0032 DA60     		str	r2, [r3, #12]
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  64              		.loc 1 215 0
  65 0034 7B68     		ldr	r3, [r7, #4]
  66 0036 4FF00002 		mov	r2, #0
  67 003a 1A61     		str	r2, [r3, #16]
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  68              		.loc 1 218 0
  69 003c 7B68     		ldr	r3, [r7, #4]
  70 003e 4FF02102 		mov	r2, #33
  71 0042 5A61     		str	r2, [r3, #20]
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  72              		.loc 1 221 0
  73 0044 7A68     		ldr	r2, [r7, #4]
  74 0046 464B     		ldr	r3, .L18
  75 0048 9A42     		cmp	r2, r3
  76 004a 04D1     		bne	.L2
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
  77              		.loc 1 224 0
  78 004c 454B     		ldr	r3, .L18+4
  79 004e 4FF03D02 		mov	r2, #61
  80 0052 9A60     		str	r2, [r3, #8]
  81 0054 7FE0     		b	.L1
  82              	.L2:
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  83              		.loc 1 226 0
  84 0056 7A68     		ldr	r2, [r7, #4]
  85 0058 434B     		ldr	r3, .L18+8
  86 005a 9A42     		cmp	r2, r3
  87 005c 04D1     		bne	.L4
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
  88              		.loc 1 229 0
  89 005e 414B     		ldr	r3, .L18+4
  90 0060 4FF47462 		mov	r2, #3904
  91 0064 9A60     		str	r2, [r3, #8]
  92 0066 76E0     		b	.L1
  93              	.L4:
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
  94              		.loc 1 231 0
  95 0068 7A68     		ldr	r2, [r7, #4]
  96 006a 404B     		ldr	r3, .L18+12
  97 006c 9A42     		cmp	r2, r3
  98 006e 04D1     		bne	.L5
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
  99              		.loc 1 234 0
 100 0070 3C4B     		ldr	r3, .L18+4
 101 0072 4FF47412 		mov	r2, #3997696
 102 0076 9A60     		str	r2, [r3, #8]
 103 0078 6DE0     		b	.L1
 104              	.L5:
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 105              		.loc 1 236 0
 106 007a 7A68     		ldr	r2, [r7, #4]
 107 007c 3C4B     		ldr	r3, .L18+16
 108 007e 9A42     		cmp	r2, r3
 109 0080 04D1     		bne	.L6
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 110              		.loc 1 239 0
 111 0082 384B     		ldr	r3, .L18+4
 112 0084 4FF07462 		mov	r2, #255852544
 113 0088 9A60     		str	r2, [r3, #8]
 114 008a 64E0     		b	.L1
 115              	.L6:
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 116              		.loc 1 241 0
 117 008c 7A68     		ldr	r2, [r7, #4]
 118 008e 394B     		ldr	r3, .L18+20
 119 0090 9A42     		cmp	r2, r3
 120 0092 03D1     		bne	.L7
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 121              		.loc 1 244 0
 122 0094 334B     		ldr	r3, .L18+4
 123 0096 384A     		ldr	r2, .L18+24
 124 0098 DA60     		str	r2, [r3, #12]
 125 009a 5CE0     		b	.L1
 126              	.L7:
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 127              		.loc 1 246 0
 128 009c 7A68     		ldr	r2, [r7, #4]
 129 009e 374B     		ldr	r3, .L18+28
 130 00a0 9A42     		cmp	r2, r3
 131 00a2 03D1     		bne	.L8
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 132              		.loc 1 249 0
 133 00a4 2F4B     		ldr	r3, .L18+4
 134 00a6 364A     		ldr	r2, .L18+32
 135 00a8 DA60     		str	r2, [r3, #12]
 136 00aa 54E0     		b	.L1
 137              	.L8:
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 138              		.loc 1 251 0
 139 00ac 7A68     		ldr	r2, [r7, #4]
 140 00ae 354B     		ldr	r3, .L18+36
 141 00b0 9A42     		cmp	r2, r3
 142 00b2 03D1     		bne	.L9
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 143              		.loc 1 254 0
 144 00b4 2B4B     		ldr	r3, .L18+4
 145 00b6 344A     		ldr	r2, .L18+40
 146 00b8 DA60     		str	r2, [r3, #12]
 147 00ba 4CE0     		b	.L1
 148              	.L9:
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 149              		.loc 1 256 0
 150 00bc 7A68     		ldr	r2, [r7, #4]
 151 00be 334B     		ldr	r3, .L18+44
 152 00c0 9A42     		cmp	r2, r3
 153 00c2 04D1     		bne	.L10
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 154              		.loc 1 259 0
 155 00c4 274B     		ldr	r3, .L18+4
 156 00c6 4FF03D52 		mov	r2, #792723456
 157 00ca DA60     		str	r2, [r3, #12]
 158 00cc 43E0     		b	.L1
 159              	.L10:
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 160              		.loc 1 261 0
 161 00ce 7A68     		ldr	r2, [r7, #4]
 162 00d0 2F4B     		ldr	r3, .L18+48
 163 00d2 9A42     		cmp	r2, r3
 164 00d4 04D1     		bne	.L11
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 165              		.loc 1 264 0
 166 00d6 2F4B     		ldr	r3, .L18+52
 167 00d8 4FF03D02 		mov	r2, #61
 168 00dc 9A60     		str	r2, [r3, #8]
 169 00de 3AE0     		b	.L1
 170              	.L11:
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 171              		.loc 1 266 0
 172 00e0 7A68     		ldr	r2, [r7, #4]
 173 00e2 2D4B     		ldr	r3, .L18+56
 174 00e4 9A42     		cmp	r2, r3
 175 00e6 04D1     		bne	.L12
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 176              		.loc 1 269 0
 177 00e8 2A4B     		ldr	r3, .L18+52
 178 00ea 4FF47462 		mov	r2, #3904
 179 00ee 9A60     		str	r2, [r3, #8]
 180 00f0 31E0     		b	.L1
 181              	.L12:
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 182              		.loc 1 271 0
 183 00f2 7A68     		ldr	r2, [r7, #4]
 184 00f4 294B     		ldr	r3, .L18+60
 185 00f6 9A42     		cmp	r2, r3
 186 00f8 04D1     		bne	.L13
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 187              		.loc 1 274 0
 188 00fa 264B     		ldr	r3, .L18+52
 189 00fc 4FF47412 		mov	r2, #3997696
 190 0100 9A60     		str	r2, [r3, #8]
 191 0102 28E0     		b	.L1
 192              	.L13:
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 193              		.loc 1 276 0
 194 0104 7A68     		ldr	r2, [r7, #4]
 195 0106 264B     		ldr	r3, .L18+64
 196 0108 9A42     		cmp	r2, r3
 197 010a 04D1     		bne	.L14
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 198              		.loc 1 279 0
 199 010c 214B     		ldr	r3, .L18+52
 200 010e 4FF07462 		mov	r2, #255852544
 201 0112 9A60     		str	r2, [r3, #8]
 202 0114 1FE0     		b	.L1
 203              	.L14:
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 204              		.loc 1 281 0
 205 0116 7A68     		ldr	r2, [r7, #4]
 206 0118 224B     		ldr	r3, .L18+68
 207 011a 9A42     		cmp	r2, r3
 208 011c 03D1     		bne	.L15
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 209              		.loc 1 284 0
 210 011e 1D4B     		ldr	r3, .L18+52
 211 0120 154A     		ldr	r2, .L18+24
 212 0122 DA60     		str	r2, [r3, #12]
 213 0124 17E0     		b	.L1
 214              	.L15:
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 215              		.loc 1 286 0
 216 0126 7A68     		ldr	r2, [r7, #4]
 217 0128 1F4B     		ldr	r3, .L18+72
 218 012a 9A42     		cmp	r2, r3
 219 012c 03D1     		bne	.L16
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 220              		.loc 1 289 0
 221 012e 194B     		ldr	r3, .L18+52
 222 0130 134A     		ldr	r2, .L18+32
 223 0132 DA60     		str	r2, [r3, #12]
 224 0134 0FE0     		b	.L1
 225              	.L16:
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 226              		.loc 1 291 0
 227 0136 7A68     		ldr	r2, [r7, #4]
 228 0138 1C4B     		ldr	r3, .L18+76
 229 013a 9A42     		cmp	r2, r3
 230 013c 03D1     		bne	.L17
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 231              		.loc 1 294 0
 232 013e 154B     		ldr	r3, .L18+52
 233 0140 114A     		ldr	r2, .L18+40
 234 0142 DA60     		str	r2, [r3, #12]
 235 0144 07E0     		b	.L1
 236              	.L17:
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 237              		.loc 1 298 0
 238 0146 7A68     		ldr	r2, [r7, #4]
 239 0148 194B     		ldr	r3, .L18+80
 240 014a 9A42     		cmp	r2, r3
 241 014c 03D1     		bne	.L1
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 242              		.loc 1 301 0
 243 014e 114B     		ldr	r3, .L18+52
 244 0150 4FF03D52 		mov	r2, #792723456
 245 0154 DA60     		str	r2, [r3, #12]
 246              	.L1:
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 247              		.loc 1 304 0
 248 0156 07F10C07 		add	r7, r7, #12
 249 015a BD46     		mov	sp, r7
 250 015c 80BC     		pop	{r7}
 251 015e 7047     		bx	lr
 252              	.L19:
 253              		.align	2
 254              	.L18:
 255 0160 10600240 		.word	1073897488
 256 0164 00600240 		.word	1073897472
 257 0168 28600240 		.word	1073897512
 258 016c 40600240 		.word	1073897536
 259 0170 58600240 		.word	1073897560
 260 0174 70600240 		.word	1073897584
 261 0178 3D000020 		.word	536870973
 262 017c 88600240 		.word	1073897608
 263 0180 400F0020 		.word	536874816
 264 0184 A0600240 		.word	1073897632
 265 0188 00003D20 		.word	540868608
 266 018c B8600240 		.word	1073897656
 267 0190 10640240 		.word	1073898512
 268 0194 00640240 		.word	1073898496
 269 0198 28640240 		.word	1073898536
 270 019c 40640240 		.word	1073898560
 271 01a0 58640240 		.word	1073898584
 272 01a4 70640240 		.word	1073898608
 273 01a8 88640240 		.word	1073898632
 274 01ac A0640240 		.word	1073898656
 275 01b0 B8640240 		.word	1073898680
 276              		.cfi_endproc
 277              	.LFE110:
 279              		.align	2
 280              		.global	DMA_Init
 281              		.thumb
 282              		.thumb_func
 284              	DMA_Init:
 285              	.LFB111:
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 286              		.loc 1 318 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 16
 289              		@ frame_needed = 1, uses_anonymous_args = 0
 290              		@ link register save eliminated.
 291 01b4 80B4     		push	{r7}
 292              	.LCFI3:
 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 7, -4
 295 01b6 85B0     		sub	sp, sp, #20
 296              	.LCFI4:
 297              		.cfi_def_cfa_offset 24
 298 01b8 00AF     		add	r7, sp, #0
 299              	.LCFI5:
 300              		.cfi_def_cfa_register 7
 301 01ba 7860     		str	r0, [r7, #4]
 302 01bc 3960     		str	r1, [r7, #0]
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 303              		.loc 1 319 0
 304 01be 4FF00003 		mov	r3, #0
 305 01c2 FB60     		str	r3, [r7, #12]
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 306              		.loc 1 339 0
 307 01c4 7B68     		ldr	r3, [r7, #4]
 308 01c6 1B68     		ldr	r3, [r3, #0]
 309 01c8 FB60     		str	r3, [r7, #12]
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 310              		.loc 1 342 0
 311 01ca FA68     		ldr	r2, [r7, #12]
 312 01cc 244B     		ldr	r3, .L21
 313 01ce 1340     		ands	r3, r3, r2
 314 01d0 FB60     		str	r3, [r7, #12]
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 315              		.loc 1 358 0
 316 01d2 3B68     		ldr	r3, [r7, #0]
 317 01d4 1A68     		ldr	r2, [r3, #0]
 318 01d6 3B68     		ldr	r3, [r7, #0]
 319 01d8 DB68     		ldr	r3, [r3, #12]
 320 01da 1A43     		orrs	r2, r2, r3
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 321              		.loc 1 359 0
 322 01dc 3B68     		ldr	r3, [r7, #0]
 323 01de 5B69     		ldr	r3, [r3, #20]
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 324              		.loc 1 358 0
 325 01e0 1A43     		orrs	r2, r2, r3
 326              		.loc 1 359 0
 327 01e2 3B68     		ldr	r3, [r7, #0]
 328 01e4 9B69     		ldr	r3, [r3, #24]
 329 01e6 1A43     		orrs	r2, r2, r3
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 330              		.loc 1 360 0
 331 01e8 3B68     		ldr	r3, [r7, #0]
 332 01ea DB69     		ldr	r3, [r3, #28]
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 333              		.loc 1 359 0
 334 01ec 1A43     		orrs	r2, r2, r3
 335              		.loc 1 360 0
 336 01ee 3B68     		ldr	r3, [r7, #0]
 337 01f0 1B6A     		ldr	r3, [r3, #32]
 338 01f2 1A43     		orrs	r2, r2, r3
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 339              		.loc 1 361 0
 340 01f4 3B68     		ldr	r3, [r7, #0]
 341 01f6 5B6A     		ldr	r3, [r3, #36]
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 342              		.loc 1 360 0
 343 01f8 1A43     		orrs	r2, r2, r3
 344              		.loc 1 361 0
 345 01fa 3B68     		ldr	r3, [r7, #0]
 346 01fc 9B6A     		ldr	r3, [r3, #40]
 347 01fe 1A43     		orrs	r2, r2, r3
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 348              		.loc 1 362 0
 349 0200 3B68     		ldr	r3, [r7, #0]
 350 0202 5B6B     		ldr	r3, [r3, #52]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 351              		.loc 1 361 0
 352 0204 1A43     		orrs	r2, r2, r3
 353              		.loc 1 362 0
 354 0206 3B68     		ldr	r3, [r7, #0]
 355 0208 9B6B     		ldr	r3, [r3, #56]
 356 020a 1343     		orrs	r3, r3, r2
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 357              		.loc 1 358 0
 358 020c FA68     		ldr	r2, [r7, #12]
 359 020e 1343     		orrs	r3, r3, r2
 360 0210 FB60     		str	r3, [r7, #12]
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 361              		.loc 1 365 0
 362 0212 7B68     		ldr	r3, [r7, #4]
 363 0214 FA68     		ldr	r2, [r7, #12]
 364 0216 1A60     		str	r2, [r3, #0]
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 365              		.loc 1 369 0
 366 0218 7B68     		ldr	r3, [r7, #4]
 367 021a 5B69     		ldr	r3, [r3, #20]
 368 021c FB60     		str	r3, [r7, #12]
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 369              		.loc 1 372 0
 370 021e FB68     		ldr	r3, [r7, #12]
 371 0220 23F00703 		bic	r3, r3, #7
 372 0224 FB60     		str	r3, [r7, #12]
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 373              		.loc 1 377 0
 374 0226 3B68     		ldr	r3, [r7, #0]
 375 0228 DA6A     		ldr	r2, [r3, #44]
 376 022a 3B68     		ldr	r3, [r7, #0]
 377 022c 1B6B     		ldr	r3, [r3, #48]
 378 022e 1343     		orrs	r3, r3, r2
 379 0230 FA68     		ldr	r2, [r7, #12]
 380 0232 1343     		orrs	r3, r3, r2
 381 0234 FB60     		str	r3, [r7, #12]
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 382              		.loc 1 380 0
 383 0236 7B68     		ldr	r3, [r7, #4]
 384 0238 FA68     		ldr	r2, [r7, #12]
 385 023a 5A61     		str	r2, [r3, #20]
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 386              		.loc 1 384 0
 387 023c 3B68     		ldr	r3, [r7, #0]
 388 023e 1A69     		ldr	r2, [r3, #16]
 389 0240 7B68     		ldr	r3, [r7, #4]
 390 0242 5A60     		str	r2, [r3, #4]
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 391              		.loc 1 388 0
 392 0244 3B68     		ldr	r3, [r7, #0]
 393 0246 5A68     		ldr	r2, [r3, #4]
 394 0248 7B68     		ldr	r3, [r7, #4]
 395 024a 9A60     		str	r2, [r3, #8]
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 396              		.loc 1 392 0
 397 024c 3B68     		ldr	r3, [r7, #0]
 398 024e 9A68     		ldr	r2, [r3, #8]
 399 0250 7B68     		ldr	r3, [r7, #4]
 400 0252 DA60     		str	r2, [r3, #12]
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 401              		.loc 1 393 0
 402 0254 07F11407 		add	r7, r7, #20
 403 0258 BD46     		mov	sp, r7
 404 025a 80BC     		pop	{r7}
 405 025c 7047     		bx	lr
 406              	.L22:
 407 025e 00BF     		.align	2
 408              	.L21:
 409 0260 3F801CF0 		.word	-266567617
 410              		.cfi_endproc
 411              	.LFE111:
 413              		.align	2
 414              		.global	DMA_StructInit
 415              		.thumb
 416              		.thumb_func
 418              	DMA_StructInit:
 419              	.LFB112:
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 420              		.loc 1 402 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 8
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 425 0264 80B4     		push	{r7}
 426              	.LCFI6:
 427              		.cfi_def_cfa_offset 4
 428              		.cfi_offset 7, -4
 429 0266 83B0     		sub	sp, sp, #12
 430              	.LCFI7:
 431              		.cfi_def_cfa_offset 16
 432 0268 00AF     		add	r7, sp, #0
 433              	.LCFI8:
 434              		.cfi_def_cfa_register 7
 435 026a 7860     		str	r0, [r7, #4]
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 436              		.loc 1 405 0
 437 026c 7B68     		ldr	r3, [r7, #4]
 438 026e 4FF00002 		mov	r2, #0
 439 0272 1A60     		str	r2, [r3, #0]
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 440              		.loc 1 408 0
 441 0274 7B68     		ldr	r3, [r7, #4]
 442 0276 4FF00002 		mov	r2, #0
 443 027a 5A60     		str	r2, [r3, #4]
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 444              		.loc 1 411 0
 445 027c 7B68     		ldr	r3, [r7, #4]
 446 027e 4FF00002 		mov	r2, #0
 447 0282 9A60     		str	r2, [r3, #8]
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 448              		.loc 1 414 0
 449 0284 7B68     		ldr	r3, [r7, #4]
 450 0286 4FF00002 		mov	r2, #0
 451 028a DA60     		str	r2, [r3, #12]
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 452              		.loc 1 417 0
 453 028c 7B68     		ldr	r3, [r7, #4]
 454 028e 4FF00002 		mov	r2, #0
 455 0292 1A61     		str	r2, [r3, #16]
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 456              		.loc 1 420 0
 457 0294 7B68     		ldr	r3, [r7, #4]
 458 0296 4FF00002 		mov	r2, #0
 459 029a 5A61     		str	r2, [r3, #20]
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 460              		.loc 1 423 0
 461 029c 7B68     		ldr	r3, [r7, #4]
 462 029e 4FF00002 		mov	r2, #0
 463 02a2 9A61     		str	r2, [r3, #24]
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 464              		.loc 1 426 0
 465 02a4 7B68     		ldr	r3, [r7, #4]
 466 02a6 4FF00002 		mov	r2, #0
 467 02aa DA61     		str	r2, [r3, #28]
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 468              		.loc 1 429 0
 469 02ac 7B68     		ldr	r3, [r7, #4]
 470 02ae 4FF00002 		mov	r2, #0
 471 02b2 1A62     		str	r2, [r3, #32]
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 472              		.loc 1 432 0
 473 02b4 7B68     		ldr	r3, [r7, #4]
 474 02b6 4FF00002 		mov	r2, #0
 475 02ba 5A62     		str	r2, [r3, #36]
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 476              		.loc 1 435 0
 477 02bc 7B68     		ldr	r3, [r7, #4]
 478 02be 4FF00002 		mov	r2, #0
 479 02c2 9A62     		str	r2, [r3, #40]
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 480              		.loc 1 438 0
 481 02c4 7B68     		ldr	r3, [r7, #4]
 482 02c6 4FF00002 		mov	r2, #0
 483 02ca DA62     		str	r2, [r3, #44]
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 484              		.loc 1 441 0
 485 02cc 7B68     		ldr	r3, [r7, #4]
 486 02ce 4FF00002 		mov	r2, #0
 487 02d2 1A63     		str	r2, [r3, #48]
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 488              		.loc 1 444 0
 489 02d4 7B68     		ldr	r3, [r7, #4]
 490 02d6 4FF00002 		mov	r2, #0
 491 02da 5A63     		str	r2, [r3, #52]
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 492              		.loc 1 447 0
 493 02dc 7B68     		ldr	r3, [r7, #4]
 494 02de 4FF00002 		mov	r2, #0
 495 02e2 9A63     		str	r2, [r3, #56]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 496              		.loc 1 448 0
 497 02e4 07F10C07 		add	r7, r7, #12
 498 02e8 BD46     		mov	sp, r7
 499 02ea 80BC     		pop	{r7}
 500 02ec 7047     		bx	lr
 501              		.cfi_endproc
 502              	.LFE112:
 504 02ee 00BF     		.align	2
 505              		.global	DMA_Cmd
 506              		.thumb
 507              		.thumb_func
 509              	DMA_Cmd:
 510              	.LFB113:
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 511              		.loc 1 477 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 8
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 516 02f0 80B4     		push	{r7}
 517              	.LCFI9:
 518              		.cfi_def_cfa_offset 4
 519              		.cfi_offset 7, -4
 520 02f2 83B0     		sub	sp, sp, #12
 521              	.LCFI10:
 522              		.cfi_def_cfa_offset 16
 523 02f4 00AF     		add	r7, sp, #0
 524              	.LCFI11:
 525              		.cfi_def_cfa_register 7
 526 02f6 7860     		str	r0, [r7, #4]
 527 02f8 0B46     		mov	r3, r1
 528 02fa FB70     		strb	r3, [r7, #3]
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 529              		.loc 1 482 0
 530 02fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 531 02fe 002B     		cmp	r3, #0
 532 0300 06D0     		beq	.L25
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 533              		.loc 1 485 0
 534 0302 7B68     		ldr	r3, [r7, #4]
 535 0304 1B68     		ldr	r3, [r3, #0]
 536 0306 43F00102 		orr	r2, r3, #1
 537 030a 7B68     		ldr	r3, [r7, #4]
 538 030c 1A60     		str	r2, [r3, #0]
 539 030e 05E0     		b	.L24
 540              	.L25:
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 541              		.loc 1 490 0
 542 0310 7B68     		ldr	r3, [r7, #4]
 543 0312 1B68     		ldr	r3, [r3, #0]
 544 0314 23F00102 		bic	r2, r3, #1
 545 0318 7B68     		ldr	r3, [r7, #4]
 546 031a 1A60     		str	r2, [r3, #0]
 547              	.L24:
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 548              		.loc 1 492 0
 549 031c 07F10C07 		add	r7, r7, #12
 550 0320 BD46     		mov	sp, r7
 551 0322 80BC     		pop	{r7}
 552 0324 7047     		bx	lr
 553              		.cfi_endproc
 554              	.LFE113:
 556 0326 00BF     		.align	2
 557              		.global	DMA_PeriphIncOffsetSizeConfig
 558              		.thumb
 559              		.thumb_func
 561              	DMA_PeriphIncOffsetSizeConfig:
 562              	.LFB114:
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 563              		.loc 1 513 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 8
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568 0328 80B4     		push	{r7}
 569              	.LCFI12:
 570              		.cfi_def_cfa_offset 4
 571              		.cfi_offset 7, -4
 572 032a 83B0     		sub	sp, sp, #12
 573              	.LCFI13:
 574              		.cfi_def_cfa_offset 16
 575 032c 00AF     		add	r7, sp, #0
 576              	.LCFI14:
 577              		.cfi_def_cfa_register 7
 578 032e 7860     		str	r0, [r7, #4]
 579 0330 3960     		str	r1, [r7, #0]
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 580              		.loc 1 519 0
 581 0332 3B68     		ldr	r3, [r7, #0]
 582 0334 002B     		cmp	r3, #0
 583 0336 06D0     		beq	.L28
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 584              		.loc 1 522 0
 585 0338 7B68     		ldr	r3, [r7, #4]
 586 033a 1B68     		ldr	r3, [r3, #0]
 587 033c 43F40042 		orr	r2, r3, #32768
 588 0340 7B68     		ldr	r3, [r7, #4]
 589 0342 1A60     		str	r2, [r3, #0]
 590 0344 05E0     		b	.L27
 591              	.L28:
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 592              		.loc 1 527 0
 593 0346 7B68     		ldr	r3, [r7, #4]
 594 0348 1B68     		ldr	r3, [r3, #0]
 595 034a 23F40042 		bic	r2, r3, #32768
 596 034e 7B68     		ldr	r3, [r7, #4]
 597 0350 1A60     		str	r2, [r3, #0]
 598              	.L27:
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 599              		.loc 1 529 0
 600 0352 07F10C07 		add	r7, r7, #12
 601 0356 BD46     		mov	sp, r7
 602 0358 80BC     		pop	{r7}
 603 035a 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE114:
 607              		.align	2
 608              		.global	DMA_FlowControllerConfig
 609              		.thumb
 610              		.thumb_func
 612              	DMA_FlowControllerConfig:
 613              	.LFB115:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 614              		.loc 1 549 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 8
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619 035c 80B4     		push	{r7}
 620              	.LCFI15:
 621              		.cfi_def_cfa_offset 4
 622              		.cfi_offset 7, -4
 623 035e 83B0     		sub	sp, sp, #12
 624              	.LCFI16:
 625              		.cfi_def_cfa_offset 16
 626 0360 00AF     		add	r7, sp, #0
 627              	.LCFI17:
 628              		.cfi_def_cfa_register 7
 629 0362 7860     		str	r0, [r7, #4]
 630 0364 3960     		str	r1, [r7, #0]
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 631              		.loc 1 555 0
 632 0366 3B68     		ldr	r3, [r7, #0]
 633 0368 002B     		cmp	r3, #0
 634 036a 06D0     		beq	.L31
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 635              		.loc 1 558 0
 636 036c 7B68     		ldr	r3, [r7, #4]
 637 036e 1B68     		ldr	r3, [r3, #0]
 638 0370 43F02002 		orr	r2, r3, #32
 639 0374 7B68     		ldr	r3, [r7, #4]
 640 0376 1A60     		str	r2, [r3, #0]
 641 0378 05E0     		b	.L30
 642              	.L31:
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 643              		.loc 1 563 0
 644 037a 7B68     		ldr	r3, [r7, #4]
 645 037c 1B68     		ldr	r3, [r3, #0]
 646 037e 23F02002 		bic	r2, r3, #32
 647 0382 7B68     		ldr	r3, [r7, #4]
 648 0384 1A60     		str	r2, [r3, #0]
 649              	.L30:
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 650              		.loc 1 565 0
 651 0386 07F10C07 		add	r7, r7, #12
 652 038a BD46     		mov	sp, r7
 653 038c 80BC     		pop	{r7}
 654 038e 7047     		bx	lr
 655              		.cfi_endproc
 656              	.LFE115:
 658              		.align	2
 659              		.global	DMA_SetCurrDataCounter
 660              		.thumb
 661              		.thumb_func
 663              	DMA_SetCurrDataCounter:
 664              	.LFB116:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 665              		.loc 1 633 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 8
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670 0390 80B4     		push	{r7}
 671              	.LCFI18:
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 7, -4
 674 0392 83B0     		sub	sp, sp, #12
 675              	.LCFI19:
 676              		.cfi_def_cfa_offset 16
 677 0394 00AF     		add	r7, sp, #0
 678              	.LCFI20:
 679              		.cfi_def_cfa_register 7
 680 0396 7860     		str	r0, [r7, #4]
 681 0398 0B46     		mov	r3, r1
 682 039a 7B80     		strh	r3, [r7, #2]	@ movhi
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 683              		.loc 1 638 0
 684 039c 7A88     		ldrh	r2, [r7, #2]
 685 039e 7B68     		ldr	r3, [r7, #4]
 686 03a0 5A60     		str	r2, [r3, #4]
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 687              		.loc 1 639 0
 688 03a2 07F10C07 		add	r7, r7, #12
 689 03a6 BD46     		mov	sp, r7
 690 03a8 80BC     		pop	{r7}
 691 03aa 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE116:
 695              		.align	2
 696              		.global	DMA_GetCurrDataCounter
 697              		.thumb
 698              		.thumb_func
 700              	DMA_GetCurrDataCounter:
 701              	.LFB117:
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 702              		.loc 1 648 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 8
 705              		@ frame_needed = 1, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 707 03ac 80B4     		push	{r7}
 708              	.LCFI21:
 709              		.cfi_def_cfa_offset 4
 710              		.cfi_offset 7, -4
 711 03ae 83B0     		sub	sp, sp, #12
 712              	.LCFI22:
 713              		.cfi_def_cfa_offset 16
 714 03b0 00AF     		add	r7, sp, #0
 715              	.LCFI23:
 716              		.cfi_def_cfa_register 7
 717 03b2 7860     		str	r0, [r7, #4]
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 718              		.loc 1 653 0
 719 03b4 7B68     		ldr	r3, [r7, #4]
 720 03b6 5B68     		ldr	r3, [r3, #4]
 721 03b8 9BB2     		uxth	r3, r3
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 722              		.loc 1 654 0
 723 03ba 1846     		mov	r0, r3
 724 03bc 07F10C07 		add	r7, r7, #12
 725 03c0 BD46     		mov	sp, r7
 726 03c2 80BC     		pop	{r7}
 727 03c4 7047     		bx	lr
 728              		.cfi_endproc
 729              	.LFE117:
 731 03c6 00BF     		.align	2
 732              		.global	DMA_DoubleBufferModeConfig
 733              		.thumb
 734              		.thumb_func
 736              	DMA_DoubleBufferModeConfig:
 737              	.LFB118:
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 738              		.loc 1 726 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 16
 741              		@ frame_needed = 1, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743 03c8 80B4     		push	{r7}
 744              	.LCFI24:
 745              		.cfi_def_cfa_offset 4
 746              		.cfi_offset 7, -4
 747 03ca 85B0     		sub	sp, sp, #20
 748              	.LCFI25:
 749              		.cfi_def_cfa_offset 24
 750 03cc 00AF     		add	r7, sp, #0
 751              	.LCFI26:
 752              		.cfi_def_cfa_register 7
 753 03ce F860     		str	r0, [r7, #12]
 754 03d0 B960     		str	r1, [r7, #8]
 755 03d2 7A60     		str	r2, [r7, #4]
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 756              		.loc 1 731 0
 757 03d4 7B68     		ldr	r3, [r7, #4]
 758 03d6 002B     		cmp	r3, #0
 759 03d8 06D0     		beq	.L37
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 760              		.loc 1 734 0
 761 03da FB68     		ldr	r3, [r7, #12]
 762 03dc 1B68     		ldr	r3, [r3, #0]
 763 03de 43F40022 		orr	r2, r3, #524288
 764 03e2 FB68     		ldr	r3, [r7, #12]
 765 03e4 1A60     		str	r2, [r3, #0]
 766 03e6 05E0     		b	.L38
 767              	.L37:
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 768              		.loc 1 739 0
 769 03e8 FB68     		ldr	r3, [r7, #12]
 770 03ea 1B68     		ldr	r3, [r3, #0]
 771 03ec 23F40022 		bic	r2, r3, #524288
 772 03f0 FB68     		ldr	r3, [r7, #12]
 773 03f2 1A60     		str	r2, [r3, #0]
 774              	.L38:
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 775              		.loc 1 743 0
 776 03f4 FB68     		ldr	r3, [r7, #12]
 777 03f6 BA68     		ldr	r2, [r7, #8]
 778 03f8 1A61     		str	r2, [r3, #16]
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 779              		.loc 1 744 0
 780 03fa 07F11407 		add	r7, r7, #20
 781 03fe BD46     		mov	sp, r7
 782 0400 80BC     		pop	{r7}
 783 0402 7047     		bx	lr
 784              		.cfi_endproc
 785              	.LFE118:
 787              		.align	2
 788              		.global	DMA_DoubleBufferModeCmd
 789              		.thumb
 790              		.thumb_func
 792              	DMA_DoubleBufferModeCmd:
 793              	.LFB119:
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 794              		.loc 1 756 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 8
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798              		@ link register save eliminated.
 799 0404 80B4     		push	{r7}
 800              	.LCFI27:
 801              		.cfi_def_cfa_offset 4
 802              		.cfi_offset 7, -4
 803 0406 83B0     		sub	sp, sp, #12
 804              	.LCFI28:
 805              		.cfi_def_cfa_offset 16
 806 0408 00AF     		add	r7, sp, #0
 807              	.LCFI29:
 808              		.cfi_def_cfa_register 7
 809 040a 7860     		str	r0, [r7, #4]
 810 040c 0B46     		mov	r3, r1
 811 040e FB70     		strb	r3, [r7, #3]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 812              		.loc 1 762 0
 813 0410 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 814 0412 002B     		cmp	r3, #0
 815 0414 06D0     		beq	.L40
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 816              		.loc 1 765 0
 817 0416 7B68     		ldr	r3, [r7, #4]
 818 0418 1B68     		ldr	r3, [r3, #0]
 819 041a 43F48022 		orr	r2, r3, #262144
 820 041e 7B68     		ldr	r3, [r7, #4]
 821 0420 1A60     		str	r2, [r3, #0]
 822 0422 05E0     		b	.L39
 823              	.L40:
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 824              		.loc 1 770 0
 825 0424 7B68     		ldr	r3, [r7, #4]
 826 0426 1B68     		ldr	r3, [r3, #0]
 827 0428 23F48022 		bic	r2, r3, #262144
 828 042c 7B68     		ldr	r3, [r7, #4]
 829 042e 1A60     		str	r2, [r3, #0]
 830              	.L39:
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 831              		.loc 1 772 0
 832 0430 07F10C07 		add	r7, r7, #12
 833 0434 BD46     		mov	sp, r7
 834 0436 80BC     		pop	{r7}
 835 0438 7047     		bx	lr
 836              		.cfi_endproc
 837              	.LFE119:
 839 043a 00BF     		.align	2
 840              		.global	DMA_MemoryTargetConfig
 841              		.thumb
 842              		.thumb_func
 844              	DMA_MemoryTargetConfig:
 845              	.LFB120:
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 846              		.loc 1 798 0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 16
 849              		@ frame_needed = 1, uses_anonymous_args = 0
 850              		@ link register save eliminated.
 851 043c 80B4     		push	{r7}
 852              	.LCFI30:
 853              		.cfi_def_cfa_offset 4
 854              		.cfi_offset 7, -4
 855 043e 85B0     		sub	sp, sp, #20
 856              	.LCFI31:
 857              		.cfi_def_cfa_offset 24
 858 0440 00AF     		add	r7, sp, #0
 859              	.LCFI32:
 860              		.cfi_def_cfa_register 7
 861 0442 F860     		str	r0, [r7, #12]
 862 0444 B960     		str	r1, [r7, #8]
 863 0446 7A60     		str	r2, [r7, #4]
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 864              		.loc 1 804 0
 865 0448 7B68     		ldr	r3, [r7, #4]
 866 044a 002B     		cmp	r3, #0
 867 044c 03D0     		beq	.L43
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 868              		.loc 1 807 0
 869 044e FB68     		ldr	r3, [r7, #12]
 870 0450 BA68     		ldr	r2, [r7, #8]
 871 0452 1A61     		str	r2, [r3, #16]
 872 0454 02E0     		b	.L42
 873              	.L43:
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 874              		.loc 1 812 0
 875 0456 FB68     		ldr	r3, [r7, #12]
 876 0458 BA68     		ldr	r2, [r7, #8]
 877 045a DA60     		str	r2, [r3, #12]
 878              	.L42:
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 879              		.loc 1 814 0
 880 045c 07F11407 		add	r7, r7, #20
 881 0460 BD46     		mov	sp, r7
 882 0462 80BC     		pop	{r7}
 883 0464 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE120:
 887 0466 00BF     		.align	2
 888              		.global	DMA_GetCurrentMemoryTarget
 889              		.thumb
 890              		.thumb_func
 892              	DMA_GetCurrentMemoryTarget:
 893              	.LFB121:
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 894              		.loc 1 823 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 16
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898              		@ link register save eliminated.
 899 0468 80B4     		push	{r7}
 900              	.LCFI33:
 901              		.cfi_def_cfa_offset 4
 902              		.cfi_offset 7, -4
 903 046a 85B0     		sub	sp, sp, #20
 904              	.LCFI34:
 905              		.cfi_def_cfa_offset 24
 906 046c 00AF     		add	r7, sp, #0
 907              	.LCFI35:
 908              		.cfi_def_cfa_register 7
 909 046e 7860     		str	r0, [r7, #4]
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 910              		.loc 1 824 0
 911 0470 4FF00003 		mov	r3, #0
 912 0474 FB60     		str	r3, [r7, #12]
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 913              		.loc 1 830 0
 914 0476 7B68     		ldr	r3, [r7, #4]
 915 0478 1B68     		ldr	r3, [r3, #0]
 916 047a 03F40023 		and	r3, r3, #524288
 917 047e 002B     		cmp	r3, #0
 918 0480 03D0     		beq	.L46
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 919              		.loc 1 833 0
 920 0482 4FF00103 		mov	r3, #1
 921 0486 FB60     		str	r3, [r7, #12]
 922 0488 02E0     		b	.L47
 923              	.L46:
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 924              		.loc 1 838 0
 925 048a 4FF00003 		mov	r3, #0
 926 048e FB60     		str	r3, [r7, #12]
 927              	.L47:
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 928              		.loc 1 840 0
 929 0490 FB68     		ldr	r3, [r7, #12]
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 930              		.loc 1 841 0
 931 0492 1846     		mov	r0, r3
 932 0494 07F11407 		add	r7, r7, #20
 933 0498 BD46     		mov	sp, r7
 934 049a 80BC     		pop	{r7}
 935 049c 7047     		bx	lr
 936              		.cfi_endproc
 937              	.LFE121:
 939 049e 00BF     		.align	2
 940              		.global	DMA_GetCmdStatus
 941              		.thumb
 942              		.thumb_func
 944              	DMA_GetCmdStatus:
 945              	.LFB122:
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 946              		.loc 1 932 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 16
 949              		@ frame_needed = 1, uses_anonymous_args = 0
 950              		@ link register save eliminated.
 951 04a0 80B4     		push	{r7}
 952              	.LCFI36:
 953              		.cfi_def_cfa_offset 4
 954              		.cfi_offset 7, -4
 955 04a2 85B0     		sub	sp, sp, #20
 956              	.LCFI37:
 957              		.cfi_def_cfa_offset 24
 958 04a4 00AF     		add	r7, sp, #0
 959              	.LCFI38:
 960              		.cfi_def_cfa_register 7
 961 04a6 7860     		str	r0, [r7, #4]
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 962              		.loc 1 933 0
 963 04a8 4FF00003 		mov	r3, #0
 964 04ac FB73     		strb	r3, [r7, #15]
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 965              		.loc 1 938 0
 966 04ae 7B68     		ldr	r3, [r7, #4]
 967 04b0 1B68     		ldr	r3, [r3, #0]
 968 04b2 03F00103 		and	r3, r3, #1
 969 04b6 002B     		cmp	r3, #0
 970 04b8 03D0     		beq	.L50
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 971              		.loc 1 941 0
 972 04ba 4FF00103 		mov	r3, #1
 973 04be FB73     		strb	r3, [r7, #15]
 974 04c0 02E0     		b	.L51
 975              	.L50:
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 976              		.loc 1 947 0
 977 04c2 4FF00003 		mov	r3, #0
 978 04c6 FB73     		strb	r3, [r7, #15]
 979              	.L51:
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 980              		.loc 1 949 0
 981 04c8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 982              		.loc 1 950 0
 983 04ca 1846     		mov	r0, r3
 984 04cc 07F11407 		add	r7, r7, #20
 985 04d0 BD46     		mov	sp, r7
 986 04d2 80BC     		pop	{r7}
 987 04d4 7047     		bx	lr
 988              		.cfi_endproc
 989              	.LFE122:
 991 04d6 00BF     		.align	2
 992              		.global	DMA_GetFIFOStatus
 993              		.thumb
 994              		.thumb_func
 996              	DMA_GetFIFOStatus:
 997              	.LFB123:
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 998              		.loc 1 966 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 16
 1001              		@ frame_needed = 1, uses_anonymous_args = 0
 1002              		@ link register save eliminated.
 1003 04d8 80B4     		push	{r7}
 1004              	.LCFI39:
 1005              		.cfi_def_cfa_offset 4
 1006              		.cfi_offset 7, -4
 1007 04da 85B0     		sub	sp, sp, #20
 1008              	.LCFI40:
 1009              		.cfi_def_cfa_offset 24
 1010 04dc 00AF     		add	r7, sp, #0
 1011              	.LCFI41:
 1012              		.cfi_def_cfa_register 7
 1013 04de 7860     		str	r0, [r7, #4]
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1014              		.loc 1 967 0
 1015 04e0 4FF00003 		mov	r3, #0
 1016 04e4 FB60     		str	r3, [r7, #12]
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 1017              		.loc 1 973 0
 1018 04e6 7B68     		ldr	r3, [r7, #4]
 1019 04e8 5B69     		ldr	r3, [r3, #20]
 1020 04ea 03F03803 		and	r3, r3, #56
 1021 04ee FB60     		str	r3, [r7, #12]
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 1022              		.loc 1 975 0
 1023 04f0 FB68     		ldr	r3, [r7, #12]
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1024              		.loc 1 976 0
 1025 04f2 1846     		mov	r0, r3
 1026 04f4 07F11407 		add	r7, r7, #20
 1027 04f8 BD46     		mov	sp, r7
 1028 04fa 80BC     		pop	{r7}
 1029 04fc 7047     		bx	lr
 1030              		.cfi_endproc
 1031              	.LFE123:
 1033 04fe 00BF     		.align	2
 1034              		.global	DMA_GetFlagStatus
 1035              		.thumb
 1036              		.thumb_func
 1038              	DMA_GetFlagStatus:
 1039              	.LFB124:
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1040              		.loc 1 993 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 24
 1043              		@ frame_needed = 1, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045 0500 80B4     		push	{r7}
 1046              	.LCFI42:
 1047              		.cfi_def_cfa_offset 4
 1048              		.cfi_offset 7, -4
 1049 0502 87B0     		sub	sp, sp, #28
 1050              	.LCFI43:
 1051              		.cfi_def_cfa_offset 32
 1052 0504 00AF     		add	r7, sp, #0
 1053              	.LCFI44:
 1054              		.cfi_def_cfa_register 7
 1055 0506 7860     		str	r0, [r7, #4]
 1056 0508 3960     		str	r1, [r7, #0]
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 1057              		.loc 1 994 0
 1058 050a 4FF00003 		mov	r3, #0
 1059 050e FB75     		strb	r3, [r7, #23]
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1060              		.loc 1 996 0
 1061 0510 4FF00003 		mov	r3, #0
 1062 0514 FB60     		str	r3, [r7, #12]
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1063              		.loc 1 1003 0
 1064 0516 7A68     		ldr	r2, [r7, #4]
 1065 0518 164B     		ldr	r3, .L63
 1066 051a 9A42     		cmp	r2, r3
 1067 051c 02D8     		bhi	.L56
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1068              		.loc 1 1006 0
 1069 051e 164B     		ldr	r3, .L63+4
 1070 0520 3B61     		str	r3, [r7, #16]
 1071 0522 01E0     		b	.L57
 1072              	.L56:
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1073              		.loc 1 1011 0
 1074 0524 154B     		ldr	r3, .L63+8
 1075 0526 3B61     		str	r3, [r7, #16]
 1076              	.L57:
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1077              		.loc 1 1015 0
 1078 0528 3B68     		ldr	r3, [r7, #0]
 1079 052a 03F00053 		and	r3, r3, #536870912
 1080 052e 002B     		cmp	r3, #0
 1081 0530 03D0     		beq	.L58
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 1082              		.loc 1 1018 0
 1083 0532 3B69     		ldr	r3, [r7, #16]
 1084 0534 5B68     		ldr	r3, [r3, #4]
 1085 0536 FB60     		str	r3, [r7, #12]
 1086 0538 02E0     		b	.L59
 1087              	.L58:
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 1088              		.loc 1 1023 0
 1089 053a 3B69     		ldr	r3, [r7, #16]
 1090 053c 1B68     		ldr	r3, [r3, #0]
 1091 053e FB60     		str	r3, [r7, #12]
 1092              	.L59:
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1093              		.loc 1 1027 0
 1094 0540 FB68     		ldr	r3, [r7, #12]
 1095 0542 23F0F023 		bic	r3, r3, #-268374016
 1096 0546 23F08213 		bic	r3, r3, #8519810
 1097 054a FB60     		str	r3, [r7, #12]
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 1098              		.loc 1 1030 0
 1099 054c FA68     		ldr	r2, [r7, #12]
 1100 054e 3B68     		ldr	r3, [r7, #0]
 1101 0550 1340     		ands	r3, r3, r2
 1102 0552 002B     		cmp	r3, #0
 1103 0554 03D0     		beq	.L60
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1104              		.loc 1 1033 0
 1105 0556 4FF00103 		mov	r3, #1
 1106 055a FB75     		strb	r3, [r7, #23]
 1107 055c 02E0     		b	.L61
 1108              	.L60:
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1109              		.loc 1 1038 0
 1110 055e 4FF00003 		mov	r3, #0
 1111 0562 FB75     		strb	r3, [r7, #23]
 1112              	.L61:
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1113              		.loc 1 1042 0
 1114 0564 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1115              		.loc 1 1043 0
 1116 0566 1846     		mov	r0, r3
 1117 0568 07F11C07 		add	r7, r7, #28
 1118 056c BD46     		mov	sp, r7
 1119 056e 80BC     		pop	{r7}
 1120 0570 7047     		bx	lr
 1121              	.L64:
 1122 0572 00BF     		.align	2
 1123              	.L63:
 1124 0574 0F640240 		.word	1073898511
 1125 0578 00600240 		.word	1073897472
 1126 057c 00640240 		.word	1073898496
 1127              		.cfi_endproc
 1128              	.LFE124:
 1130              		.align	2
 1131              		.global	DMA_ClearFlag
 1132              		.thumb
 1133              		.thumb_func
 1135              	DMA_ClearFlag:
 1136              	.LFB125:
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1137              		.loc 1 1060 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 16
 1140              		@ frame_needed = 1, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142 0580 80B4     		push	{r7}
 1143              	.LCFI45:
 1144              		.cfi_def_cfa_offset 4
 1145              		.cfi_offset 7, -4
 1146 0582 85B0     		sub	sp, sp, #20
 1147              	.LCFI46:
 1148              		.cfi_def_cfa_offset 24
 1149 0584 00AF     		add	r7, sp, #0
 1150              	.LCFI47:
 1151              		.cfi_def_cfa_register 7
 1152 0586 7860     		str	r0, [r7, #4]
 1153 0588 3960     		str	r1, [r7, #0]
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1154              		.loc 1 1068 0
 1155 058a 7A68     		ldr	r2, [r7, #4]
 1156 058c 104B     		ldr	r3, .L70
 1157 058e 9A42     		cmp	r2, r3
 1158 0590 02D8     		bhi	.L66
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1159              		.loc 1 1071 0
 1160 0592 104B     		ldr	r3, .L70+4
 1161 0594 FB60     		str	r3, [r7, #12]
 1162 0596 01E0     		b	.L67
 1163              	.L66:
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1164              		.loc 1 1076 0
 1165 0598 0F4B     		ldr	r3, .L70+8
 1166 059a FB60     		str	r3, [r7, #12]
 1167              	.L67:
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1168              		.loc 1 1080 0
 1169 059c 3B68     		ldr	r3, [r7, #0]
 1170 059e 03F00053 		and	r3, r3, #536870912
 1171 05a2 002B     		cmp	r3, #0
 1172 05a4 07D0     		beq	.L68
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1173              		.loc 1 1083 0
 1174 05a6 3B68     		ldr	r3, [r7, #0]
 1175 05a8 23F0F023 		bic	r3, r3, #-268374016
 1176 05ac 23F08213 		bic	r3, r3, #8519810
 1177 05b0 FA68     		ldr	r2, [r7, #12]
 1178 05b2 D360     		str	r3, [r2, #12]
 1179 05b4 06E0     		b	.L65
 1180              	.L68:
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1181              		.loc 1 1088 0
 1182 05b6 3B68     		ldr	r3, [r7, #0]
 1183 05b8 23F0F023 		bic	r3, r3, #-268374016
 1184 05bc 23F08213 		bic	r3, r3, #8519810
 1185 05c0 FA68     		ldr	r2, [r7, #12]
 1186 05c2 9360     		str	r3, [r2, #8]
 1187              	.L65:
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1188              		.loc 1 1090 0
 1189 05c4 07F11407 		add	r7, r7, #20
 1190 05c8 BD46     		mov	sp, r7
 1191 05ca 80BC     		pop	{r7}
 1192 05cc 7047     		bx	lr
 1193              	.L71:
 1194 05ce 00BF     		.align	2
 1195              	.L70:
 1196 05d0 0F640240 		.word	1073898511
 1197 05d4 00600240 		.word	1073897472
 1198 05d8 00640240 		.word	1073898496
 1199              		.cfi_endproc
 1200              	.LFE125:
 1202              		.align	2
 1203              		.global	DMA_ITConfig
 1204              		.thumb
 1205              		.thumb_func
 1207              	DMA_ITConfig:
 1208              	.LFB126:
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1209              		.loc 1 1107 0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 16
 1212              		@ frame_needed = 1, uses_anonymous_args = 0
 1213              		@ link register save eliminated.
 1214 05dc 80B4     		push	{r7}
 1215              	.LCFI48:
 1216              		.cfi_def_cfa_offset 4
 1217              		.cfi_offset 7, -4
 1218 05de 85B0     		sub	sp, sp, #20
 1219              	.LCFI49:
 1220              		.cfi_def_cfa_offset 24
 1221 05e0 00AF     		add	r7, sp, #0
 1222              	.LCFI50:
 1223              		.cfi_def_cfa_register 7
 1224 05e2 F860     		str	r0, [r7, #12]
 1225 05e4 B960     		str	r1, [r7, #8]
 1226 05e6 1346     		mov	r3, r2
 1227 05e8 FB71     		strb	r3, [r7, #7]
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 1228              		.loc 1 1114 0
 1229 05ea BB68     		ldr	r3, [r7, #8]
 1230 05ec 03F08003 		and	r3, r3, #128
 1231 05f0 002B     		cmp	r3, #0
 1232 05f2 0FD0     		beq	.L73
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1233              		.loc 1 1116 0
 1234 05f4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1235 05f6 002B     		cmp	r3, #0
 1236 05f8 06D0     		beq	.L74
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 1237              		.loc 1 1119 0
 1238 05fa FB68     		ldr	r3, [r7, #12]
 1239 05fc 5B69     		ldr	r3, [r3, #20]
 1240 05fe 43F08002 		orr	r2, r3, #128
 1241 0602 FB68     		ldr	r3, [r7, #12]
 1242 0604 5A61     		str	r2, [r3, #20]
 1243 0606 05E0     		b	.L73
 1244              	.L74:
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 1245              		.loc 1 1124 0
 1246 0608 FB68     		ldr	r3, [r7, #12]
 1247 060a 5B69     		ldr	r3, [r3, #20]
 1248 060c 23F08002 		bic	r2, r3, #128
 1249 0610 FB68     		ldr	r3, [r7, #12]
 1250 0612 5A61     		str	r2, [r3, #20]
 1251              	.L73:
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 1252              		.loc 1 1129 0
 1253 0614 BB68     		ldr	r3, [r7, #8]
 1254 0616 802B     		cmp	r3, #128
 1255 0618 15D0     		beq	.L72
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1256              		.loc 1 1131 0
 1257 061a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1258 061c 002B     		cmp	r3, #0
 1259 061e 08D0     		beq	.L76
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 1260              		.loc 1 1134 0
 1261 0620 FB68     		ldr	r3, [r7, #12]
 1262 0622 1A68     		ldr	r2, [r3, #0]
 1263 0624 BB68     		ldr	r3, [r7, #8]
 1264 0626 03F01E03 		and	r3, r3, #30
 1265 062a 1A43     		orrs	r2, r2, r3
 1266 062c FB68     		ldr	r3, [r7, #12]
 1267 062e 1A60     		str	r2, [r3, #0]
 1268 0630 09E0     		b	.L72
 1269              	.L76:
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 1270              		.loc 1 1139 0
 1271 0632 FB68     		ldr	r3, [r7, #12]
 1272 0634 1A68     		ldr	r2, [r3, #0]
 1273 0636 BB68     		ldr	r3, [r7, #8]
 1274 0638 03F01E03 		and	r3, r3, #30
 1275 063c 6FEA0303 		mvn	r3, r3
 1276 0640 1A40     		ands	r2, r2, r3
 1277 0642 FB68     		ldr	r3, [r7, #12]
 1278 0644 1A60     		str	r2, [r3, #0]
 1279              	.L72:
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1280              		.loc 1 1142 0
 1281 0646 07F11407 		add	r7, r7, #20
 1282 064a BD46     		mov	sp, r7
 1283 064c 80BC     		pop	{r7}
 1284 064e 7047     		bx	lr
 1285              		.cfi_endproc
 1286              	.LFE126:
 1288              		.align	2
 1289              		.global	DMA_GetITStatus
 1290              		.thumb
 1291              		.thumb_func
 1293              	DMA_GetITStatus:
 1294              	.LFB127:
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1295              		.loc 1 1159 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 24
 1298              		@ frame_needed = 1, uses_anonymous_args = 0
 1299              		@ link register save eliminated.
 1300 0650 80B4     		push	{r7}
 1301              	.LCFI51:
 1302              		.cfi_def_cfa_offset 4
 1303              		.cfi_offset 7, -4
 1304 0652 87B0     		sub	sp, sp, #28
 1305              	.LCFI52:
 1306              		.cfi_def_cfa_offset 32
 1307 0654 00AF     		add	r7, sp, #0
 1308              	.LCFI53:
 1309              		.cfi_def_cfa_register 7
 1310 0656 7860     		str	r0, [r7, #4]
 1311 0658 3960     		str	r1, [r7, #0]
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 1312              		.loc 1 1160 0
 1313 065a 4FF00003 		mov	r3, #0
 1314 065e FB75     		strb	r3, [r7, #23]
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 1315              		.loc 1 1162 0
 1316 0660 4FF00003 		mov	r3, #0
 1317 0664 FB60     		str	r3, [r7, #12]
 1318 0666 4FF00003 		mov	r3, #0
 1319 066a BB60     		str	r3, [r7, #8]
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1320              		.loc 1 1169 0
 1321 066c 7A68     		ldr	r2, [r7, #4]
 1322 066e 244B     		ldr	r3, .L87
 1323 0670 9A42     		cmp	r2, r3
 1324 0672 02D8     		bhi	.L78
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1325              		.loc 1 1172 0
 1326 0674 234B     		ldr	r3, .L87+4
 1327 0676 3B61     		str	r3, [r7, #16]
 1328 0678 01E0     		b	.L79
 1329              	.L78:
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1330              		.loc 1 1177 0
 1331 067a 234B     		ldr	r3, .L87+8
 1332 067c 3B61     		str	r3, [r7, #16]
 1333              	.L79:
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 1334              		.loc 1 1181 0
 1335 067e 3B68     		ldr	r3, [r7, #0]
 1336 0680 23F0F023 		bic	r3, r3, #-268374016
 1337 0684 23F0C313 		bic	r3, r3, #12779715
 1338 0688 002B     		cmp	r3, #0
 1339 068a 0BD0     		beq	.L80
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 1340              		.loc 1 1184 0
 1341 068c 3B68     		ldr	r3, [r7, #0]
 1342 068e 4FEAD323 		lsr	r3, r3, #11
 1343 0692 03F01E03 		and	r3, r3, #30
 1344 0696 FB60     		str	r3, [r7, #12]
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 1345              		.loc 1 1187 0
 1346 0698 7B68     		ldr	r3, [r7, #4]
 1347 069a 1A68     		ldr	r2, [r3, #0]
 1348 069c FB68     		ldr	r3, [r7, #12]
 1349 069e 1340     		ands	r3, r3, r2
 1350 06a0 BB60     		str	r3, [r7, #8]
 1351 06a2 04E0     		b	.L81
 1352              	.L80:
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 1353              		.loc 1 1192 0
 1354 06a4 7B68     		ldr	r3, [r7, #4]
 1355 06a6 5B69     		ldr	r3, [r3, #20]
 1356 06a8 03F08003 		and	r3, r3, #128
 1357 06ac BB60     		str	r3, [r7, #8]
 1358              	.L81:
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1359              		.loc 1 1196 0
 1360 06ae 3B68     		ldr	r3, [r7, #0]
 1361 06b0 03F00053 		and	r3, r3, #536870912
 1362 06b4 002B     		cmp	r3, #0
 1363 06b6 03D0     		beq	.L82
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 1364              		.loc 1 1199 0
 1365 06b8 3B69     		ldr	r3, [r7, #16]
 1366 06ba 5B68     		ldr	r3, [r3, #4]
 1367 06bc FB60     		str	r3, [r7, #12]
 1368 06be 02E0     		b	.L83
 1369              	.L82:
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 1370              		.loc 1 1204 0
 1371 06c0 3B69     		ldr	r3, [r7, #16]
 1372 06c2 1B68     		ldr	r3, [r3, #0]
 1373 06c4 FB60     		str	r3, [r7, #12]
 1374              	.L83:
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1375              		.loc 1 1208 0
 1376 06c6 FB68     		ldr	r3, [r7, #12]
 1377 06c8 23F0F023 		bic	r3, r3, #-268374016
 1378 06cc 23F08213 		bic	r3, r3, #8519810
 1379 06d0 FB60     		str	r3, [r7, #12]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 1380              		.loc 1 1211 0
 1381 06d2 FA68     		ldr	r2, [r7, #12]
 1382 06d4 3B68     		ldr	r3, [r7, #0]
 1383 06d6 1340     		ands	r3, r3, r2
 1384 06d8 002B     		cmp	r3, #0
 1385 06da 06D0     		beq	.L84
 1386              		.loc 1 1211 0 is_stmt 0 discriminator 1
 1387 06dc BB68     		ldr	r3, [r7, #8]
 1388 06de 002B     		cmp	r3, #0
 1389 06e0 03D0     		beq	.L84
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1390              		.loc 1 1214 0 is_stmt 1
 1391 06e2 4FF00103 		mov	r3, #1
 1392 06e6 FB75     		strb	r3, [r7, #23]
 1393 06e8 02E0     		b	.L85
 1394              	.L84:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1395              		.loc 1 1219 0
 1396 06ea 4FF00003 		mov	r3, #0
 1397 06ee FB75     		strb	r3, [r7, #23]
 1398              	.L85:
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1399              		.loc 1 1223 0
 1400 06f0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1401              		.loc 1 1224 0
 1402 06f2 1846     		mov	r0, r3
 1403 06f4 07F11C07 		add	r7, r7, #28
 1404 06f8 BD46     		mov	sp, r7
 1405 06fa 80BC     		pop	{r7}
 1406 06fc 7047     		bx	lr
 1407              	.L88:
 1408 06fe 00BF     		.align	2
 1409              	.L87:
 1410 0700 0F640240 		.word	1073898511
 1411 0704 00600240 		.word	1073897472
 1412 0708 00640240 		.word	1073898496
 1413              		.cfi_endproc
 1414              	.LFE127:
 1416              		.align	2
 1417              		.global	DMA_ClearITPendingBit
 1418              		.thumb
 1419              		.thumb_func
 1421              	DMA_ClearITPendingBit:
 1422              	.LFB128:
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1423              		.loc 1 1241 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 16
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427              		@ link register save eliminated.
 1428 070c 80B4     		push	{r7}
 1429              	.LCFI54:
 1430              		.cfi_def_cfa_offset 4
 1431              		.cfi_offset 7, -4
 1432 070e 85B0     		sub	sp, sp, #20
 1433              	.LCFI55:
 1434              		.cfi_def_cfa_offset 24
 1435 0710 00AF     		add	r7, sp, #0
 1436              	.LCFI56:
 1437              		.cfi_def_cfa_register 7
 1438 0712 7860     		str	r0, [r7, #4]
 1439 0714 3960     		str	r1, [r7, #0]
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1440              		.loc 1 1249 0
 1441 0716 7A68     		ldr	r2, [r7, #4]
 1442 0718 104B     		ldr	r3, .L94
 1443 071a 9A42     		cmp	r2, r3
 1444 071c 02D8     		bhi	.L90
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1445              		.loc 1 1252 0
 1446 071e 104B     		ldr	r3, .L94+4
 1447 0720 FB60     		str	r3, [r7, #12]
 1448 0722 01E0     		b	.L91
 1449              	.L90:
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1450              		.loc 1 1257 0
 1451 0724 0F4B     		ldr	r3, .L94+8
 1452 0726 FB60     		str	r3, [r7, #12]
 1453              	.L91:
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1454              		.loc 1 1261 0
 1455 0728 3B68     		ldr	r3, [r7, #0]
 1456 072a 03F00053 		and	r3, r3, #536870912
 1457 072e 002B     		cmp	r3, #0
 1458 0730 07D0     		beq	.L92
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1459              		.loc 1 1264 0
 1460 0732 3B68     		ldr	r3, [r7, #0]
 1461 0734 23F0F023 		bic	r3, r3, #-268374016
 1462 0738 23F08213 		bic	r3, r3, #8519810
 1463 073c FA68     		ldr	r2, [r7, #12]
 1464 073e D360     		str	r3, [r2, #12]
 1465 0740 06E0     		b	.L89
 1466              	.L92:
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1467              		.loc 1 1269 0
 1468 0742 3B68     		ldr	r3, [r7, #0]
 1469 0744 23F0F023 		bic	r3, r3, #-268374016
 1470 0748 23F08213 		bic	r3, r3, #8519810
 1471 074c FA68     		ldr	r2, [r7, #12]
 1472 074e 9360     		str	r3, [r2, #8]
 1473              	.L89:
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1474              		.loc 1 1271 0
 1475 0750 07F11407 		add	r7, r7, #20
 1476 0754 BD46     		mov	sp, r7
 1477 0756 80BC     		pop	{r7}
 1478 0758 7047     		bx	lr
 1479              	.L95:
 1480 075a 00BF     		.align	2
 1481              	.L94:
 1482 075c 0F640240 		.word	1073898511
 1483 0760 00600240 		.word	1073897472
 1484 0764 00640240 		.word	1073898496
 1485              		.cfi_endproc
 1486              	.LFE128:
 1488              	.Letext0:
 1489              		.file 2 "/opt/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 1490              		.file 3 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Device/ST/STM
 1491              		.file 4 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/STM32F4xx_StdPeriph
 1492              		.file 5 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Include/core_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_dma.c
     /tmp/cchRiNGs.s:18     .text:00000000 $t
     /tmp/cchRiNGs.s:23     .text:00000000 DMA_DeInit
     /tmp/cchRiNGs.s:255    .text:00000160 $d
     /tmp/cchRiNGs.s:279    .text:000001b4 $t
     /tmp/cchRiNGs.s:284    .text:000001b4 DMA_Init
     /tmp/cchRiNGs.s:409    .text:00000260 $d
     /tmp/cchRiNGs.s:413    .text:00000264 $t
     /tmp/cchRiNGs.s:418    .text:00000264 DMA_StructInit
     /tmp/cchRiNGs.s:509    .text:000002f0 DMA_Cmd
     /tmp/cchRiNGs.s:561    .text:00000328 DMA_PeriphIncOffsetSizeConfig
     /tmp/cchRiNGs.s:612    .text:0000035c DMA_FlowControllerConfig
     /tmp/cchRiNGs.s:663    .text:00000390 DMA_SetCurrDataCounter
     /tmp/cchRiNGs.s:700    .text:000003ac DMA_GetCurrDataCounter
     /tmp/cchRiNGs.s:736    .text:000003c8 DMA_DoubleBufferModeConfig
     /tmp/cchRiNGs.s:792    .text:00000404 DMA_DoubleBufferModeCmd
     /tmp/cchRiNGs.s:844    .text:0000043c DMA_MemoryTargetConfig
     /tmp/cchRiNGs.s:892    .text:00000468 DMA_GetCurrentMemoryTarget
     /tmp/cchRiNGs.s:944    .text:000004a0 DMA_GetCmdStatus
     /tmp/cchRiNGs.s:996    .text:000004d8 DMA_GetFIFOStatus
     /tmp/cchRiNGs.s:1038   .text:00000500 DMA_GetFlagStatus
     /tmp/cchRiNGs.s:1124   .text:00000574 $d
     /tmp/cchRiNGs.s:1130   .text:00000580 $t
     /tmp/cchRiNGs.s:1135   .text:00000580 DMA_ClearFlag
     /tmp/cchRiNGs.s:1196   .text:000005d0 $d
     /tmp/cchRiNGs.s:1202   .text:000005dc $t
     /tmp/cchRiNGs.s:1207   .text:000005dc DMA_ITConfig
     /tmp/cchRiNGs.s:1293   .text:00000650 DMA_GetITStatus
     /tmp/cchRiNGs.s:1410   .text:00000700 $d
     /tmp/cchRiNGs.s:1416   .text:0000070c $t
     /tmp/cchRiNGs.s:1421   .text:0000070c DMA_ClearITPendingBit
     /tmp/cchRiNGs.s:1482   .text:0000075c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ee386580922180e5cad1057f989de60d
                           .group:00000000 wm4.stm32f4xx.h.54.6e1f0ee5c76cc1e53c8ea6d18297b5fd
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_adc.h.108.1710484bf41297b93f825b3b15cbdff8
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rng.h.31.1ec493d56b7a8e5a71238519cae6dea7
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stm32f4xx_dma.h.118.9a967be66203a9a98bb175a238fe397e

NO UNDEFINED SYMBOLS
