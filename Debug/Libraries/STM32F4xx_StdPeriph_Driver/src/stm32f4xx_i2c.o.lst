   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_i2c.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	I2C_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	I2C_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * You may not use this file except in compliance with the License.
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * You may obtain a copy of the License at:
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * Unless required by applicable law or agreed to in writing, software 
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * See the License for the specific language governing permissions and
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * limitations under the License.
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  26              		.loc 1 139 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  42              		.loc 1 143 0
  43 0008 7A68     		ldr	r2, [r7, #4]
  44 000a 1A4B     		ldr	r3, .L5
  45 000c 9A42     		cmp	r2, r3
  46 000e 0CD1     		bne	.L2
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  47              		.loc 1 146 0
  48 0010 4FF40010 		mov	r0, #2097152
  49 0014 4FF00101 		mov	r1, #1
  50 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  51              		.loc 1 148 0
  52 001c 4FF40010 		mov	r0, #2097152
  53 0020 4FF00001 		mov	r1, #0
  54 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  55 0028 20E0     		b	.L1
  56              	.L2:
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  57              		.loc 1 150 0
  58 002a 7A68     		ldr	r2, [r7, #4]
  59 002c 124B     		ldr	r3, .L5+4
  60 002e 9A42     		cmp	r2, r3
  61 0030 0CD1     		bne	.L4
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  62              		.loc 1 153 0
  63 0032 4FF48000 		mov	r0, #4194304
  64 0036 4FF00101 		mov	r1, #1
  65 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  66              		.loc 1 155 0
  67 003e 4FF48000 		mov	r0, #4194304
  68 0042 4FF00001 		mov	r1, #0
  69 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  70 004a 0FE0     		b	.L1
  71              	.L4:
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  72              		.loc 1 159 0
  73 004c 7A68     		ldr	r2, [r7, #4]
  74 004e 0B4B     		ldr	r3, .L5+8
  75 0050 9A42     		cmp	r2, r3
  76 0052 0BD1     		bne	.L1
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  77              		.loc 1 162 0
  78 0054 4FF40000 		mov	r0, #8388608
  79 0058 4FF00101 		mov	r1, #1
  80 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  81              		.loc 1 164 0
  82 0060 4FF40000 		mov	r0, #8388608
  83 0064 4FF00001 		mov	r1, #0
  84 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  85              	.L1:
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
  86              		.loc 1 167 0
  87 006c 07F10807 		add	r7, r7, #8
  88 0070 BD46     		mov	sp, r7
  89 0072 80BD     		pop	{r7, pc}
  90              	.L6:
  91              		.align	2
  92              	.L5:
  93 0074 00540040 		.word	1073763328
  94 0078 00580040 		.word	1073764352
  95 007c 005C0040 		.word	1073765376
  96              		.cfi_endproc
  97              	.LFE110:
  99              		.align	2
 100              		.global	I2C_Init
 101              		.thumb
 102              		.thumb_func
 104              	I2C_Init:
 105              	.LFB111:
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 106              		.loc 1 182 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 40
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110 0080 80B5     		push	{r7, lr}
 111              	.LCFI3:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0082 8AB0     		sub	sp, sp, #40
 116              	.LCFI4:
 117              		.cfi_def_cfa_offset 48
 118 0084 00AF     		add	r7, sp, #0
 119              	.LCFI5:
 120              		.cfi_def_cfa_register 7
 121 0086 7860     		str	r0, [r7, #4]
 122 0088 3960     		str	r1, [r7, #0]
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 123              		.loc 1 183 0
 124 008a 4FF00003 		mov	r3, #0
 125 008e FB84     		strh	r3, [r7, #38]	@ movhi
 126 0090 4FF00003 		mov	r3, #0
 127 0094 7B84     		strh	r3, [r7, #34]	@ movhi
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 128              		.loc 1 184 0
 129 0096 4FF00403 		mov	r3, #4
 130 009a BB84     		strh	r3, [r7, #36]	@ movhi
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 131              		.loc 1 185 0
 132 009c 5D4B     		ldr	r3, .L14
 133 009e FB61     		str	r3, [r7, #28]
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 134              		.loc 1 198 0
 135 00a0 7B68     		ldr	r3, [r7, #4]
 136 00a2 9B88     		ldrh	r3, [r3, #4]	@ movhi
 137 00a4 FB84     		strh	r3, [r7, #38]	@ movhi
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 138              		.loc 1 200 0
 139 00a6 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 140 00a8 23F03F03 		bic	r3, r3, #63
 141 00ac FB84     		strh	r3, [r7, #38]	@ movhi
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 142              		.loc 1 202 0
 143 00ae 07F10C03 		add	r3, r7, #12
 144 00b2 1846     		mov	r0, r3
 145 00b4 FFF7FEFF 		bl	RCC_GetClocksFreq
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 146              		.loc 1 203 0
 147 00b8 7B69     		ldr	r3, [r7, #20]
 148 00ba FB61     		str	r3, [r7, #28]
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 149              		.loc 1 205 0
 150 00bc FA69     		ldr	r2, [r7, #28]
 151 00be 564B     		ldr	r3, .L14+4
 152 00c0 A3FB0213 		umull	r1, r3, r3, r2
 153 00c4 4FEA9343 		lsr	r3, r3, #18
 154 00c8 7B84     		strh	r3, [r7, #34]	@ movhi
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 155              		.loc 1 206 0
 156 00ca FA8C     		ldrh	r2, [r7, #38]	@ movhi
 157 00cc 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 158 00ce 1343     		orrs	r3, r3, r2
 159 00d0 FB84     		strh	r3, [r7, #38]	@ movhi
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 160              		.loc 1 208 0
 161 00d2 7B68     		ldr	r3, [r7, #4]
 162 00d4 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 163 00d6 9A80     		strh	r2, [r3, #4]	@ movhi
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 164              		.loc 1 212 0
 165 00d8 7B68     		ldr	r3, [r7, #4]
 166 00da 1B88     		ldrh	r3, [r3, #0]	@ movhi
 167 00dc 9BB2     		uxth	r3, r3
 168 00de 23F00103 		bic	r3, r3, #1
 169 00e2 9AB2     		uxth	r2, r3
 170 00e4 7B68     		ldr	r3, [r7, #4]
 171 00e6 1A80     		strh	r2, [r3, #0]	@ movhi
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 172              		.loc 1 215 0
 173 00e8 4FF00003 		mov	r3, #0
 174 00ec FB84     		strh	r3, [r7, #38]	@ movhi
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 175              		.loc 1 218 0
 176 00ee 3B68     		ldr	r3, [r7, #0]
 177 00f0 1A68     		ldr	r2, [r3, #0]
 178 00f2 4A4B     		ldr	r3, .L14+8
 179 00f4 9A42     		cmp	r2, r3
 180 00f6 18D8     		bhi	.L8
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 181              		.loc 1 221 0
 182 00f8 3B68     		ldr	r3, [r7, #0]
 183 00fa 1B68     		ldr	r3, [r3, #0]
 184 00fc 4FEA4303 		lsl	r3, r3, #1
 185 0100 FA69     		ldr	r2, [r7, #28]
 186 0102 B2FBF3F3 		udiv	r3, r2, r3
 187 0106 BB84     		strh	r3, [r7, #36]	@ movhi
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 188              		.loc 1 223 0
 189 0108 BB8C     		ldrh	r3, [r7, #36]
 190 010a 032B     		cmp	r3, #3
 191 010c 02D8     		bhi	.L9
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 192              		.loc 1 226 0
 193 010e 4FF00403 		mov	r3, #4
 194 0112 BB84     		strh	r3, [r7, #36]	@ movhi
 195              	.L9:
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 196              		.loc 1 229 0
 197 0114 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 198 0116 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 199 0118 1343     		orrs	r3, r3, r2
 200 011a FB84     		strh	r3, [r7, #38]	@ movhi
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 201              		.loc 1 231 0
 202 011c 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 203 011e 03F10103 		add	r3, r3, #1
 204 0122 9AB2     		uxth	r2, r3
 205 0124 7B68     		ldr	r3, [r7, #4]
 206 0126 1A84     		strh	r2, [r3, #32]	@ movhi
 207 0128 48E0     		b	.L10
 208              	.L8:
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 209              		.loc 1 238 0
 210 012a 3B68     		ldr	r3, [r7, #0]
 211 012c DA88     		ldrh	r2, [r3, #6]
 212 012e 4BF6FF73 		movw	r3, #49151
 213 0132 9A42     		cmp	r2, r3
 214 0134 0AD1     		bne	.L11
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 215              		.loc 1 241 0
 216 0136 3B68     		ldr	r3, [r7, #0]
 217 0138 1A68     		ldr	r2, [r3, #0]
 218 013a 1346     		mov	r3, r2
 219 013c 4FEA4303 		lsl	r3, r3, #1
 220 0140 9B18     		adds	r3, r3, r2
 221 0142 FA69     		ldr	r2, [r7, #28]
 222 0144 B2FBF3F3 		udiv	r3, r2, r3
 223 0148 BB84     		strh	r3, [r7, #36]	@ movhi
 224 014a 10E0     		b	.L12
 225              	.L11:
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 226              		.loc 1 246 0
 227 014c 3B68     		ldr	r3, [r7, #0]
 228 014e 1A68     		ldr	r2, [r3, #0]
 229 0150 1346     		mov	r3, r2
 230 0152 4FEA8303 		lsl	r3, r3, #2
 231 0156 9B18     		adds	r3, r3, r2
 232 0158 4FEA8302 		lsl	r2, r3, #2
 233 015c 9B18     		adds	r3, r3, r2
 234 015e FA69     		ldr	r2, [r7, #28]
 235 0160 B2FBF3F3 		udiv	r3, r2, r3
 236 0164 BB84     		strh	r3, [r7, #36]	@ movhi
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 237              		.loc 1 248 0
 238 0166 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 239 0168 43F48043 		orr	r3, r3, #16384
 240 016c BB84     		strh	r3, [r7, #36]	@ movhi
 241              	.L12:
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 242              		.loc 1 252 0
 243 016e BB8C     		ldrh	r3, [r7, #36]
 244 0170 4FEA0353 		lsl	r3, r3, #20
 245 0174 4FEA1353 		lsr	r3, r3, #20
 246 0178 002B     		cmp	r3, #0
 247 017a 03D1     		bne	.L13
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 248              		.loc 1 255 0
 249 017c BB8C     		ldrh	r3, [r7, #36]	@ movhi
 250 017e 43F00103 		orr	r3, r3, #1
 251 0182 BB84     		strh	r3, [r7, #36]	@ movhi
 252              	.L13:
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 253              		.loc 1 258 0
 254 0184 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 255 0186 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 256 0188 1343     		orrs	r3, r3, r2
 257 018a 9BB2     		uxth	r3, r3
 258 018c 6FEA4343 		mvn	r3, r3, lsl #17
 259 0190 6FEA5343 		mvn	r3, r3, lsr #17
 260 0194 FB84     		strh	r3, [r7, #38]	@ movhi
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 261              		.loc 1 260 0
 262 0196 7B8C     		ldrh	r3, [r7, #34]
 263 0198 4FF49672 		mov	r2, #300
 264 019c 02FB03F3 		mul	r3, r2, r3
 265 01a0 1F4A     		ldr	r2, .L14+12
 266 01a2 82FB0312 		smull	r1, r2, r2, r3
 267 01a6 4FEAA212 		asr	r2, r2, #6
 268 01aa 4FEAE373 		asr	r3, r3, #31
 269 01ae D31A     		subs	r3, r2, r3
 270 01b0 9BB2     		uxth	r3, r3
 271 01b2 03F10103 		add	r3, r3, #1
 272 01b6 9AB2     		uxth	r2, r3
 273 01b8 7B68     		ldr	r3, [r7, #4]
 274 01ba 1A84     		strh	r2, [r3, #32]	@ movhi
 275              	.L10:
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 276              		.loc 1 264 0
 277 01bc 7B68     		ldr	r3, [r7, #4]
 278 01be FA8C     		ldrh	r2, [r7, #38]	@ movhi
 279 01c0 9A83     		strh	r2, [r3, #28]	@ movhi
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 280              		.loc 1 266 0
 281 01c2 7B68     		ldr	r3, [r7, #4]
 282 01c4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 283 01c6 9BB2     		uxth	r3, r3
 284 01c8 43F00103 		orr	r3, r3, #1
 285 01cc 9AB2     		uxth	r2, r3
 286 01ce 7B68     		ldr	r3, [r7, #4]
 287 01d0 1A80     		strh	r2, [r3, #0]	@ movhi
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 288              		.loc 1 270 0
 289 01d2 7B68     		ldr	r3, [r7, #4]
 290 01d4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 291 01d6 FB84     		strh	r3, [r7, #38]	@ movhi
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 292              		.loc 1 272 0
 293 01d8 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 294 01da 23F48163 		bic	r3, r3, #1032
 295 01de 23F00203 		bic	r3, r3, #2
 296 01e2 FB84     		strh	r3, [r7, #38]	@ movhi
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 297              		.loc 1 276 0
 298 01e4 3B68     		ldr	r3, [r7, #0]
 299 01e6 9A88     		ldrh	r2, [r3, #4]
 300 01e8 3B68     		ldr	r3, [r7, #0]
 301 01ea 5B89     		ldrh	r3, [r3, #10]
 302 01ec 1343     		orrs	r3, r3, r2
 303 01ee 9AB2     		uxth	r2, r3
 304 01f0 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 305 01f2 1343     		orrs	r3, r3, r2
 306 01f4 FB84     		strh	r3, [r7, #38]	@ movhi
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 307              		.loc 1 278 0
 308 01f6 7B68     		ldr	r3, [r7, #4]
 309 01f8 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 310 01fa 1A80     		strh	r2, [r3, #0]	@ movhi
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 311              		.loc 1 282 0
 312 01fc 3B68     		ldr	r3, [r7, #0]
 313 01fe 9A89     		ldrh	r2, [r3, #12]
 314 0200 3B68     		ldr	r3, [r7, #0]
 315 0202 1B89     		ldrh	r3, [r3, #8]
 316 0204 1343     		orrs	r3, r3, r2
 317 0206 9AB2     		uxth	r2, r3
 318 0208 7B68     		ldr	r3, [r7, #4]
 319 020a 1A81     		strh	r2, [r3, #8]	@ movhi
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 320              		.loc 1 283 0
 321 020c 07F12807 		add	r7, r7, #40
 322 0210 BD46     		mov	sp, r7
 323 0212 80BD     		pop	{r7, pc}
 324              	.L15:
 325              		.align	2
 326              	.L14:
 327 0214 00127A00 		.word	8000000
 328 0218 83DE1B43 		.word	1125899907
 329 021c A0860100 		.word	100000
 330 0220 D34D6210 		.word	274877907
 331              		.cfi_endproc
 332              	.LFE111:
 334              		.align	2
 335              		.global	I2C_StructInit
 336              		.thumb
 337              		.thumb_func
 339              	I2C_StructInit:
 340              	.LFB112:
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 341              		.loc 1 291 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 8
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 346 0224 80B4     		push	{r7}
 347              	.LCFI6:
 348              		.cfi_def_cfa_offset 4
 349              		.cfi_offset 7, -4
 350 0226 83B0     		sub	sp, sp, #12
 351              	.LCFI7:
 352              		.cfi_def_cfa_offset 16
 353 0228 00AF     		add	r7, sp, #0
 354              	.LCFI8:
 355              		.cfi_def_cfa_register 7
 356 022a 7860     		str	r0, [r7, #4]
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 357              		.loc 1 294 0
 358 022c 7B68     		ldr	r3, [r7, #4]
 359 022e 41F28832 		movw	r2, #5000
 360 0232 1A60     		str	r2, [r3, #0]
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 361              		.loc 1 296 0
 362 0234 7B68     		ldr	r3, [r7, #4]
 363 0236 4FF00002 		mov	r2, #0
 364 023a 9A80     		strh	r2, [r3, #4]	@ movhi
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 365              		.loc 1 298 0
 366 023c 7B68     		ldr	r3, [r7, #4]
 367 023e 4BF6FF72 		movw	r2, #49151
 368 0242 DA80     		strh	r2, [r3, #6]	@ movhi
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 369              		.loc 1 300 0
 370 0244 7B68     		ldr	r3, [r7, #4]
 371 0246 4FF00002 		mov	r2, #0
 372 024a 1A81     		strh	r2, [r3, #8]	@ movhi
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 373              		.loc 1 302 0
 374 024c 7B68     		ldr	r3, [r7, #4]
 375 024e 4FF00002 		mov	r2, #0
 376 0252 5A81     		strh	r2, [r3, #10]	@ movhi
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 377              		.loc 1 304 0
 378 0254 7B68     		ldr	r3, [r7, #4]
 379 0256 4FF48042 		mov	r2, #16384
 380 025a 9A81     		strh	r2, [r3, #12]	@ movhi
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 381              		.loc 1 305 0
 382 025c 07F10C07 		add	r7, r7, #12
 383 0260 BD46     		mov	sp, r7
 384 0262 80BC     		pop	{r7}
 385 0264 7047     		bx	lr
 386              		.cfi_endproc
 387              	.LFE112:
 389 0266 00BF     		.align	2
 390              		.global	I2C_Cmd
 391              		.thumb
 392              		.thumb_func
 394              	I2C_Cmd:
 395              	.LFB113:
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 396              		.loc 1 315 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 8
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401 0268 80B4     		push	{r7}
 402              	.LCFI9:
 403              		.cfi_def_cfa_offset 4
 404              		.cfi_offset 7, -4
 405 026a 83B0     		sub	sp, sp, #12
 406              	.LCFI10:
 407              		.cfi_def_cfa_offset 16
 408 026c 00AF     		add	r7, sp, #0
 409              	.LCFI11:
 410              		.cfi_def_cfa_register 7
 411 026e 7860     		str	r0, [r7, #4]
 412 0270 0B46     		mov	r3, r1
 413 0272 FB70     		strb	r3, [r7, #3]
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 414              		.loc 1 319 0
 415 0274 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 416 0276 002B     		cmp	r3, #0
 417 0278 08D0     		beq	.L18
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 418              		.loc 1 322 0
 419 027a 7B68     		ldr	r3, [r7, #4]
 420 027c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 421 027e 9BB2     		uxth	r3, r3
 422 0280 43F00103 		orr	r3, r3, #1
 423 0284 9AB2     		uxth	r2, r3
 424 0286 7B68     		ldr	r3, [r7, #4]
 425 0288 1A80     		strh	r2, [r3, #0]	@ movhi
 426 028a 07E0     		b	.L17
 427              	.L18:
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 428              		.loc 1 327 0
 429 028c 7B68     		ldr	r3, [r7, #4]
 430 028e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 431 0290 9BB2     		uxth	r3, r3
 432 0292 23F00103 		bic	r3, r3, #1
 433 0296 9AB2     		uxth	r2, r3
 434 0298 7B68     		ldr	r3, [r7, #4]
 435 029a 1A80     		strh	r2, [r3, #0]	@ movhi
 436              	.L17:
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 437              		.loc 1 329 0
 438 029c 07F10C07 		add	r7, r7, #12
 439 02a0 BD46     		mov	sp, r7
 440 02a2 80BC     		pop	{r7}
 441 02a4 7047     		bx	lr
 442              		.cfi_endproc
 443              	.LFE113:
 445 02a6 00BF     		.align	2
 446              		.global	I2C_GenerateSTART
 447              		.thumb
 448              		.thumb_func
 450              	I2C_GenerateSTART:
 451              	.LFB114:
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 452              		.loc 1 339 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457 02a8 80B4     		push	{r7}
 458              	.LCFI12:
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 02aa 83B0     		sub	sp, sp, #12
 462              	.LCFI13:
 463              		.cfi_def_cfa_offset 16
 464 02ac 00AF     		add	r7, sp, #0
 465              	.LCFI14:
 466              		.cfi_def_cfa_register 7
 467 02ae 7860     		str	r0, [r7, #4]
 468 02b0 0B46     		mov	r3, r1
 469 02b2 FB70     		strb	r3, [r7, #3]
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 470              		.loc 1 343 0
 471 02b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 472 02b6 002B     		cmp	r3, #0
 473 02b8 08D0     		beq	.L21
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 474              		.loc 1 346 0
 475 02ba 7B68     		ldr	r3, [r7, #4]
 476 02bc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 477 02be 9BB2     		uxth	r3, r3
 478 02c0 43F48073 		orr	r3, r3, #256
 479 02c4 9AB2     		uxth	r2, r3
 480 02c6 7B68     		ldr	r3, [r7, #4]
 481 02c8 1A80     		strh	r2, [r3, #0]	@ movhi
 482 02ca 07E0     		b	.L20
 483              	.L21:
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 484              		.loc 1 351 0
 485 02cc 7B68     		ldr	r3, [r7, #4]
 486 02ce 1B88     		ldrh	r3, [r3, #0]	@ movhi
 487 02d0 9BB2     		uxth	r3, r3
 488 02d2 23F48073 		bic	r3, r3, #256
 489 02d6 9AB2     		uxth	r2, r3
 490 02d8 7B68     		ldr	r3, [r7, #4]
 491 02da 1A80     		strh	r2, [r3, #0]	@ movhi
 492              	.L20:
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 493              		.loc 1 353 0
 494 02dc 07F10C07 		add	r7, r7, #12
 495 02e0 BD46     		mov	sp, r7
 496 02e2 80BC     		pop	{r7}
 497 02e4 7047     		bx	lr
 498              		.cfi_endproc
 499              	.LFE114:
 501 02e6 00BF     		.align	2
 502              		.global	I2C_GenerateSTOP
 503              		.thumb
 504              		.thumb_func
 506              	I2C_GenerateSTOP:
 507              	.LFB115:
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 508              		.loc 1 363 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 8
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513 02e8 80B4     		push	{r7}
 514              	.LCFI15:
 515              		.cfi_def_cfa_offset 4
 516              		.cfi_offset 7, -4
 517 02ea 83B0     		sub	sp, sp, #12
 518              	.LCFI16:
 519              		.cfi_def_cfa_offset 16
 520 02ec 00AF     		add	r7, sp, #0
 521              	.LCFI17:
 522              		.cfi_def_cfa_register 7
 523 02ee 7860     		str	r0, [r7, #4]
 524 02f0 0B46     		mov	r3, r1
 525 02f2 FB70     		strb	r3, [r7, #3]
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 526              		.loc 1 367 0
 527 02f4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 528 02f6 002B     		cmp	r3, #0
 529 02f8 08D0     		beq	.L24
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 530              		.loc 1 370 0
 531 02fa 7B68     		ldr	r3, [r7, #4]
 532 02fc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 533 02fe 9BB2     		uxth	r3, r3
 534 0300 43F40073 		orr	r3, r3, #512
 535 0304 9AB2     		uxth	r2, r3
 536 0306 7B68     		ldr	r3, [r7, #4]
 537 0308 1A80     		strh	r2, [r3, #0]	@ movhi
 538 030a 07E0     		b	.L23
 539              	.L24:
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 540              		.loc 1 375 0
 541 030c 7B68     		ldr	r3, [r7, #4]
 542 030e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 543 0310 9BB2     		uxth	r3, r3
 544 0312 23F40073 		bic	r3, r3, #512
 545 0316 9AB2     		uxth	r2, r3
 546 0318 7B68     		ldr	r3, [r7, #4]
 547 031a 1A80     		strh	r2, [r3, #0]	@ movhi
 548              	.L23:
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 549              		.loc 1 377 0
 550 031c 07F10C07 		add	r7, r7, #12
 551 0320 BD46     		mov	sp, r7
 552 0322 80BC     		pop	{r7}
 553 0324 7047     		bx	lr
 554              		.cfi_endproc
 555              	.LFE115:
 557 0326 00BF     		.align	2
 558              		.global	I2C_Send7bitAddress
 559              		.thumb
 560              		.thumb_func
 562              	I2C_Send7bitAddress:
 563              	.LFB116:
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 564              		.loc 1 391 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 8
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569 0328 80B4     		push	{r7}
 570              	.LCFI18:
 571              		.cfi_def_cfa_offset 4
 572              		.cfi_offset 7, -4
 573 032a 83B0     		sub	sp, sp, #12
 574              	.LCFI19:
 575              		.cfi_def_cfa_offset 16
 576 032c 00AF     		add	r7, sp, #0
 577              	.LCFI20:
 578              		.cfi_def_cfa_register 7
 579 032e 7860     		str	r0, [r7, #4]
 580 0330 1346     		mov	r3, r2
 581 0332 0A46     		mov	r2, r1
 582 0334 FA70     		strb	r2, [r7, #3]
 583 0336 BB70     		strb	r3, [r7, #2]
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 584              		.loc 1 396 0
 585 0338 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 586 033a 002B     		cmp	r3, #0
 587 033c 04D0     		beq	.L27
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 588              		.loc 1 399 0
 589 033e FB78     		ldrb	r3, [r7, #3]
 590 0340 43F00103 		orr	r3, r3, #1
 591 0344 FB70     		strb	r3, [r7, #3]
 592 0346 03E0     		b	.L28
 593              	.L27:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 594              		.loc 1 404 0
 595 0348 FB78     		ldrb	r3, [r7, #3]
 596 034a 23F00103 		bic	r3, r3, #1
 597 034e FB70     		strb	r3, [r7, #3]
 598              	.L28:
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 599              		.loc 1 407 0
 600 0350 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 601 0352 9AB2     		uxth	r2, r3
 602 0354 7B68     		ldr	r3, [r7, #4]
 603 0356 1A82     		strh	r2, [r3, #16]	@ movhi
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 604              		.loc 1 408 0
 605 0358 07F10C07 		add	r7, r7, #12
 606 035c BD46     		mov	sp, r7
 607 035e 80BC     		pop	{r7}
 608 0360 7047     		bx	lr
 609              		.cfi_endproc
 610              	.LFE116:
 612 0362 00BF     		.align	2
 613              		.global	I2C_AcknowledgeConfig
 614              		.thumb
 615              		.thumb_func
 617              	I2C_AcknowledgeConfig:
 618              	.LFB117:
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 619              		.loc 1 418 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 8
 622              		@ frame_needed = 1, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624 0364 80B4     		push	{r7}
 625              	.LCFI21:
 626              		.cfi_def_cfa_offset 4
 627              		.cfi_offset 7, -4
 628 0366 83B0     		sub	sp, sp, #12
 629              	.LCFI22:
 630              		.cfi_def_cfa_offset 16
 631 0368 00AF     		add	r7, sp, #0
 632              	.LCFI23:
 633              		.cfi_def_cfa_register 7
 634 036a 7860     		str	r0, [r7, #4]
 635 036c 0B46     		mov	r3, r1
 636 036e FB70     		strb	r3, [r7, #3]
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 637              		.loc 1 422 0
 638 0370 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 639 0372 002B     		cmp	r3, #0
 640 0374 08D0     		beq	.L30
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 641              		.loc 1 425 0
 642 0376 7B68     		ldr	r3, [r7, #4]
 643 0378 1B88     		ldrh	r3, [r3, #0]	@ movhi
 644 037a 9BB2     		uxth	r3, r3
 645 037c 43F48063 		orr	r3, r3, #1024
 646 0380 9AB2     		uxth	r2, r3
 647 0382 7B68     		ldr	r3, [r7, #4]
 648 0384 1A80     		strh	r2, [r3, #0]	@ movhi
 649 0386 07E0     		b	.L29
 650              	.L30:
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 651              		.loc 1 430 0
 652 0388 7B68     		ldr	r3, [r7, #4]
 653 038a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 654 038c 9BB2     		uxth	r3, r3
 655 038e 23F48063 		bic	r3, r3, #1024
 656 0392 9AB2     		uxth	r2, r3
 657 0394 7B68     		ldr	r3, [r7, #4]
 658 0396 1A80     		strh	r2, [r3, #0]	@ movhi
 659              	.L29:
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 660              		.loc 1 432 0
 661 0398 07F10C07 		add	r7, r7, #12
 662 039c BD46     		mov	sp, r7
 663 039e 80BC     		pop	{r7}
 664 03a0 7047     		bx	lr
 665              		.cfi_endproc
 666              	.LFE117:
 668 03a2 00BF     		.align	2
 669              		.global	I2C_OwnAddress2Config
 670              		.thumb
 671              		.thumb_func
 673              	I2C_OwnAddress2Config:
 674              	.LFB118:
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 675              		.loc 1 441 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 16
 678              		@ frame_needed = 1, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680 03a4 80B4     		push	{r7}
 681              	.LCFI24:
 682              		.cfi_def_cfa_offset 4
 683              		.cfi_offset 7, -4
 684 03a6 85B0     		sub	sp, sp, #20
 685              	.LCFI25:
 686              		.cfi_def_cfa_offset 24
 687 03a8 00AF     		add	r7, sp, #0
 688              	.LCFI26:
 689              		.cfi_def_cfa_register 7
 690 03aa 7860     		str	r0, [r7, #4]
 691 03ac 0B46     		mov	r3, r1
 692 03ae FB70     		strb	r3, [r7, #3]
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 693              		.loc 1 442 0
 694 03b0 4FF00003 		mov	r3, #0
 695 03b4 FB81     		strh	r3, [r7, #14]	@ movhi
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 696              		.loc 1 448 0
 697 03b6 7B68     		ldr	r3, [r7, #4]
 698 03b8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 699 03ba FB81     		strh	r3, [r7, #14]	@ movhi
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 700              		.loc 1 451 0
 701 03bc FB89     		ldrh	r3, [r7, #14]	@ movhi
 702 03be 23F0FE03 		bic	r3, r3, #254
 703 03c2 FB81     		strh	r3, [r7, #14]	@ movhi
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 704              		.loc 1 454 0
 705 03c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 706 03c6 9BB2     		uxth	r3, r3
 707 03c8 03F0FE03 		and	r3, r3, #254
 708 03cc 9AB2     		uxth	r2, r3
 709 03ce FB89     		ldrh	r3, [r7, #14]
 710 03d0 1343     		orrs	r3, r3, r2
 711 03d2 9BB2     		uxth	r3, r3
 712 03d4 FB81     		strh	r3, [r7, #14]	@ movhi
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 713              		.loc 1 457 0
 714 03d6 7B68     		ldr	r3, [r7, #4]
 715 03d8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 716 03da 9A81     		strh	r2, [r3, #12]	@ movhi
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 717              		.loc 1 458 0
 718 03dc 07F11407 		add	r7, r7, #20
 719 03e0 BD46     		mov	sp, r7
 720 03e2 80BC     		pop	{r7}
 721 03e4 7047     		bx	lr
 722              		.cfi_endproc
 723              	.LFE118:
 725 03e6 00BF     		.align	2
 726              		.global	I2C_DualAddressCmd
 727              		.thumb
 728              		.thumb_func
 730              	I2C_DualAddressCmd:
 731              	.LFB119:
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 732              		.loc 1 468 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 8
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737 03e8 80B4     		push	{r7}
 738              	.LCFI27:
 739              		.cfi_def_cfa_offset 4
 740              		.cfi_offset 7, -4
 741 03ea 83B0     		sub	sp, sp, #12
 742              	.LCFI28:
 743              		.cfi_def_cfa_offset 16
 744 03ec 00AF     		add	r7, sp, #0
 745              	.LCFI29:
 746              		.cfi_def_cfa_register 7
 747 03ee 7860     		str	r0, [r7, #4]
 748 03f0 0B46     		mov	r3, r1
 749 03f2 FB70     		strb	r3, [r7, #3]
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 750              		.loc 1 472 0
 751 03f4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 752 03f6 002B     		cmp	r3, #0
 753 03f8 08D0     		beq	.L34
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 754              		.loc 1 475 0
 755 03fa 7B68     		ldr	r3, [r7, #4]
 756 03fc 9B89     		ldrh	r3, [r3, #12]	@ movhi
 757 03fe 9BB2     		uxth	r3, r3
 758 0400 43F00103 		orr	r3, r3, #1
 759 0404 9AB2     		uxth	r2, r3
 760 0406 7B68     		ldr	r3, [r7, #4]
 761 0408 9A81     		strh	r2, [r3, #12]	@ movhi
 762 040a 07E0     		b	.L33
 763              	.L34:
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 764              		.loc 1 480 0
 765 040c 7B68     		ldr	r3, [r7, #4]
 766 040e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 767 0410 9BB2     		uxth	r3, r3
 768 0412 23F00103 		bic	r3, r3, #1
 769 0416 9AB2     		uxth	r2, r3
 770 0418 7B68     		ldr	r3, [r7, #4]
 771 041a 9A81     		strh	r2, [r3, #12]	@ movhi
 772              	.L33:
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 773              		.loc 1 482 0
 774 041c 07F10C07 		add	r7, r7, #12
 775 0420 BD46     		mov	sp, r7
 776 0422 80BC     		pop	{r7}
 777 0424 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE119:
 781 0426 00BF     		.align	2
 782              		.global	I2C_GeneralCallCmd
 783              		.thumb
 784              		.thumb_func
 786              	I2C_GeneralCallCmd:
 787              	.LFB120:
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 788              		.loc 1 492 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 8
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793 0428 80B4     		push	{r7}
 794              	.LCFI30:
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 7, -4
 797 042a 83B0     		sub	sp, sp, #12
 798              	.LCFI31:
 799              		.cfi_def_cfa_offset 16
 800 042c 00AF     		add	r7, sp, #0
 801              	.LCFI32:
 802              		.cfi_def_cfa_register 7
 803 042e 7860     		str	r0, [r7, #4]
 804 0430 0B46     		mov	r3, r1
 805 0432 FB70     		strb	r3, [r7, #3]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 806              		.loc 1 496 0
 807 0434 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 808 0436 002B     		cmp	r3, #0
 809 0438 08D0     		beq	.L37
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 810              		.loc 1 499 0
 811 043a 7B68     		ldr	r3, [r7, #4]
 812 043c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 813 043e 9BB2     		uxth	r3, r3
 814 0440 43F04003 		orr	r3, r3, #64
 815 0444 9AB2     		uxth	r2, r3
 816 0446 7B68     		ldr	r3, [r7, #4]
 817 0448 1A80     		strh	r2, [r3, #0]	@ movhi
 818 044a 07E0     		b	.L36
 819              	.L37:
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 820              		.loc 1 504 0
 821 044c 7B68     		ldr	r3, [r7, #4]
 822 044e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 823 0450 9BB2     		uxth	r3, r3
 824 0452 23F04003 		bic	r3, r3, #64
 825 0456 9AB2     		uxth	r2, r3
 826 0458 7B68     		ldr	r3, [r7, #4]
 827 045a 1A80     		strh	r2, [r3, #0]	@ movhi
 828              	.L36:
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 829              		.loc 1 506 0
 830 045c 07F10C07 		add	r7, r7, #12
 831 0460 BD46     		mov	sp, r7
 832 0462 80BC     		pop	{r7}
 833 0464 7047     		bx	lr
 834              		.cfi_endproc
 835              	.LFE120:
 837 0466 00BF     		.align	2
 838              		.global	I2C_SoftwareResetCmd
 839              		.thumb
 840              		.thumb_func
 842              	I2C_SoftwareResetCmd:
 843              	.LFB121:
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 844              		.loc 1 518 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 8
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849 0468 80B4     		push	{r7}
 850              	.LCFI33:
 851              		.cfi_def_cfa_offset 4
 852              		.cfi_offset 7, -4
 853 046a 83B0     		sub	sp, sp, #12
 854              	.LCFI34:
 855              		.cfi_def_cfa_offset 16
 856 046c 00AF     		add	r7, sp, #0
 857              	.LCFI35:
 858              		.cfi_def_cfa_register 7
 859 046e 7860     		str	r0, [r7, #4]
 860 0470 0B46     		mov	r3, r1
 861 0472 FB70     		strb	r3, [r7, #3]
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 862              		.loc 1 522 0
 863 0474 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 864 0476 002B     		cmp	r3, #0
 865 0478 0AD0     		beq	.L40
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 866              		.loc 1 525 0
 867 047a 7B68     		ldr	r3, [r7, #4]
 868 047c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 869 047e 9BB2     		uxth	r3, r3
 870 0480 6FEA4343 		mvn	r3, r3, lsl #17
 871 0484 6FEA5343 		mvn	r3, r3, lsr #17
 872 0488 9AB2     		uxth	r2, r3
 873 048a 7B68     		ldr	r3, [r7, #4]
 874 048c 1A80     		strh	r2, [r3, #0]	@ movhi
 875 048e 09E0     		b	.L39
 876              	.L40:
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 877              		.loc 1 530 0
 878 0490 7B68     		ldr	r3, [r7, #4]
 879 0492 1B88     		ldrh	r3, [r3, #0]	@ movhi
 880 0494 9BB2     		uxth	r3, r3
 881 0496 4FEA4343 		lsl	r3, r3, #17
 882 049a 4FEA5343 		lsr	r3, r3, #17
 883 049e 9AB2     		uxth	r2, r3
 884 04a0 7B68     		ldr	r3, [r7, #4]
 885 04a2 1A80     		strh	r2, [r3, #0]	@ movhi
 886              	.L39:
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 887              		.loc 1 532 0
 888 04a4 07F10C07 		add	r7, r7, #12
 889 04a8 BD46     		mov	sp, r7
 890 04aa 80BC     		pop	{r7}
 891 04ac 7047     		bx	lr
 892              		.cfi_endproc
 893              	.LFE121:
 895 04ae 00BF     		.align	2
 896              		.global	I2C_StretchClockCmd
 897              		.thumb
 898              		.thumb_func
 900              	I2C_StretchClockCmd:
 901              	.LFB122:
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 902              		.loc 1 542 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 8
 905              		@ frame_needed = 1, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 907 04b0 80B4     		push	{r7}
 908              	.LCFI36:
 909              		.cfi_def_cfa_offset 4
 910              		.cfi_offset 7, -4
 911 04b2 83B0     		sub	sp, sp, #12
 912              	.LCFI37:
 913              		.cfi_def_cfa_offset 16
 914 04b4 00AF     		add	r7, sp, #0
 915              	.LCFI38:
 916              		.cfi_def_cfa_register 7
 917 04b6 7860     		str	r0, [r7, #4]
 918 04b8 0B46     		mov	r3, r1
 919 04ba FB70     		strb	r3, [r7, #3]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 920              		.loc 1 546 0
 921 04bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 922 04be 002B     		cmp	r3, #0
 923 04c0 08D1     		bne	.L43
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 924              		.loc 1 549 0
 925 04c2 7B68     		ldr	r3, [r7, #4]
 926 04c4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 927 04c6 9BB2     		uxth	r3, r3
 928 04c8 43F08003 		orr	r3, r3, #128
 929 04cc 9AB2     		uxth	r2, r3
 930 04ce 7B68     		ldr	r3, [r7, #4]
 931 04d0 1A80     		strh	r2, [r3, #0]	@ movhi
 932 04d2 07E0     		b	.L42
 933              	.L43:
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 934              		.loc 1 554 0
 935 04d4 7B68     		ldr	r3, [r7, #4]
 936 04d6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 937 04d8 9BB2     		uxth	r3, r3
 938 04da 23F08003 		bic	r3, r3, #128
 939 04de 9AB2     		uxth	r2, r3
 940 04e0 7B68     		ldr	r3, [r7, #4]
 941 04e2 1A80     		strh	r2, [r3, #0]	@ movhi
 942              	.L42:
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 943              		.loc 1 556 0
 944 04e4 07F10C07 		add	r7, r7, #12
 945 04e8 BD46     		mov	sp, r7
 946 04ea 80BC     		pop	{r7}
 947 04ec 7047     		bx	lr
 948              		.cfi_endproc
 949              	.LFE122:
 951 04ee 00BF     		.align	2
 952              		.global	I2C_FastModeDutyCycleConfig
 953              		.thumb
 954              		.thumb_func
 956              	I2C_FastModeDutyCycleConfig:
 957              	.LFB123:
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 958              		.loc 1 568 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 8
 961              		@ frame_needed = 1, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963 04f0 80B4     		push	{r7}
 964              	.LCFI39:
 965              		.cfi_def_cfa_offset 4
 966              		.cfi_offset 7, -4
 967 04f2 83B0     		sub	sp, sp, #12
 968              	.LCFI40:
 969              		.cfi_def_cfa_offset 16
 970 04f4 00AF     		add	r7, sp, #0
 971              	.LCFI41:
 972              		.cfi_def_cfa_register 7
 973 04f6 7860     		str	r0, [r7, #4]
 974 04f8 0B46     		mov	r3, r1
 975 04fa 7B80     		strh	r3, [r7, #2]	@ movhi
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 976              		.loc 1 572 0
 977 04fc 7B88     		ldrh	r3, [r7, #2]
 978 04fe B3F5804F 		cmp	r3, #16384
 979 0502 08D0     		beq	.L46
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 980              		.loc 1 575 0
 981 0504 7B68     		ldr	r3, [r7, #4]
 982 0506 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 983 0508 9BB2     		uxth	r3, r3
 984 050a 23F48043 		bic	r3, r3, #16384
 985 050e 9AB2     		uxth	r2, r3
 986 0510 7B68     		ldr	r3, [r7, #4]
 987 0512 9A83     		strh	r2, [r3, #28]	@ movhi
 988 0514 07E0     		b	.L45
 989              	.L46:
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 990              		.loc 1 580 0
 991 0516 7B68     		ldr	r3, [r7, #4]
 992 0518 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 993 051a 9BB2     		uxth	r3, r3
 994 051c 43F48043 		orr	r3, r3, #16384
 995 0520 9AB2     		uxth	r2, r3
 996 0522 7B68     		ldr	r3, [r7, #4]
 997 0524 9A83     		strh	r2, [r3, #28]	@ movhi
 998              	.L45:
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 999              		.loc 1 582 0
 1000 0526 07F10C07 		add	r7, r7, #12
 1001 052a BD46     		mov	sp, r7
 1002 052c 80BC     		pop	{r7}
 1003 052e 7047     		bx	lr
 1004              		.cfi_endproc
 1005              	.LFE123:
 1007              		.align	2
 1008              		.global	I2C_NACKPositionConfig
 1009              		.thumb
 1010              		.thumb_func
 1012              	I2C_NACKPositionConfig:
 1013              	.LFB124:
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1014              		.loc 1 606 0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 8
 1017              		@ frame_needed = 1, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
 1019 0530 80B4     		push	{r7}
 1020              	.LCFI42:
 1021              		.cfi_def_cfa_offset 4
 1022              		.cfi_offset 7, -4
 1023 0532 83B0     		sub	sp, sp, #12
 1024              	.LCFI43:
 1025              		.cfi_def_cfa_offset 16
 1026 0534 00AF     		add	r7, sp, #0
 1027              	.LCFI44:
 1028              		.cfi_def_cfa_register 7
 1029 0536 7860     		str	r0, [r7, #4]
 1030 0538 0B46     		mov	r3, r1
 1031 053a 7B80     		strh	r3, [r7, #2]	@ movhi
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 1032              		.loc 1 612 0
 1033 053c 7B88     		ldrh	r3, [r7, #2]
 1034 053e B3F5006F 		cmp	r3, #2048
 1035 0542 08D1     		bne	.L49
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 1036              		.loc 1 615 0
 1037 0544 7B68     		ldr	r3, [r7, #4]
 1038 0546 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1039 0548 9BB2     		uxth	r3, r3
 1040 054a 43F40063 		orr	r3, r3, #2048
 1041 054e 9AB2     		uxth	r2, r3
 1042 0550 7B68     		ldr	r3, [r7, #4]
 1043 0552 1A80     		strh	r2, [r3, #0]	@ movhi
 1044 0554 07E0     		b	.L48
 1045              	.L49:
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 1046              		.loc 1 620 0
 1047 0556 7B68     		ldr	r3, [r7, #4]
 1048 0558 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1049 055a 9BB2     		uxth	r3, r3
 1050 055c 23F40063 		bic	r3, r3, #2048
 1051 0560 9AB2     		uxth	r2, r3
 1052 0562 7B68     		ldr	r3, [r7, #4]
 1053 0564 1A80     		strh	r2, [r3, #0]	@ movhi
 1054              	.L48:
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1055              		.loc 1 622 0
 1056 0566 07F10C07 		add	r7, r7, #12
 1057 056a BD46     		mov	sp, r7
 1058 056c 80BC     		pop	{r7}
 1059 056e 7047     		bx	lr
 1060              		.cfi_endproc
 1061              	.LFE124:
 1063              		.align	2
 1064              		.global	I2C_SMBusAlertConfig
 1065              		.thumb
 1066              		.thumb_func
 1068              	I2C_SMBusAlertConfig:
 1069              	.LFB125:
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1070              		.loc 1 634 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 8
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075 0570 80B4     		push	{r7}
 1076              	.LCFI45:
 1077              		.cfi_def_cfa_offset 4
 1078              		.cfi_offset 7, -4
 1079 0572 83B0     		sub	sp, sp, #12
 1080              	.LCFI46:
 1081              		.cfi_def_cfa_offset 16
 1082 0574 00AF     		add	r7, sp, #0
 1083              	.LCFI47:
 1084              		.cfi_def_cfa_register 7
 1085 0576 7860     		str	r0, [r7, #4]
 1086 0578 0B46     		mov	r3, r1
 1087 057a 7B80     		strh	r3, [r7, #2]	@ movhi
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 1088              		.loc 1 638 0
 1089 057c 7B88     		ldrh	r3, [r7, #2]
 1090 057e B3F5005F 		cmp	r3, #8192
 1091 0582 08D1     		bne	.L52
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1092              		.loc 1 641 0
 1093 0584 7B68     		ldr	r3, [r7, #4]
 1094 0586 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1095 0588 9BB2     		uxth	r3, r3
 1096 058a 43F40053 		orr	r3, r3, #8192
 1097 058e 9AB2     		uxth	r2, r3
 1098 0590 7B68     		ldr	r3, [r7, #4]
 1099 0592 1A80     		strh	r2, [r3, #0]	@ movhi
 1100 0594 07E0     		b	.L51
 1101              	.L52:
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 1102              		.loc 1 646 0
 1103 0596 7B68     		ldr	r3, [r7, #4]
 1104 0598 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1105 059a 9BB2     		uxth	r3, r3
 1106 059c 23F40053 		bic	r3, r3, #8192
 1107 05a0 9AB2     		uxth	r2, r3
 1108 05a2 7B68     		ldr	r3, [r7, #4]
 1109 05a4 1A80     		strh	r2, [r3, #0]	@ movhi
 1110              	.L51:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1111              		.loc 1 648 0
 1112 05a6 07F10C07 		add	r7, r7, #12
 1113 05aa BD46     		mov	sp, r7
 1114 05ac 80BC     		pop	{r7}
 1115 05ae 7047     		bx	lr
 1116              		.cfi_endproc
 1117              	.LFE125:
 1119              		.align	2
 1120              		.global	I2C_ARPCmd
 1121              		.thumb
 1122              		.thumb_func
 1124              	I2C_ARPCmd:
 1125              	.LFB126:
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1126              		.loc 1 658 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 8
 1129              		@ frame_needed = 1, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 1131 05b0 80B4     		push	{r7}
 1132              	.LCFI48:
 1133              		.cfi_def_cfa_offset 4
 1134              		.cfi_offset 7, -4
 1135 05b2 83B0     		sub	sp, sp, #12
 1136              	.LCFI49:
 1137              		.cfi_def_cfa_offset 16
 1138 05b4 00AF     		add	r7, sp, #0
 1139              	.LCFI50:
 1140              		.cfi_def_cfa_register 7
 1141 05b6 7860     		str	r0, [r7, #4]
 1142 05b8 0B46     		mov	r3, r1
 1143 05ba FB70     		strb	r3, [r7, #3]
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1144              		.loc 1 662 0
 1145 05bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1146 05be 002B     		cmp	r3, #0
 1147 05c0 08D0     		beq	.L55
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 1148              		.loc 1 665 0
 1149 05c2 7B68     		ldr	r3, [r7, #4]
 1150 05c4 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1151 05c6 9BB2     		uxth	r3, r3
 1152 05c8 43F01003 		orr	r3, r3, #16
 1153 05cc 9AB2     		uxth	r2, r3
 1154 05ce 7B68     		ldr	r3, [r7, #4]
 1155 05d0 1A80     		strh	r2, [r3, #0]	@ movhi
 1156 05d2 07E0     		b	.L54
 1157              	.L55:
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 1158              		.loc 1 670 0
 1159 05d4 7B68     		ldr	r3, [r7, #4]
 1160 05d6 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1161 05d8 9BB2     		uxth	r3, r3
 1162 05da 23F01003 		bic	r3, r3, #16
 1163 05de 9AB2     		uxth	r2, r3
 1164 05e0 7B68     		ldr	r3, [r7, #4]
 1165 05e2 1A80     		strh	r2, [r3, #0]	@ movhi
 1166              	.L54:
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1167              		.loc 1 672 0
 1168 05e4 07F10C07 		add	r7, r7, #12
 1169 05e8 BD46     		mov	sp, r7
 1170 05ea 80BC     		pop	{r7}
 1171 05ec 7047     		bx	lr
 1172              		.cfi_endproc
 1173              	.LFE126:
 1175 05ee 00BF     		.align	2
 1176              		.global	I2C_SendData
 1177              		.thumb
 1178              		.thumb_func
 1180              	I2C_SendData:
 1181              	.LFB127:
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1182              		.loc 1 696 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 8
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 1187 05f0 80B4     		push	{r7}
 1188              	.LCFI51:
 1189              		.cfi_def_cfa_offset 4
 1190              		.cfi_offset 7, -4
 1191 05f2 83B0     		sub	sp, sp, #12
 1192              	.LCFI52:
 1193              		.cfi_def_cfa_offset 16
 1194 05f4 00AF     		add	r7, sp, #0
 1195              	.LCFI53:
 1196              		.cfi_def_cfa_register 7
 1197 05f6 7860     		str	r0, [r7, #4]
 1198 05f8 0B46     		mov	r3, r1
 1199 05fa FB70     		strb	r3, [r7, #3]
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 1200              		.loc 1 700 0
 1201 05fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1202 05fe 9AB2     		uxth	r2, r3
 1203 0600 7B68     		ldr	r3, [r7, #4]
 1204 0602 1A82     		strh	r2, [r3, #16]	@ movhi
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1205              		.loc 1 701 0
 1206 0604 07F10C07 		add	r7, r7, #12
 1207 0608 BD46     		mov	sp, r7
 1208 060a 80BC     		pop	{r7}
 1209 060c 7047     		bx	lr
 1210              		.cfi_endproc
 1211              	.LFE127:
 1213 060e 00BF     		.align	2
 1214              		.global	I2C_ReceiveData
 1215              		.thumb
 1216              		.thumb_func
 1218              	I2C_ReceiveData:
 1219              	.LFB128:
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1220              		.loc 1 709 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 8
 1223              		@ frame_needed = 1, uses_anonymous_args = 0
 1224              		@ link register save eliminated.
 1225 0610 80B4     		push	{r7}
 1226              	.LCFI54:
 1227              		.cfi_def_cfa_offset 4
 1228              		.cfi_offset 7, -4
 1229 0612 83B0     		sub	sp, sp, #12
 1230              	.LCFI55:
 1231              		.cfi_def_cfa_offset 16
 1232 0614 00AF     		add	r7, sp, #0
 1233              	.LCFI56:
 1234              		.cfi_def_cfa_register 7
 1235 0616 7860     		str	r0, [r7, #4]
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 1236              		.loc 1 713 0
 1237 0618 7B68     		ldr	r3, [r7, #4]
 1238 061a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1239 061c 9BB2     		uxth	r3, r3
 1240 061e DBB2     		uxtb	r3, r3
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1241              		.loc 1 714 0
 1242 0620 1846     		mov	r0, r3
 1243 0622 07F10C07 		add	r7, r7, #12
 1244 0626 BD46     		mov	sp, r7
 1245 0628 80BC     		pop	{r7}
 1246 062a 7047     		bx	lr
 1247              		.cfi_endproc
 1248              	.LFE128:
 1250              		.align	2
 1251              		.global	I2C_TransmitPEC
 1252              		.thumb
 1253              		.thumb_func
 1255              	I2C_TransmitPEC:
 1256              	.LFB129:
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1257              		.loc 1 740 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 8
 1260              		@ frame_needed = 1, uses_anonymous_args = 0
 1261              		@ link register save eliminated.
 1262 062c 80B4     		push	{r7}
 1263              	.LCFI57:
 1264              		.cfi_def_cfa_offset 4
 1265              		.cfi_offset 7, -4
 1266 062e 83B0     		sub	sp, sp, #12
 1267              	.LCFI58:
 1268              		.cfi_def_cfa_offset 16
 1269 0630 00AF     		add	r7, sp, #0
 1270              	.LCFI59:
 1271              		.cfi_def_cfa_register 7
 1272 0632 7860     		str	r0, [r7, #4]
 1273 0634 0B46     		mov	r3, r1
 1274 0636 FB70     		strb	r3, [r7, #3]
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1275              		.loc 1 744 0
 1276 0638 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1277 063a 002B     		cmp	r3, #0
 1278 063c 08D0     		beq	.L61
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 1279              		.loc 1 747 0
 1280 063e 7B68     		ldr	r3, [r7, #4]
 1281 0640 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1282 0642 9BB2     		uxth	r3, r3
 1283 0644 43F48053 		orr	r3, r3, #4096
 1284 0648 9AB2     		uxth	r2, r3
 1285 064a 7B68     		ldr	r3, [r7, #4]
 1286 064c 1A80     		strh	r2, [r3, #0]	@ movhi
 1287 064e 07E0     		b	.L60
 1288              	.L61:
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 1289              		.loc 1 752 0
 1290 0650 7B68     		ldr	r3, [r7, #4]
 1291 0652 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1292 0654 9BB2     		uxth	r3, r3
 1293 0656 23F48053 		bic	r3, r3, #4096
 1294 065a 9AB2     		uxth	r2, r3
 1295 065c 7B68     		ldr	r3, [r7, #4]
 1296 065e 1A80     		strh	r2, [r3, #0]	@ movhi
 1297              	.L60:
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1298              		.loc 1 754 0
 1299 0660 07F10C07 		add	r7, r7, #12
 1300 0664 BD46     		mov	sp, r7
 1301 0666 80BC     		pop	{r7}
 1302 0668 7047     		bx	lr
 1303              		.cfi_endproc
 1304              	.LFE129:
 1306 066a 00BF     		.align	2
 1307              		.global	I2C_PECPositionConfig
 1308              		.thumb
 1309              		.thumb_func
 1311              	I2C_PECPositionConfig:
 1312              	.LFB130:
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1313              		.loc 1 771 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 8
 1316              		@ frame_needed = 1, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318 066c 80B4     		push	{r7}
 1319              	.LCFI60:
 1320              		.cfi_def_cfa_offset 4
 1321              		.cfi_offset 7, -4
 1322 066e 83B0     		sub	sp, sp, #12
 1323              	.LCFI61:
 1324              		.cfi_def_cfa_offset 16
 1325 0670 00AF     		add	r7, sp, #0
 1326              	.LCFI62:
 1327              		.cfi_def_cfa_register 7
 1328 0672 7860     		str	r0, [r7, #4]
 1329 0674 0B46     		mov	r3, r1
 1330 0676 7B80     		strh	r3, [r7, #2]	@ movhi
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 1331              		.loc 1 775 0
 1332 0678 7B88     		ldrh	r3, [r7, #2]
 1333 067a B3F5006F 		cmp	r3, #2048
 1334 067e 08D1     		bne	.L64
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 1335              		.loc 1 778 0
 1336 0680 7B68     		ldr	r3, [r7, #4]
 1337 0682 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1338 0684 9BB2     		uxth	r3, r3
 1339 0686 43F40063 		orr	r3, r3, #2048
 1340 068a 9AB2     		uxth	r2, r3
 1341 068c 7B68     		ldr	r3, [r7, #4]
 1342 068e 1A80     		strh	r2, [r3, #0]	@ movhi
 1343 0690 07E0     		b	.L63
 1344              	.L64:
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 1345              		.loc 1 783 0
 1346 0692 7B68     		ldr	r3, [r7, #4]
 1347 0694 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1348 0696 9BB2     		uxth	r3, r3
 1349 0698 23F40063 		bic	r3, r3, #2048
 1350 069c 9AB2     		uxth	r2, r3
 1351 069e 7B68     		ldr	r3, [r7, #4]
 1352 06a0 1A80     		strh	r2, [r3, #0]	@ movhi
 1353              	.L63:
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1354              		.loc 1 785 0
 1355 06a2 07F10C07 		add	r7, r7, #12
 1356 06a6 BD46     		mov	sp, r7
 1357 06a8 80BC     		pop	{r7}
 1358 06aa 7047     		bx	lr
 1359              		.cfi_endproc
 1360              	.LFE130:
 1362              		.align	2
 1363              		.global	I2C_CalculatePEC
 1364              		.thumb
 1365              		.thumb_func
 1367              	I2C_CalculatePEC:
 1368              	.LFB131:
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1369              		.loc 1 795 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 8
 1372              		@ frame_needed = 1, uses_anonymous_args = 0
 1373              		@ link register save eliminated.
 1374 06ac 80B4     		push	{r7}
 1375              	.LCFI63:
 1376              		.cfi_def_cfa_offset 4
 1377              		.cfi_offset 7, -4
 1378 06ae 83B0     		sub	sp, sp, #12
 1379              	.LCFI64:
 1380              		.cfi_def_cfa_offset 16
 1381 06b0 00AF     		add	r7, sp, #0
 1382              	.LCFI65:
 1383              		.cfi_def_cfa_register 7
 1384 06b2 7860     		str	r0, [r7, #4]
 1385 06b4 0B46     		mov	r3, r1
 1386 06b6 FB70     		strb	r3, [r7, #3]
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1387              		.loc 1 799 0
 1388 06b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1389 06ba 002B     		cmp	r3, #0
 1390 06bc 08D0     		beq	.L67
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 1391              		.loc 1 802 0
 1392 06be 7B68     		ldr	r3, [r7, #4]
 1393 06c0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1394 06c2 9BB2     		uxth	r3, r3
 1395 06c4 43F02003 		orr	r3, r3, #32
 1396 06c8 9AB2     		uxth	r2, r3
 1397 06ca 7B68     		ldr	r3, [r7, #4]
 1398 06cc 1A80     		strh	r2, [r3, #0]	@ movhi
 1399 06ce 07E0     		b	.L66
 1400              	.L67:
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 1401              		.loc 1 807 0
 1402 06d0 7B68     		ldr	r3, [r7, #4]
 1403 06d2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1404 06d4 9BB2     		uxth	r3, r3
 1405 06d6 23F02003 		bic	r3, r3, #32
 1406 06da 9AB2     		uxth	r2, r3
 1407 06dc 7B68     		ldr	r3, [r7, #4]
 1408 06de 1A80     		strh	r2, [r3, #0]	@ movhi
 1409              	.L66:
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1410              		.loc 1 809 0
 1411 06e0 07F10C07 		add	r7, r7, #12
 1412 06e4 BD46     		mov	sp, r7
 1413 06e6 80BC     		pop	{r7}
 1414 06e8 7047     		bx	lr
 1415              		.cfi_endproc
 1416              	.LFE131:
 1418 06ea 00BF     		.align	2
 1419              		.global	I2C_GetPEC
 1420              		.thumb
 1421              		.thumb_func
 1423              	I2C_GetPEC:
 1424              	.LFB132:
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1425              		.loc 1 817 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 8
 1428              		@ frame_needed = 1, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 1430 06ec 80B4     		push	{r7}
 1431              	.LCFI66:
 1432              		.cfi_def_cfa_offset 4
 1433              		.cfi_offset 7, -4
 1434 06ee 83B0     		sub	sp, sp, #12
 1435              	.LCFI67:
 1436              		.cfi_def_cfa_offset 16
 1437 06f0 00AF     		add	r7, sp, #0
 1438              	.LCFI68:
 1439              		.cfi_def_cfa_register 7
 1440 06f2 7860     		str	r0, [r7, #4]
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1441              		.loc 1 821 0
 1442 06f4 7B68     		ldr	r3, [r7, #4]
 1443 06f6 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1444 06f8 9BB2     		uxth	r3, r3
 1445 06fa 4FEA1323 		lsr	r3, r3, #8
 1446 06fe 9BB2     		uxth	r3, r3
 1447 0700 DBB2     		uxtb	r3, r3
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1448              		.loc 1 822 0
 1449 0702 1846     		mov	r0, r3
 1450 0704 07F10C07 		add	r7, r7, #12
 1451 0708 BD46     		mov	sp, r7
 1452 070a 80BC     		pop	{r7}
 1453 070c 7047     		bx	lr
 1454              		.cfi_endproc
 1455              	.LFE132:
 1457 070e 00BF     		.align	2
 1458              		.global	I2C_DMACmd
 1459              		.thumb
 1460              		.thumb_func
 1462              	I2C_DMACmd:
 1463              	.LFB133:
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1464              		.loc 1 850 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 8
 1467              		@ frame_needed = 1, uses_anonymous_args = 0
 1468              		@ link register save eliminated.
 1469 0710 80B4     		push	{r7}
 1470              	.LCFI69:
 1471              		.cfi_def_cfa_offset 4
 1472              		.cfi_offset 7, -4
 1473 0712 83B0     		sub	sp, sp, #12
 1474              	.LCFI70:
 1475              		.cfi_def_cfa_offset 16
 1476 0714 00AF     		add	r7, sp, #0
 1477              	.LCFI71:
 1478              		.cfi_def_cfa_register 7
 1479 0716 7860     		str	r0, [r7, #4]
 1480 0718 0B46     		mov	r3, r1
 1481 071a FB70     		strb	r3, [r7, #3]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1482              		.loc 1 854 0
 1483 071c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1484 071e 002B     		cmp	r3, #0
 1485 0720 08D0     		beq	.L72
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1486              		.loc 1 857 0
 1487 0722 7B68     		ldr	r3, [r7, #4]
 1488 0724 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1489 0726 9BB2     		uxth	r3, r3
 1490 0728 43F40063 		orr	r3, r3, #2048
 1491 072c 9AB2     		uxth	r2, r3
 1492 072e 7B68     		ldr	r3, [r7, #4]
 1493 0730 9A80     		strh	r2, [r3, #4]	@ movhi
 1494 0732 07E0     		b	.L71
 1495              	.L72:
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 1496              		.loc 1 862 0
 1497 0734 7B68     		ldr	r3, [r7, #4]
 1498 0736 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1499 0738 9BB2     		uxth	r3, r3
 1500 073a 23F40063 		bic	r3, r3, #2048
 1501 073e 9AB2     		uxth	r2, r3
 1502 0740 7B68     		ldr	r3, [r7, #4]
 1503 0742 9A80     		strh	r2, [r3, #4]	@ movhi
 1504              	.L71:
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1505              		.loc 1 864 0
 1506 0744 07F10C07 		add	r7, r7, #12
 1507 0748 BD46     		mov	sp, r7
 1508 074a 80BC     		pop	{r7}
 1509 074c 7047     		bx	lr
 1510              		.cfi_endproc
 1511              	.LFE133:
 1513 074e 00BF     		.align	2
 1514              		.global	I2C_DMALastTransferCmd
 1515              		.thumb
 1516              		.thumb_func
 1518              	I2C_DMALastTransferCmd:
 1519              	.LFB134:
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1520              		.loc 1 874 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 8
 1523              		@ frame_needed = 1, uses_anonymous_args = 0
 1524              		@ link register save eliminated.
 1525 0750 80B4     		push	{r7}
 1526              	.LCFI72:
 1527              		.cfi_def_cfa_offset 4
 1528              		.cfi_offset 7, -4
 1529 0752 83B0     		sub	sp, sp, #12
 1530              	.LCFI73:
 1531              		.cfi_def_cfa_offset 16
 1532 0754 00AF     		add	r7, sp, #0
 1533              	.LCFI74:
 1534              		.cfi_def_cfa_register 7
 1535 0756 7860     		str	r0, [r7, #4]
 1536 0758 0B46     		mov	r3, r1
 1537 075a FB70     		strb	r3, [r7, #3]
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1538              		.loc 1 878 0
 1539 075c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1540 075e 002B     		cmp	r3, #0
 1541 0760 08D0     		beq	.L75
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1542              		.loc 1 881 0
 1543 0762 7B68     		ldr	r3, [r7, #4]
 1544 0764 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1545 0766 9BB2     		uxth	r3, r3
 1546 0768 43F48053 		orr	r3, r3, #4096
 1547 076c 9AB2     		uxth	r2, r3
 1548 076e 7B68     		ldr	r3, [r7, #4]
 1549 0770 9A80     		strh	r2, [r3, #4]	@ movhi
 1550 0772 07E0     		b	.L74
 1551              	.L75:
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1552              		.loc 1 886 0
 1553 0774 7B68     		ldr	r3, [r7, #4]
 1554 0776 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1555 0778 9BB2     		uxth	r3, r3
 1556 077a 23F48053 		bic	r3, r3, #4096
 1557 077e 9AB2     		uxth	r2, r3
 1558 0780 7B68     		ldr	r3, [r7, #4]
 1559 0782 9A80     		strh	r2, [r3, #4]	@ movhi
 1560              	.L74:
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1561              		.loc 1 888 0
 1562 0784 07F10C07 		add	r7, r7, #12
 1563 0788 BD46     		mov	sp, r7
 1564 078a 80BC     		pop	{r7}
 1565 078c 7047     		bx	lr
 1566              		.cfi_endproc
 1567              	.LFE134:
 1569 078e 00BF     		.align	2
 1570              		.global	I2C_ReadRegister
 1571              		.thumb
 1572              		.thumb_func
 1574              	I2C_ReadRegister:
 1575              	.LFB135:
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1576              		.loc 1 1012 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 16
 1579              		@ frame_needed = 1, uses_anonymous_args = 0
 1580              		@ link register save eliminated.
 1581 0790 80B4     		push	{r7}
 1582              	.LCFI75:
 1583              		.cfi_def_cfa_offset 4
 1584              		.cfi_offset 7, -4
 1585 0792 85B0     		sub	sp, sp, #20
 1586              	.LCFI76:
 1587              		.cfi_def_cfa_offset 24
 1588 0794 00AF     		add	r7, sp, #0
 1589              	.LCFI77:
 1590              		.cfi_def_cfa_register 7
 1591 0796 7860     		str	r0, [r7, #4]
 1592 0798 0B46     		mov	r3, r1
 1593 079a FB70     		strb	r3, [r7, #3]
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1594              		.loc 1 1013 0
 1595 079c 4FF00003 		mov	r3, #0
 1596 07a0 FB60     		str	r3, [r7, #12]
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1597              		.loc 1 1019 0
 1598 07a2 7B68     		ldr	r3, [r7, #4]
 1599 07a4 FB60     		str	r3, [r7, #12]
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1600              		.loc 1 1020 0
 1601 07a6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1602 07a8 FB68     		ldr	r3, [r7, #12]
 1603 07aa D318     		adds	r3, r2, r3
 1604 07ac FB60     		str	r3, [r7, #12]
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1605              		.loc 1 1023 0
 1606 07ae FB68     		ldr	r3, [r7, #12]
 1607 07b0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1608 07b2 9BB2     		uxth	r3, r3
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1609              		.loc 1 1024 0
 1610 07b4 1846     		mov	r0, r3
 1611 07b6 07F11407 		add	r7, r7, #20
 1612 07ba BD46     		mov	sp, r7
 1613 07bc 80BC     		pop	{r7}
 1614 07be 7047     		bx	lr
 1615              		.cfi_endproc
 1616              	.LFE135:
 1618              		.align	2
 1619              		.global	I2C_ITConfig
 1620              		.thumb
 1621              		.thumb_func
 1623              	I2C_ITConfig:
 1624              	.LFB136:
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1625              		.loc 1 1039 0
 1626              		.cfi_startproc
 1627              		@ args = 0, pretend = 0, frame = 8
 1628              		@ frame_needed = 1, uses_anonymous_args = 0
 1629              		@ link register save eliminated.
 1630 07c0 80B4     		push	{r7}
 1631              	.LCFI78:
 1632              		.cfi_def_cfa_offset 4
 1633              		.cfi_offset 7, -4
 1634 07c2 83B0     		sub	sp, sp, #12
 1635              	.LCFI79:
 1636              		.cfi_def_cfa_offset 16
 1637 07c4 00AF     		add	r7, sp, #0
 1638              	.LCFI80:
 1639              		.cfi_def_cfa_register 7
 1640 07c6 7860     		str	r0, [r7, #4]
 1641 07c8 1346     		mov	r3, r2
 1642 07ca 0A46     		mov	r2, r1	@ movhi
 1643 07cc 7A80     		strh	r2, [r7, #2]	@ movhi
 1644 07ce 7B70     		strb	r3, [r7, #1]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1645              		.loc 1 1045 0
 1646 07d0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1647 07d2 002B     		cmp	r3, #0
 1648 07d4 08D0     		beq	.L80
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1649              		.loc 1 1048 0
 1650 07d6 7B68     		ldr	r3, [r7, #4]
 1651 07d8 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1652 07da 9AB2     		uxth	r2, r3
 1653 07dc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1654 07de 1343     		orrs	r3, r3, r2
 1655 07e0 9AB2     		uxth	r2, r3
 1656 07e2 7B68     		ldr	r3, [r7, #4]
 1657 07e4 9A80     		strh	r2, [r3, #4]	@ movhi
 1658 07e6 0AE0     		b	.L79
 1659              	.L80:
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1660              		.loc 1 1053 0
 1661 07e8 7B68     		ldr	r3, [r7, #4]
 1662 07ea 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1663 07ec 9AB2     		uxth	r2, r3
 1664 07ee 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1665 07f0 6FEA0303 		mvn	r3, r3
 1666 07f4 9BB2     		uxth	r3, r3
 1667 07f6 1340     		ands	r3, r3, r2
 1668 07f8 9AB2     		uxth	r2, r3
 1669 07fa 7B68     		ldr	r3, [r7, #4]
 1670 07fc 9A80     		strh	r2, [r3, #4]	@ movhi
 1671              	.L79:
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1672              		.loc 1 1055 0
 1673 07fe 07F10C07 		add	r7, r7, #12
 1674 0802 BD46     		mov	sp, r7
 1675 0804 80BC     		pop	{r7}
 1676 0806 7047     		bx	lr
 1677              		.cfi_endproc
 1678              	.LFE136:
 1680              		.align	2
 1681              		.global	I2C_CheckEvent
 1682              		.thumb
 1683              		.thumb_func
 1685              	I2C_CheckEvent:
 1686              	.LFB137:
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1687              		.loc 1 1098 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 24
 1690              		@ frame_needed = 1, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
 1692 0808 80B4     		push	{r7}
 1693              	.LCFI81:
 1694              		.cfi_def_cfa_offset 4
 1695              		.cfi_offset 7, -4
 1696 080a 87B0     		sub	sp, sp, #28
 1697              	.LCFI82:
 1698              		.cfi_def_cfa_offset 32
 1699 080c 00AF     		add	r7, sp, #0
 1700              	.LCFI83:
 1701              		.cfi_def_cfa_register 7
 1702 080e 7860     		str	r0, [r7, #4]
 1703 0810 3960     		str	r1, [r7, #0]
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1704              		.loc 1 1099 0
 1705 0812 4FF00003 		mov	r3, #0
 1706 0816 3B61     		str	r3, [r7, #16]
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1707              		.loc 1 1100 0
 1708 0818 4FF00003 		mov	r3, #0
 1709 081c FB60     		str	r3, [r7, #12]
 1710 081e 4FF00003 		mov	r3, #0
 1711 0822 BB60     		str	r3, [r7, #8]
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
 1712              		.loc 1 1101 0
 1713 0824 4FF00003 		mov	r3, #0
 1714 0828 FB75     		strb	r3, [r7, #23]
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1715              		.loc 1 1108 0
 1716 082a 7B68     		ldr	r3, [r7, #4]
 1717 082c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1718 082e 9BB2     		uxth	r3, r3
 1719 0830 FB60     		str	r3, [r7, #12]
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1720              		.loc 1 1109 0
 1721 0832 7B68     		ldr	r3, [r7, #4]
 1722 0834 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1723 0836 9BB2     		uxth	r3, r3
 1724 0838 BB60     		str	r3, [r7, #8]
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1725              		.loc 1 1110 0
 1726 083a BB68     		ldr	r3, [r7, #8]
 1727 083c 4FEA0343 		lsl	r3, r3, #16
 1728 0840 BB60     		str	r3, [r7, #8]
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1729              		.loc 1 1113 0
 1730 0842 FA68     		ldr	r2, [r7, #12]
 1731 0844 BB68     		ldr	r3, [r7, #8]
 1732 0846 1343     		orrs	r3, r3, r2
 1733 0848 23F07F43 		bic	r3, r3, #-16777216
 1734 084c 3B61     		str	r3, [r7, #16]
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1735              		.loc 1 1116 0
 1736 084e 3A69     		ldr	r2, [r7, #16]
 1737 0850 3B68     		ldr	r3, [r7, #0]
 1738 0852 1A40     		ands	r2, r2, r3
 1739 0854 3B68     		ldr	r3, [r7, #0]
 1740 0856 9A42     		cmp	r2, r3
 1741 0858 03D1     		bne	.L83
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
 1742              		.loc 1 1119 0
 1743 085a 4FF00103 		mov	r3, #1
 1744 085e FB75     		strb	r3, [r7, #23]
 1745 0860 02E0     		b	.L84
 1746              	.L83:
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
 1747              		.loc 1 1124 0
 1748 0862 4FF00003 		mov	r3, #0
 1749 0866 FB75     		strb	r3, [r7, #23]
 1750              	.L84:
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 1751              		.loc 1 1127 0
 1752 0868 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1753              		.loc 1 1128 0
 1754 086a 1846     		mov	r0, r3
 1755 086c 07F11C07 		add	r7, r7, #28
 1756 0870 BD46     		mov	sp, r7
 1757 0872 80BC     		pop	{r7}
 1758 0874 7047     		bx	lr
 1759              		.cfi_endproc
 1760              	.LFE137:
 1762 0876 00BF     		.align	2
 1763              		.global	I2C_GetLastEvent
 1764              		.thumb
 1765              		.thumb_func
 1767              	I2C_GetLastEvent:
 1768              	.LFB138:
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1769              		.loc 1 1146 0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 24
 1772              		@ frame_needed = 1, uses_anonymous_args = 0
 1773              		@ link register save eliminated.
 1774 0878 80B4     		push	{r7}
 1775              	.LCFI84:
 1776              		.cfi_def_cfa_offset 4
 1777              		.cfi_offset 7, -4
 1778 087a 87B0     		sub	sp, sp, #28
 1779              	.LCFI85:
 1780              		.cfi_def_cfa_offset 32
 1781 087c 00AF     		add	r7, sp, #0
 1782              	.LCFI86:
 1783              		.cfi_def_cfa_register 7
 1784 087e 7860     		str	r0, [r7, #4]
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 1785              		.loc 1 1147 0
 1786 0880 4FF00003 		mov	r3, #0
 1787 0884 7B61     		str	r3, [r7, #20]
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 1788              		.loc 1 1148 0
 1789 0886 4FF00003 		mov	r3, #0
 1790 088a 3B61     		str	r3, [r7, #16]
 1791 088c 4FF00003 		mov	r3, #0
 1792 0890 FB60     		str	r3, [r7, #12]
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1793              		.loc 1 1154 0
 1794 0892 7B68     		ldr	r3, [r7, #4]
 1795 0894 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1796 0896 9BB2     		uxth	r3, r3
 1797 0898 3B61     		str	r3, [r7, #16]
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1798              		.loc 1 1155 0
 1799 089a 7B68     		ldr	r3, [r7, #4]
 1800 089c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1801 089e 9BB2     		uxth	r3, r3
 1802 08a0 FB60     		str	r3, [r7, #12]
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 1803              		.loc 1 1156 0
 1804 08a2 FB68     		ldr	r3, [r7, #12]
 1805 08a4 4FEA0343 		lsl	r3, r3, #16
 1806 08a8 FB60     		str	r3, [r7, #12]
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1807              		.loc 1 1159 0
 1808 08aa 3A69     		ldr	r2, [r7, #16]
 1809 08ac FB68     		ldr	r3, [r7, #12]
 1810 08ae 1343     		orrs	r3, r3, r2
 1811 08b0 23F07F43 		bic	r3, r3, #-16777216
 1812 08b4 7B61     		str	r3, [r7, #20]
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
 1813              		.loc 1 1162 0
 1814 08b6 7B69     		ldr	r3, [r7, #20]
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1815              		.loc 1 1163 0
 1816 08b8 1846     		mov	r0, r3
 1817 08ba 07F11C07 		add	r7, r7, #28
 1818 08be BD46     		mov	sp, r7
 1819 08c0 80BC     		pop	{r7}
 1820 08c2 7047     		bx	lr
 1821              		.cfi_endproc
 1822              	.LFE138:
 1824              		.align	2
 1825              		.global	I2C_GetFlagStatus
 1826              		.thumb
 1827              		.thumb_func
 1829              	I2C_GetFlagStatus:
 1830              	.LFB139:
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1831              		.loc 1 1201 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 24
 1834              		@ frame_needed = 1, uses_anonymous_args = 0
 1835              		@ link register save eliminated.
 1836 08c4 80B4     		push	{r7}
 1837              	.LCFI87:
 1838              		.cfi_def_cfa_offset 4
 1839              		.cfi_offset 7, -4
 1840 08c6 87B0     		sub	sp, sp, #28
 1841              	.LCFI88:
 1842              		.cfi_def_cfa_offset 32
 1843 08c8 00AF     		add	r7, sp, #0
 1844              	.LCFI89:
 1845              		.cfi_def_cfa_register 7
 1846 08ca 7860     		str	r0, [r7, #4]
 1847 08cc 3960     		str	r1, [r7, #0]
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 1848              		.loc 1 1202 0
 1849 08ce 4FF00003 		mov	r3, #0
 1850 08d2 FB75     		strb	r3, [r7, #23]
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1851              		.loc 1 1203 0
 1852 08d4 4FF00003 		mov	r3, #0
 1853 08d8 3B61     		str	r3, [r7, #16]
 1854 08da 4FF00003 		mov	r3, #0
 1855 08de FB60     		str	r3, [r7, #12]
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1856              		.loc 1 1210 0
 1857 08e0 7B68     		ldr	r3, [r7, #4]
 1858 08e2 FB60     		str	r3, [r7, #12]
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1859              		.loc 1 1213 0
 1860 08e4 3B68     		ldr	r3, [r7, #0]
 1861 08e6 4FEA1373 		lsr	r3, r3, #28
 1862 08ea 3B61     		str	r3, [r7, #16]
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1863              		.loc 1 1216 0
 1864 08ec 3B68     		ldr	r3, [r7, #0]
 1865 08ee 23F07F43 		bic	r3, r3, #-16777216
 1866 08f2 3B60     		str	r3, [r7, #0]
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1867              		.loc 1 1218 0
 1868 08f4 3B69     		ldr	r3, [r7, #16]
 1869 08f6 002B     		cmp	r3, #0
 1870 08f8 04D0     		beq	.L89
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1871              		.loc 1 1221 0
 1872 08fa FB68     		ldr	r3, [r7, #12]
 1873 08fc 03F11403 		add	r3, r3, #20
 1874 0900 FB60     		str	r3, [r7, #12]
 1875 0902 07E0     		b	.L90
 1876              	.L89:
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1877              		.loc 1 1226 0
 1878 0904 3B68     		ldr	r3, [r7, #0]
 1879 0906 4FEA1343 		lsr	r3, r3, #16
 1880 090a 3B60     		str	r3, [r7, #0]
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1881              		.loc 1 1228 0
 1882 090c FB68     		ldr	r3, [r7, #12]
 1883 090e 03F11803 		add	r3, r3, #24
 1884 0912 FB60     		str	r3, [r7, #12]
 1885              	.L90:
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1886              		.loc 1 1231 0
 1887 0914 FB68     		ldr	r3, [r7, #12]
 1888 0916 1A68     		ldr	r2, [r3, #0]
 1889 0918 3B68     		ldr	r3, [r7, #0]
 1890 091a 1340     		ands	r3, r3, r2
 1891 091c 002B     		cmp	r3, #0
 1892 091e 03D0     		beq	.L91
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1893              		.loc 1 1234 0
 1894 0920 4FF00103 		mov	r3, #1
 1895 0924 FB75     		strb	r3, [r7, #23]
 1896 0926 02E0     		b	.L92
 1897              	.L91:
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1898              		.loc 1 1239 0
 1899 0928 4FF00003 		mov	r3, #0
 1900 092c FB75     		strb	r3, [r7, #23]
 1901              	.L92:
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 1902              		.loc 1 1243 0
 1903 092e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1904              		.loc 1 1244 0
 1905 0930 1846     		mov	r0, r3
 1906 0932 07F11C07 		add	r7, r7, #28
 1907 0936 BD46     		mov	sp, r7
 1908 0938 80BC     		pop	{r7}
 1909 093a 7047     		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE139:
 1913              		.align	2
 1914              		.global	I2C_ClearFlag
 1915              		.thumb
 1916              		.thumb_func
 1918              	I2C_ClearFlag:
 1919              	.LFB140:
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1920              		.loc 1 1278 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 16
 1923              		@ frame_needed = 1, uses_anonymous_args = 0
 1924              		@ link register save eliminated.
 1925 093c 80B4     		push	{r7}
 1926              	.LCFI90:
 1927              		.cfi_def_cfa_offset 4
 1928              		.cfi_offset 7, -4
 1929 093e 85B0     		sub	sp, sp, #20
 1930              	.LCFI91:
 1931              		.cfi_def_cfa_offset 24
 1932 0940 00AF     		add	r7, sp, #0
 1933              	.LCFI92:
 1934              		.cfi_def_cfa_register 7
 1935 0942 7860     		str	r0, [r7, #4]
 1936 0944 3960     		str	r1, [r7, #0]
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 1937              		.loc 1 1279 0
 1938 0946 4FF00003 		mov	r3, #0
 1939 094a FB60     		str	r3, [r7, #12]
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 1940              		.loc 1 1284 0
 1941 094c 3B68     		ldr	r3, [r7, #0]
 1942 094e 23F07F43 		bic	r3, r3, #-16777216
 1943 0952 FB60     		str	r3, [r7, #12]
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1944              		.loc 1 1286 0
 1945 0954 FB68     		ldr	r3, [r7, #12]
 1946 0956 9BB2     		uxth	r3, r3
 1947 0958 6FEA0303 		mvn	r3, r3
 1948 095c 9AB2     		uxth	r2, r3
 1949 095e 7B68     		ldr	r3, [r7, #4]
 1950 0960 9A82     		strh	r2, [r3, #20]	@ movhi
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1951              		.loc 1 1287 0
 1952 0962 07F11407 		add	r7, r7, #20
 1953 0966 BD46     		mov	sp, r7
 1954 0968 80BC     		pop	{r7}
 1955 096a 7047     		bx	lr
 1956              		.cfi_endproc
 1957              	.LFE140:
 1959              		.align	2
 1960              		.global	I2C_GetITStatus
 1961              		.thumb
 1962              		.thumb_func
 1964              	I2C_GetITStatus:
 1965              	.LFB141:
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1966              		.loc 1 1312 0
 1967              		.cfi_startproc
 1968              		@ args = 0, pretend = 0, frame = 16
 1969              		@ frame_needed = 1, uses_anonymous_args = 0
 1970              		@ link register save eliminated.
 1971 096c 80B4     		push	{r7}
 1972              	.LCFI93:
 1973              		.cfi_def_cfa_offset 4
 1974              		.cfi_offset 7, -4
 1975 096e 85B0     		sub	sp, sp, #20
 1976              	.LCFI94:
 1977              		.cfi_def_cfa_offset 24
 1978 0970 00AF     		add	r7, sp, #0
 1979              	.LCFI95:
 1980              		.cfi_def_cfa_register 7
 1981 0972 7860     		str	r0, [r7, #4]
 1982 0974 3960     		str	r1, [r7, #0]
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 1983              		.loc 1 1313 0
 1984 0976 4FF00003 		mov	r3, #0
 1985 097a FB73     		strb	r3, [r7, #15]
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 1986              		.loc 1 1314 0
 1987 097c 4FF00003 		mov	r3, #0
 1988 0980 BB60     		str	r3, [r7, #8]
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1989              		.loc 1 1321 0
 1990 0982 3B68     		ldr	r3, [r7, #0]
 1991 0984 03F0E063 		and	r3, r3, #117440512
 1992 0988 4FEA1342 		lsr	r2, r3, #16
 1993 098c 7B68     		ldr	r3, [r7, #4]
 1994 098e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1995 0990 9BB2     		uxth	r3, r3
 1996 0992 1340     		ands	r3, r3, r2
 1997 0994 BB60     		str	r3, [r7, #8]
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 1998              		.loc 1 1324 0
 1999 0996 3B68     		ldr	r3, [r7, #0]
 2000 0998 23F07F43 		bic	r3, r3, #-16777216
 2001 099c 3B60     		str	r3, [r7, #0]
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 2002              		.loc 1 1327 0
 2003 099e 7B68     		ldr	r3, [r7, #4]
 2004 09a0 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2005 09a2 9BB2     		uxth	r3, r3
 2006 09a4 1A46     		mov	r2, r3
 2007 09a6 3B68     		ldr	r3, [r7, #0]
 2008 09a8 1340     		ands	r3, r3, r2
 2009 09aa 002B     		cmp	r3, #0
 2010 09ac 06D0     		beq	.L96
 2011              		.loc 1 1327 0 is_stmt 0 discriminator 1
 2012 09ae BB68     		ldr	r3, [r7, #8]
 2013 09b0 002B     		cmp	r3, #0
 2014 09b2 03D0     		beq	.L96
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 2015              		.loc 1 1330 0 is_stmt 1
 2016 09b4 4FF00103 		mov	r3, #1
 2017 09b8 FB73     		strb	r3, [r7, #15]
 2018 09ba 02E0     		b	.L97
 2019              	.L96:
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 2020              		.loc 1 1335 0
 2021 09bc 4FF00003 		mov	r3, #0
 2022 09c0 FB73     		strb	r3, [r7, #15]
 2023              	.L97:
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 2024              		.loc 1 1338 0
 2025 09c2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2026              		.loc 1 1339 0
 2027 09c4 1846     		mov	r0, r3
 2028 09c6 07F11407 		add	r7, r7, #20
 2029 09ca BD46     		mov	sp, r7
 2030 09cc 80BC     		pop	{r7}
 2031 09ce 7047     		bx	lr
 2032              		.cfi_endproc
 2033              	.LFE141:
 2035              		.align	2
 2036              		.global	I2C_ClearITPendingBit
 2037              		.thumb
 2038              		.thumb_func
 2040              	I2C_ClearITPendingBit:
 2041              	.LFB142:
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 2042              		.loc 1 1372 0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 16
 2045              		@ frame_needed = 1, uses_anonymous_args = 0
 2046              		@ link register save eliminated.
 2047 09d0 80B4     		push	{r7}
 2048              	.LCFI96:
 2049              		.cfi_def_cfa_offset 4
 2050              		.cfi_offset 7, -4
 2051 09d2 85B0     		sub	sp, sp, #20
 2052              	.LCFI97:
 2053              		.cfi_def_cfa_offset 24
 2054 09d4 00AF     		add	r7, sp, #0
 2055              	.LCFI98:
 2056              		.cfi_def_cfa_register 7
 2057 09d6 7860     		str	r0, [r7, #4]
 2058 09d8 3960     		str	r1, [r7, #0]
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 2059              		.loc 1 1373 0
 2060 09da 4FF00003 		mov	r3, #0
 2061 09de FB60     		str	r3, [r7, #12]
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 2062              		.loc 1 1379 0
 2063 09e0 3B68     		ldr	r3, [r7, #0]
 2064 09e2 23F07F43 		bic	r3, r3, #-16777216
 2065 09e6 FB60     		str	r3, [r7, #12]
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2066              		.loc 1 1382 0
 2067 09e8 FB68     		ldr	r3, [r7, #12]
 2068 09ea 9BB2     		uxth	r3, r3
 2069 09ec 6FEA0303 		mvn	r3, r3
 2070 09f0 9AB2     		uxth	r2, r3
 2071 09f2 7B68     		ldr	r3, [r7, #4]
 2072 09f4 9A82     		strh	r2, [r3, #20]	@ movhi
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 2073              		.loc 1 1383 0
 2074 09f6 07F11407 		add	r7, r7, #20
 2075 09fa BD46     		mov	sp, r7
 2076 09fc 80BC     		pop	{r7}
 2077 09fe 7047     		bx	lr
 2078              		.cfi_endproc
 2079              	.LFE142:
 2081              	.Letext0:
 2082              		.file 2 "/opt/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 2083              		.file 3 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Device/ST/STM
 2084              		.file 4 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/STM32F4xx_StdPeriph
 2085              		.file 5 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/STM32F4xx_StdPeriph
 2086              		.file 6 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Include/core_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
     /tmp/ccN0cZZC.s:18     .text:00000000 $t
     /tmp/ccN0cZZC.s:23     .text:00000000 I2C_DeInit
     /tmp/ccN0cZZC.s:93     .text:00000074 $d
     /tmp/ccN0cZZC.s:99     .text:00000080 $t
     /tmp/ccN0cZZC.s:104    .text:00000080 I2C_Init
     /tmp/ccN0cZZC.s:327    .text:00000214 $d
     /tmp/ccN0cZZC.s:334    .text:00000224 $t
     /tmp/ccN0cZZC.s:339    .text:00000224 I2C_StructInit
     /tmp/ccN0cZZC.s:394    .text:00000268 I2C_Cmd
     /tmp/ccN0cZZC.s:450    .text:000002a8 I2C_GenerateSTART
     /tmp/ccN0cZZC.s:506    .text:000002e8 I2C_GenerateSTOP
     /tmp/ccN0cZZC.s:562    .text:00000328 I2C_Send7bitAddress
     /tmp/ccN0cZZC.s:617    .text:00000364 I2C_AcknowledgeConfig
     /tmp/ccN0cZZC.s:673    .text:000003a4 I2C_OwnAddress2Config
     /tmp/ccN0cZZC.s:730    .text:000003e8 I2C_DualAddressCmd
     /tmp/ccN0cZZC.s:786    .text:00000428 I2C_GeneralCallCmd
     /tmp/ccN0cZZC.s:842    .text:00000468 I2C_SoftwareResetCmd
     /tmp/ccN0cZZC.s:900    .text:000004b0 I2C_StretchClockCmd
     /tmp/ccN0cZZC.s:956    .text:000004f0 I2C_FastModeDutyCycleConfig
     /tmp/ccN0cZZC.s:1012   .text:00000530 I2C_NACKPositionConfig
     /tmp/ccN0cZZC.s:1068   .text:00000570 I2C_SMBusAlertConfig
     /tmp/ccN0cZZC.s:1124   .text:000005b0 I2C_ARPCmd
     /tmp/ccN0cZZC.s:1180   .text:000005f0 I2C_SendData
     /tmp/ccN0cZZC.s:1218   .text:00000610 I2C_ReceiveData
     /tmp/ccN0cZZC.s:1255   .text:0000062c I2C_TransmitPEC
     /tmp/ccN0cZZC.s:1311   .text:0000066c I2C_PECPositionConfig
     /tmp/ccN0cZZC.s:1367   .text:000006ac I2C_CalculatePEC
     /tmp/ccN0cZZC.s:1423   .text:000006ec I2C_GetPEC
     /tmp/ccN0cZZC.s:1462   .text:00000710 I2C_DMACmd
     /tmp/ccN0cZZC.s:1518   .text:00000750 I2C_DMALastTransferCmd
     /tmp/ccN0cZZC.s:1574   .text:00000790 I2C_ReadRegister
     /tmp/ccN0cZZC.s:1623   .text:000007c0 I2C_ITConfig
     /tmp/ccN0cZZC.s:1685   .text:00000808 I2C_CheckEvent
     /tmp/ccN0cZZC.s:1767   .text:00000878 I2C_GetLastEvent
     /tmp/ccN0cZZC.s:1829   .text:000008c4 I2C_GetFlagStatus
     /tmp/ccN0cZZC.s:1918   .text:0000093c I2C_ClearFlag
     /tmp/ccN0cZZC.s:1964   .text:0000096c I2C_GetITStatus
     /tmp/ccN0cZZC.s:2040   .text:000009d0 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ee386580922180e5cad1057f989de60d
                           .group:00000000 wm4.stm32f4xx.h.54.6e1f0ee5c76cc1e53c8ea6d18297b5fd
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_adc.h.108.1710484bf41297b93f825b3b15cbdff8
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rng.h.31.1ec493d56b7a8e5a71238519cae6dea7
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stm32f4xx_i2c.h.82.7b73b67c7d0c5b85432db4bc4e700e54

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
