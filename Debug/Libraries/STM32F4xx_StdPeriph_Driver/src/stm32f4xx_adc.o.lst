   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	ADC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	ADC_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * You may not use this file except in compliance with the License.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * You may obtain a copy of the License at:
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * See the License for the specific language governing permissions and
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * limitations under the License.
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  26              		.loc 1 213 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  38              		.loc 1 215 0
  39 0004 4FF48070 		mov	r0, #256
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  42              		.loc 1 218 0
  43 0010 4FF48070 		mov	r0, #256
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  46              		.loc 1 219 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE110:
  51 001e 00BF     		.align	2
  52              		.global	ADC_Init
  53              		.thumb
  54              		.thumb_func
  56              	ADC_Init:
  57              	.LFB111:
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  58              		.loc 1 235 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0020 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0022 85B0     		sub	sp, sp, #20
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 24
  70 0024 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0026 7860     		str	r0, [r7, #4]
  74 0028 3960     		str	r1, [r7, #0]
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  75              		.loc 1 236 0
  76 002a 4FF00003 		mov	r3, #0
  77 002e FB60     		str	r3, [r7, #12]
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  78              		.loc 1 237 0
  79 0030 4FF00003 		mov	r3, #0
  80 0034 FB72     		strb	r3, [r7, #11]
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  81              		.loc 1 250 0
  82 0036 7B68     		ldr	r3, [r7, #4]
  83 0038 5B68     		ldr	r3, [r3, #4]
  84 003a FB60     		str	r3, [r7, #12]
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  85              		.loc 1 253 0
  86 003c FB68     		ldr	r3, [r7, #12]
  87 003e 23F04073 		bic	r3, r3, #50331648
  88 0042 23F48073 		bic	r3, r3, #256
  89 0046 FB60     		str	r3, [r7, #12]
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  90              		.loc 1 258 0
  91 0048 3B68     		ldr	r3, [r7, #0]
  92 004a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  93 004c 4FEA0322 		lsl	r2, r3, #8
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  94              		.loc 1 259 0
  95 0050 3B68     		ldr	r3, [r7, #0]
  96 0052 1B68     		ldr	r3, [r3, #0]
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  97              		.loc 1 258 0
  98 0054 1343     		orrs	r3, r3, r2
  99 0056 FA68     		ldr	r2, [r7, #12]
 100 0058 1343     		orrs	r3, r3, r2
 101 005a FB60     		str	r3, [r7, #12]
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 102              		.loc 1 261 0
 103 005c 7B68     		ldr	r3, [r7, #4]
 104 005e FA68     		ldr	r2, [r7, #12]
 105 0060 5A60     		str	r2, [r3, #4]
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 106              		.loc 1 264 0
 107 0062 7B68     		ldr	r3, [r7, #4]
 108 0064 9B68     		ldr	r3, [r3, #8]
 109 0066 FB60     		str	r3, [r7, #12]
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 110              		.loc 1 267 0
 111 0068 FA68     		ldr	r2, [r7, #12]
 112 006a 194B     		ldr	r3, .L3
 113 006c 1340     		ands	r3, r3, r2
 114 006e FB60     		str	r3, [r7, #12]
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 115              		.loc 1 275 0
 116 0070 3B68     		ldr	r3, [r7, #0]
 117 0072 1A69     		ldr	r2, [r3, #16]
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 118              		.loc 1 276 0
 119 0074 3B68     		ldr	r3, [r7, #0]
 120 0076 DB68     		ldr	r3, [r3, #12]
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 121              		.loc 1 275 0
 122 0078 1A43     		orrs	r2, r2, r3
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 123              		.loc 1 277 0
 124 007a 3B68     		ldr	r3, [r7, #0]
 125 007c 9B68     		ldr	r3, [r3, #8]
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 126              		.loc 1 276 0
 127 007e 1A43     		orrs	r2, r2, r3
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 128              		.loc 1 278 0
 129 0080 3B68     		ldr	r3, [r7, #0]
 130 0082 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 131 0084 4FEA4303 		lsl	r3, r3, #1
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 132              		.loc 1 275 0
 133 0088 1343     		orrs	r3, r3, r2
 134 008a FA68     		ldr	r2, [r7, #12]
 135 008c 1343     		orrs	r3, r3, r2
 136 008e FB60     		str	r3, [r7, #12]
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 137              		.loc 1 281 0
 138 0090 7B68     		ldr	r3, [r7, #4]
 139 0092 FA68     		ldr	r2, [r7, #12]
 140 0094 9A60     		str	r2, [r3, #8]
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 141              		.loc 1 284 0
 142 0096 7B68     		ldr	r3, [r7, #4]
 143 0098 DB6A     		ldr	r3, [r3, #44]
 144 009a FB60     		str	r3, [r7, #12]
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 145              		.loc 1 287 0
 146 009c FB68     		ldr	r3, [r7, #12]
 147 009e 23F47003 		bic	r3, r3, #15728640
 148 00a2 FB60     		str	r3, [r7, #12]
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 149              		.loc 1 291 0
 150 00a4 3B68     		ldr	r3, [r7, #0]
 151 00a6 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 152 00a8 03F1FF33 		add	r3, r3, #-1
 153 00ac DAB2     		uxtb	r2, r3
 154 00ae FB7A     		ldrb	r3, [r7, #11]
 155 00b0 1343     		orrs	r3, r3, r2
 156 00b2 FB72     		strb	r3, [r7, #11]
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 157              		.loc 1 292 0
 158 00b4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 159 00b6 4FEA0353 		lsl	r3, r3, #20
 160 00ba FA68     		ldr	r2, [r7, #12]
 161 00bc 1343     		orrs	r3, r3, r2
 162 00be FB60     		str	r3, [r7, #12]
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 163              		.loc 1 295 0
 164 00c0 7B68     		ldr	r3, [r7, #4]
 165 00c2 FA68     		ldr	r2, [r7, #12]
 166 00c4 DA62     		str	r2, [r3, #44]
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 167              		.loc 1 296 0
 168 00c6 07F11407 		add	r7, r7, #20
 169 00ca BD46     		mov	sp, r7
 170 00cc 80BC     		pop	{r7}
 171 00ce 7047     		bx	lr
 172              	.L4:
 173              		.align	2
 174              	.L3:
 175 00d0 FDF7FFC0 		.word	-1056966659
 176              		.cfi_endproc
 177              	.LFE111:
 179              		.align	2
 180              		.global	ADC_StructInit
 181              		.thumb
 182              		.thumb_func
 184              	ADC_StructInit:
 185              	.LFB112:
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 186              		.loc 1 310 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 8
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 00d4 80B4     		push	{r7}
 192              	.LCFI5:
 193              		.cfi_def_cfa_offset 4
 194              		.cfi_offset 7, -4
 195 00d6 83B0     		sub	sp, sp, #12
 196              	.LCFI6:
 197              		.cfi_def_cfa_offset 16
 198 00d8 00AF     		add	r7, sp, #0
 199              	.LCFI7:
 200              		.cfi_def_cfa_register 7
 201 00da 7860     		str	r0, [r7, #4]
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 202              		.loc 1 312 0
 203 00dc 7B68     		ldr	r3, [r7, #4]
 204 00de 4FF00002 		mov	r2, #0
 205 00e2 1A60     		str	r2, [r3, #0]
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 206              		.loc 1 315 0
 207 00e4 7B68     		ldr	r3, [r7, #4]
 208 00e6 4FF00002 		mov	r2, #0
 209 00ea 1A71     		strb	r2, [r3, #4]
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 210              		.loc 1 318 0
 211 00ec 7B68     		ldr	r3, [r7, #4]
 212 00ee 4FF00002 		mov	r2, #0
 213 00f2 5A71     		strb	r2, [r3, #5]
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 214              		.loc 1 321 0
 215 00f4 7B68     		ldr	r3, [r7, #4]
 216 00f6 4FF00002 		mov	r2, #0
 217 00fa 9A60     		str	r2, [r3, #8]
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 218              		.loc 1 324 0
 219 00fc 7B68     		ldr	r3, [r7, #4]
 220 00fe 4FF00002 		mov	r2, #0
 221 0102 DA60     		str	r2, [r3, #12]
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 222              		.loc 1 327 0
 223 0104 7B68     		ldr	r3, [r7, #4]
 224 0106 4FF00002 		mov	r2, #0
 225 010a 1A61     		str	r2, [r3, #16]
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 226              		.loc 1 330 0
 227 010c 7B68     		ldr	r3, [r7, #4]
 228 010e 4FF00102 		mov	r2, #1
 229 0112 1A75     		strb	r2, [r3, #20]
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 230              		.loc 1 331 0
 231 0114 07F10C07 		add	r7, r7, #12
 232 0118 BD46     		mov	sp, r7
 233 011a 80BC     		pop	{r7}
 234 011c 7047     		bx	lr
 235              		.cfi_endproc
 236              	.LFE112:
 238 011e 00BF     		.align	2
 239              		.global	ADC_CommonInit
 240              		.thumb
 241              		.thumb_func
 243              	ADC_CommonInit:
 244              	.LFB113:
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 245              		.loc 1 341 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 16
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 250 0120 80B4     		push	{r7}
 251              	.LCFI8:
 252              		.cfi_def_cfa_offset 4
 253              		.cfi_offset 7, -4
 254 0122 85B0     		sub	sp, sp, #20
 255              	.LCFI9:
 256              		.cfi_def_cfa_offset 24
 257 0124 00AF     		add	r7, sp, #0
 258              	.LCFI10:
 259              		.cfi_def_cfa_register 7
 260 0126 7860     		str	r0, [r7, #4]
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 261              		.loc 1 342 0
 262 0128 4FF00003 		mov	r3, #0
 263 012c FB60     		str	r3, [r7, #12]
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 264              		.loc 1 350 0
 265 012e 0E4B     		ldr	r3, .L7
 266 0130 5B68     		ldr	r3, [r3, #4]
 267 0132 FB60     		str	r3, [r7, #12]
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 268              		.loc 1 353 0
 269 0134 FA68     		ldr	r2, [r7, #12]
 270 0136 0D4B     		ldr	r3, .L7+4
 271 0138 1340     		ands	r3, r3, r2
 272 013a FB60     		str	r3, [r7, #12]
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 273              		.loc 1 361 0
 274 013c 7B68     		ldr	r3, [r7, #4]
 275 013e 1A68     		ldr	r2, [r3, #0]
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 276              		.loc 1 362 0
 277 0140 7B68     		ldr	r3, [r7, #4]
 278 0142 5B68     		ldr	r3, [r3, #4]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 279              		.loc 1 361 0
 280 0144 1A43     		orrs	r2, r2, r3
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 281              		.loc 1 363 0
 282 0146 7B68     		ldr	r3, [r7, #4]
 283 0148 9B68     		ldr	r3, [r3, #8]
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 284              		.loc 1 362 0
 285 014a 1A43     		orrs	r2, r2, r3
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 286              		.loc 1 364 0
 287 014c 7B68     		ldr	r3, [r7, #4]
 288 014e DB68     		ldr	r3, [r3, #12]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 289              		.loc 1 361 0
 290 0150 1343     		orrs	r3, r3, r2
 291 0152 FA68     		ldr	r2, [r7, #12]
 292 0154 1343     		orrs	r3, r3, r2
 293 0156 FB60     		str	r3, [r7, #12]
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 294              		.loc 1 367 0
 295 0158 034B     		ldr	r3, .L7
 296 015a FA68     		ldr	r2, [r7, #12]
 297 015c 5A60     		str	r2, [r3, #4]
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 298              		.loc 1 368 0
 299 015e 07F11407 		add	r7, r7, #20
 300 0162 BD46     		mov	sp, r7
 301 0164 80BC     		pop	{r7}
 302 0166 7047     		bx	lr
 303              	.L8:
 304              		.align	2
 305              	.L7:
 306 0168 00230140 		.word	1073816320
 307 016c E030FCFF 		.word	-249632
 308              		.cfi_endproc
 309              	.LFE113:
 311              		.align	2
 312              		.global	ADC_CommonStructInit
 313              		.thumb
 314              		.thumb_func
 316              	ADC_CommonStructInit:
 317              	.LFB114:
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 318              		.loc 1 377 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 8
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323 0170 80B4     		push	{r7}
 324              	.LCFI11:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 7, -4
 327 0172 83B0     		sub	sp, sp, #12
 328              	.LCFI12:
 329              		.cfi_def_cfa_offset 16
 330 0174 00AF     		add	r7, sp, #0
 331              	.LCFI13:
 332              		.cfi_def_cfa_register 7
 333 0176 7860     		str	r0, [r7, #4]
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 334              		.loc 1 379 0
 335 0178 7B68     		ldr	r3, [r7, #4]
 336 017a 4FF00002 		mov	r2, #0
 337 017e 1A60     		str	r2, [r3, #0]
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 338              		.loc 1 382 0
 339 0180 7B68     		ldr	r3, [r7, #4]
 340 0182 4FF00002 		mov	r2, #0
 341 0186 5A60     		str	r2, [r3, #4]
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 342              		.loc 1 385 0
 343 0188 7B68     		ldr	r3, [r7, #4]
 344 018a 4FF00002 		mov	r2, #0
 345 018e 9A60     		str	r2, [r3, #8]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 346              		.loc 1 388 0
 347 0190 7B68     		ldr	r3, [r7, #4]
 348 0192 4FF00002 		mov	r2, #0
 349 0196 DA60     		str	r2, [r3, #12]
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 350              		.loc 1 389 0
 351 0198 07F10C07 		add	r7, r7, #12
 352 019c BD46     		mov	sp, r7
 353 019e 80BC     		pop	{r7}
 354 01a0 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE114:
 358 01a2 00BF     		.align	2
 359              		.global	ADC_Cmd
 360              		.thumb
 361              		.thumb_func
 363              	ADC_Cmd:
 364              	.LFB115:
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 365              		.loc 1 399 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 8
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369              		@ link register save eliminated.
 370 01a4 80B4     		push	{r7}
 371              	.LCFI14:
 372              		.cfi_def_cfa_offset 4
 373              		.cfi_offset 7, -4
 374 01a6 83B0     		sub	sp, sp, #12
 375              	.LCFI15:
 376              		.cfi_def_cfa_offset 16
 377 01a8 00AF     		add	r7, sp, #0
 378              	.LCFI16:
 379              		.cfi_def_cfa_register 7
 380 01aa 7860     		str	r0, [r7, #4]
 381 01ac 0B46     		mov	r3, r1
 382 01ae FB70     		strb	r3, [r7, #3]
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 383              		.loc 1 403 0
 384 01b0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 385 01b2 002B     		cmp	r3, #0
 386 01b4 06D0     		beq	.L11
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 387              		.loc 1 406 0
 388 01b6 7B68     		ldr	r3, [r7, #4]
 389 01b8 9B68     		ldr	r3, [r3, #8]
 390 01ba 43F00102 		orr	r2, r3, #1
 391 01be 7B68     		ldr	r3, [r7, #4]
 392 01c0 9A60     		str	r2, [r3, #8]
 393 01c2 05E0     		b	.L10
 394              	.L11:
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 395              		.loc 1 411 0
 396 01c4 7B68     		ldr	r3, [r7, #4]
 397 01c6 9B68     		ldr	r3, [r3, #8]
 398 01c8 23F00102 		bic	r2, r3, #1
 399 01cc 7B68     		ldr	r3, [r7, #4]
 400 01ce 9A60     		str	r2, [r3, #8]
 401              	.L10:
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 402              		.loc 1 413 0
 403 01d0 07F10C07 		add	r7, r7, #12
 404 01d4 BD46     		mov	sp, r7
 405 01d6 80BC     		pop	{r7}
 406 01d8 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE115:
 410 01da 00BF     		.align	2
 411              		.global	ADC_AnalogWatchdogCmd
 412              		.thumb
 413              		.thumb_func
 415              	ADC_AnalogWatchdogCmd:
 416              	.LFB116:
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 417              		.loc 1 457 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 16
 420              		@ frame_needed = 1, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422 01dc 80B4     		push	{r7}
 423              	.LCFI17:
 424              		.cfi_def_cfa_offset 4
 425              		.cfi_offset 7, -4
 426 01de 85B0     		sub	sp, sp, #20
 427              	.LCFI18:
 428              		.cfi_def_cfa_offset 24
 429 01e0 00AF     		add	r7, sp, #0
 430              	.LCFI19:
 431              		.cfi_def_cfa_register 7
 432 01e2 7860     		str	r0, [r7, #4]
 433 01e4 3960     		str	r1, [r7, #0]
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 434              		.loc 1 458 0
 435 01e6 4FF00003 		mov	r3, #0
 436 01ea FB60     		str	r3, [r7, #12]
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 437              		.loc 1 464 0
 438 01ec 7B68     		ldr	r3, [r7, #4]
 439 01ee 5B68     		ldr	r3, [r3, #4]
 440 01f0 FB60     		str	r3, [r7, #12]
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 441              		.loc 1 467 0
 442 01f2 FB68     		ldr	r3, [r7, #12]
 443 01f4 23F44003 		bic	r3, r3, #12582912
 444 01f8 23F40073 		bic	r3, r3, #512
 445 01fc FB60     		str	r3, [r7, #12]
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 446              		.loc 1 470 0
 447 01fe FA68     		ldr	r2, [r7, #12]
 448 0200 3B68     		ldr	r3, [r7, #0]
 449 0202 1343     		orrs	r3, r3, r2
 450 0204 FB60     		str	r3, [r7, #12]
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 451              		.loc 1 473 0
 452 0206 7B68     		ldr	r3, [r7, #4]
 453 0208 FA68     		ldr	r2, [r7, #12]
 454 020a 5A60     		str	r2, [r3, #4]
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 455              		.loc 1 474 0
 456 020c 07F11407 		add	r7, r7, #20
 457 0210 BD46     		mov	sp, r7
 458 0212 80BC     		pop	{r7}
 459 0214 7047     		bx	lr
 460              		.cfi_endproc
 461              	.LFE116:
 463 0216 00BF     		.align	2
 464              		.global	ADC_AnalogWatchdogThresholdsConfig
 465              		.thumb
 466              		.thumb_func
 468              	ADC_AnalogWatchdogThresholdsConfig:
 469              	.LFB117:
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 470              		.loc 1 487 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 8
 473              		@ frame_needed = 1, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475 0218 80B4     		push	{r7}
 476              	.LCFI20:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 7, -4
 479 021a 83B0     		sub	sp, sp, #12
 480              	.LCFI21:
 481              		.cfi_def_cfa_offset 16
 482 021c 00AF     		add	r7, sp, #0
 483              	.LCFI22:
 484              		.cfi_def_cfa_register 7
 485 021e 7860     		str	r0, [r7, #4]
 486 0220 1346     		mov	r3, r2
 487 0222 0A46     		mov	r2, r1	@ movhi
 488 0224 7A80     		strh	r2, [r7, #2]	@ movhi
 489 0226 3B80     		strh	r3, [r7, #0]	@ movhi
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 490              		.loc 1 494 0
 491 0228 7A88     		ldrh	r2, [r7, #2]
 492 022a 7B68     		ldr	r3, [r7, #4]
 493 022c 5A62     		str	r2, [r3, #36]
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 494              		.loc 1 497 0
 495 022e 3A88     		ldrh	r2, [r7, #0]
 496 0230 7B68     		ldr	r3, [r7, #4]
 497 0232 9A62     		str	r2, [r3, #40]
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 498              		.loc 1 498 0
 499 0234 07F10C07 		add	r7, r7, #12
 500 0238 BD46     		mov	sp, r7
 501 023a 80BC     		pop	{r7}
 502 023c 7047     		bx	lr
 503              		.cfi_endproc
 504              	.LFE117:
 506 023e 00BF     		.align	2
 507              		.global	ADC_AnalogWatchdogSingleChannelConfig
 508              		.thumb
 509              		.thumb_func
 511              	ADC_AnalogWatchdogSingleChannelConfig:
 512              	.LFB118:
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 513              		.loc 1 527 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 16
 516              		@ frame_needed = 1, uses_anonymous_args = 0
 517              		@ link register save eliminated.
 518 0240 80B4     		push	{r7}
 519              	.LCFI23:
 520              		.cfi_def_cfa_offset 4
 521              		.cfi_offset 7, -4
 522 0242 85B0     		sub	sp, sp, #20
 523              	.LCFI24:
 524              		.cfi_def_cfa_offset 24
 525 0244 00AF     		add	r7, sp, #0
 526              	.LCFI25:
 527              		.cfi_def_cfa_register 7
 528 0246 7860     		str	r0, [r7, #4]
 529 0248 0B46     		mov	r3, r1
 530 024a FB70     		strb	r3, [r7, #3]
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 531              		.loc 1 528 0
 532 024c 4FF00003 		mov	r3, #0
 533 0250 FB60     		str	r3, [r7, #12]
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 534              		.loc 1 534 0
 535 0252 7B68     		ldr	r3, [r7, #4]
 536 0254 5B68     		ldr	r3, [r3, #4]
 537 0256 FB60     		str	r3, [r7, #12]
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 538              		.loc 1 537 0
 539 0258 FB68     		ldr	r3, [r7, #12]
 540 025a 23F01F03 		bic	r3, r3, #31
 541 025e FB60     		str	r3, [r7, #12]
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 542              		.loc 1 540 0
 543 0260 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 544 0262 FA68     		ldr	r2, [r7, #12]
 545 0264 1343     		orrs	r3, r3, r2
 546 0266 FB60     		str	r3, [r7, #12]
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 547              		.loc 1 543 0
 548 0268 7B68     		ldr	r3, [r7, #4]
 549 026a FA68     		ldr	r2, [r7, #12]
 550 026c 5A60     		str	r2, [r3, #4]
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 551              		.loc 1 544 0
 552 026e 07F11407 		add	r7, r7, #20
 553 0272 BD46     		mov	sp, r7
 554 0274 80BC     		pop	{r7}
 555 0276 7047     		bx	lr
 556              		.cfi_endproc
 557              	.LFE118:
 559              		.align	2
 560              		.global	ADC_TempSensorVrefintCmd
 561              		.thumb
 562              		.thumb_func
 564              	ADC_TempSensorVrefintCmd:
 565              	.LFB119:
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 566              		.loc 1 592 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 8
 569              		@ frame_needed = 1, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571 0278 80B4     		push	{r7}
 572              	.LCFI26:
 573              		.cfi_def_cfa_offset 4
 574              		.cfi_offset 7, -4
 575 027a 83B0     		sub	sp, sp, #12
 576              	.LCFI27:
 577              		.cfi_def_cfa_offset 16
 578 027c 00AF     		add	r7, sp, #0
 579              	.LCFI28:
 580              		.cfi_def_cfa_register 7
 581 027e 0346     		mov	r3, r0
 582 0280 FB71     		strb	r3, [r7, #7]
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 583              		.loc 1 595 0
 584 0282 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 585 0284 002B     		cmp	r3, #0
 586 0286 06D0     		beq	.L17
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 587              		.loc 1 598 0
 588 0288 084B     		ldr	r3, .L19
 589 028a 084A     		ldr	r2, .L19
 590 028c 5268     		ldr	r2, [r2, #4]
 591 028e 42F40002 		orr	r2, r2, #8388608
 592 0292 5A60     		str	r2, [r3, #4]
 593 0294 05E0     		b	.L16
 594              	.L17:
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 595              		.loc 1 603 0
 596 0296 054B     		ldr	r3, .L19
 597 0298 044A     		ldr	r2, .L19
 598 029a 5268     		ldr	r2, [r2, #4]
 599 029c 22F40002 		bic	r2, r2, #8388608
 600 02a0 5A60     		str	r2, [r3, #4]
 601              	.L16:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 602              		.loc 1 605 0
 603 02a2 07F10C07 		add	r7, r7, #12
 604 02a6 BD46     		mov	sp, r7
 605 02a8 80BC     		pop	{r7}
 606 02aa 7047     		bx	lr
 607              	.L20:
 608              		.align	2
 609              	.L19:
 610 02ac 00230140 		.word	1073816320
 611              		.cfi_endproc
 612              	.LFE119:
 614              		.align	2
 615              		.global	ADC_VBATCmd
 616              		.thumb
 617              		.thumb_func
 619              	ADC_VBATCmd:
 620              	.LFB120:
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 621              		.loc 1 614 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 8
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626 02b0 80B4     		push	{r7}
 627              	.LCFI29:
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 7, -4
 630 02b2 83B0     		sub	sp, sp, #12
 631              	.LCFI30:
 632              		.cfi_def_cfa_offset 16
 633 02b4 00AF     		add	r7, sp, #0
 634              	.LCFI31:
 635              		.cfi_def_cfa_register 7
 636 02b6 0346     		mov	r3, r0
 637 02b8 FB71     		strb	r3, [r7, #7]
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 638              		.loc 1 617 0
 639 02ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 640 02bc 002B     		cmp	r3, #0
 641 02be 06D0     		beq	.L22
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 642              		.loc 1 620 0
 643 02c0 084B     		ldr	r3, .L24
 644 02c2 084A     		ldr	r2, .L24
 645 02c4 5268     		ldr	r2, [r2, #4]
 646 02c6 42F48002 		orr	r2, r2, #4194304
 647 02ca 5A60     		str	r2, [r3, #4]
 648 02cc 05E0     		b	.L21
 649              	.L22:
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 650              		.loc 1 625 0
 651 02ce 054B     		ldr	r3, .L24
 652 02d0 044A     		ldr	r2, .L24
 653 02d2 5268     		ldr	r2, [r2, #4]
 654 02d4 22F48002 		bic	r2, r2, #4194304
 655 02d8 5A60     		str	r2, [r3, #4]
 656              	.L21:
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 657              		.loc 1 627 0
 658 02da 07F10C07 		add	r7, r7, #12
 659 02de BD46     		mov	sp, r7
 660 02e0 80BC     		pop	{r7}
 661 02e2 7047     		bx	lr
 662              	.L25:
 663              		.align	2
 664              	.L24:
 665 02e4 00230140 		.word	1073816320
 666              		.cfi_endproc
 667              	.LFE120:
 669              		.align	2
 670              		.global	ADC_RegularChannelConfig
 671              		.thumb
 672              		.thumb_func
 674              	ADC_RegularChannelConfig:
 675              	.LFB121:
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 676              		.loc 1 715 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 16
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681 02e8 80B4     		push	{r7}
 682              	.LCFI32:
 683              		.cfi_def_cfa_offset 4
 684              		.cfi_offset 7, -4
 685 02ea 85B0     		sub	sp, sp, #20
 686              	.LCFI33:
 687              		.cfi_def_cfa_offset 24
 688 02ec 00AF     		add	r7, sp, #0
 689              	.LCFI34:
 690              		.cfi_def_cfa_register 7
 691 02ee 7860     		str	r0, [r7, #4]
 692 02f0 F970     		strb	r1, [r7, #3]
 693 02f2 BA70     		strb	r2, [r7, #2]
 694 02f4 7B70     		strb	r3, [r7, #1]
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 695              		.loc 1 716 0
 696 02f6 4FF00003 		mov	r3, #0
 697 02fa FB60     		str	r3, [r7, #12]
 698 02fc 4FF00003 		mov	r3, #0
 699 0300 BB60     		str	r3, [r7, #8]
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 700              		.loc 1 724 0
 701 0302 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 702 0304 092B     		cmp	r3, #9
 703 0306 27D9     		bls	.L27
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 704              		.loc 1 727 0
 705 0308 7B68     		ldr	r3, [r7, #4]
 706 030a DB68     		ldr	r3, [r3, #12]
 707 030c FB60     		str	r3, [r7, #12]
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 708              		.loc 1 730 0
 709 030e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 710 0310 1346     		mov	r3, r2
 711 0312 4FEA4303 		lsl	r3, r3, #1
 712 0316 9B18     		adds	r3, r3, r2
 713 0318 A3F11E03 		sub	r3, r3, #30
 714 031c 4FF00702 		mov	r2, #7
 715 0320 02FA03F3 		lsl	r3, r2, r3
 716 0324 BB60     		str	r3, [r7, #8]
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 717              		.loc 1 733 0
 718 0326 BB68     		ldr	r3, [r7, #8]
 719 0328 6FEA0303 		mvn	r3, r3
 720 032c FA68     		ldr	r2, [r7, #12]
 721 032e 1340     		ands	r3, r3, r2
 722 0330 FB60     		str	r3, [r7, #12]
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 723              		.loc 1 736 0
 724 0332 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 725 0334 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 726 0336 1346     		mov	r3, r2
 727 0338 4FEA4303 		lsl	r3, r3, #1
 728 033c 9B18     		adds	r3, r3, r2
 729 033e A3F11E03 		sub	r3, r3, #30
 730 0342 01FA03F3 		lsl	r3, r1, r3
 731 0346 BB60     		str	r3, [r7, #8]
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 732              		.loc 1 739 0
 733 0348 FA68     		ldr	r2, [r7, #12]
 734 034a BB68     		ldr	r3, [r7, #8]
 735 034c 1343     		orrs	r3, r3, r2
 736 034e FB60     		str	r3, [r7, #12]
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 737              		.loc 1 742 0
 738 0350 7B68     		ldr	r3, [r7, #4]
 739 0352 FA68     		ldr	r2, [r7, #12]
 740 0354 DA60     		str	r2, [r3, #12]
 741 0356 22E0     		b	.L28
 742              	.L27:
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 743              		.loc 1 747 0
 744 0358 7B68     		ldr	r3, [r7, #4]
 745 035a 1B69     		ldr	r3, [r3, #16]
 746 035c FB60     		str	r3, [r7, #12]
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 747              		.loc 1 750 0
 748 035e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 749 0360 1346     		mov	r3, r2
 750 0362 4FEA4303 		lsl	r3, r3, #1
 751 0366 9B18     		adds	r3, r3, r2
 752 0368 4FF00702 		mov	r2, #7
 753 036c 02FA03F3 		lsl	r3, r2, r3
 754 0370 BB60     		str	r3, [r7, #8]
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 755              		.loc 1 753 0
 756 0372 BB68     		ldr	r3, [r7, #8]
 757 0374 6FEA0303 		mvn	r3, r3
 758 0378 FA68     		ldr	r2, [r7, #12]
 759 037a 1340     		ands	r3, r3, r2
 760 037c FB60     		str	r3, [r7, #12]
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 761              		.loc 1 756 0
 762 037e 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 763 0380 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 764 0382 1346     		mov	r3, r2
 765 0384 4FEA4303 		lsl	r3, r3, #1
 766 0388 9B18     		adds	r3, r3, r2
 767 038a 01FA03F3 		lsl	r3, r1, r3
 768 038e BB60     		str	r3, [r7, #8]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 769              		.loc 1 759 0
 770 0390 FA68     		ldr	r2, [r7, #12]
 771 0392 BB68     		ldr	r3, [r7, #8]
 772 0394 1343     		orrs	r3, r3, r2
 773 0396 FB60     		str	r3, [r7, #12]
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 774              		.loc 1 762 0
 775 0398 7B68     		ldr	r3, [r7, #4]
 776 039a FA68     		ldr	r2, [r7, #12]
 777 039c 1A61     		str	r2, [r3, #16]
 778              	.L28:
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 779              		.loc 1 765 0
 780 039e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 781 03a0 062B     		cmp	r3, #6
 782 03a2 27D8     		bhi	.L29
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 783              		.loc 1 768 0
 784 03a4 7B68     		ldr	r3, [r7, #4]
 785 03a6 5B6B     		ldr	r3, [r3, #52]
 786 03a8 FB60     		str	r3, [r7, #12]
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 787              		.loc 1 771 0
 788 03aa BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 789 03ac 03F1FF32 		add	r2, r3, #-1
 790 03b0 1346     		mov	r3, r2
 791 03b2 4FEA8303 		lsl	r3, r3, #2
 792 03b6 9B18     		adds	r3, r3, r2
 793 03b8 4FF01F02 		mov	r2, #31
 794 03bc 02FA03F3 		lsl	r3, r2, r3
 795 03c0 BB60     		str	r3, [r7, #8]
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 796              		.loc 1 774 0
 797 03c2 BB68     		ldr	r3, [r7, #8]
 798 03c4 6FEA0303 		mvn	r3, r3
 799 03c8 FA68     		ldr	r2, [r7, #12]
 800 03ca 1340     		ands	r3, r3, r2
 801 03cc FB60     		str	r3, [r7, #12]
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 802              		.loc 1 777 0
 803 03ce F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 804 03d0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 805 03d2 03F1FF32 		add	r2, r3, #-1
 806 03d6 1346     		mov	r3, r2
 807 03d8 4FEA8303 		lsl	r3, r3, #2
 808 03dc 9B18     		adds	r3, r3, r2
 809 03de 01FA03F3 		lsl	r3, r1, r3
 810 03e2 BB60     		str	r3, [r7, #8]
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 811              		.loc 1 780 0
 812 03e4 FA68     		ldr	r2, [r7, #12]
 813 03e6 BB68     		ldr	r3, [r7, #8]
 814 03e8 1343     		orrs	r3, r3, r2
 815 03ea FB60     		str	r3, [r7, #12]
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 816              		.loc 1 783 0
 817 03ec 7B68     		ldr	r3, [r7, #4]
 818 03ee FA68     		ldr	r2, [r7, #12]
 819 03f0 5A63     		str	r2, [r3, #52]
 820 03f2 51E0     		b	.L26
 821              	.L29:
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 822              		.loc 1 786 0
 823 03f4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 824 03f6 0C2B     		cmp	r3, #12
 825 03f8 27D8     		bhi	.L31
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 826              		.loc 1 789 0
 827 03fa 7B68     		ldr	r3, [r7, #4]
 828 03fc 1B6B     		ldr	r3, [r3, #48]
 829 03fe FB60     		str	r3, [r7, #12]
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 830              		.loc 1 792 0
 831 0400 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 832 0402 1346     		mov	r3, r2
 833 0404 4FEA8303 		lsl	r3, r3, #2
 834 0408 9B18     		adds	r3, r3, r2
 835 040a A3F12303 		sub	r3, r3, #35
 836 040e 4FF01F02 		mov	r2, #31
 837 0412 02FA03F3 		lsl	r3, r2, r3
 838 0416 BB60     		str	r3, [r7, #8]
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 839              		.loc 1 795 0
 840 0418 BB68     		ldr	r3, [r7, #8]
 841 041a 6FEA0303 		mvn	r3, r3
 842 041e FA68     		ldr	r2, [r7, #12]
 843 0420 1340     		ands	r3, r3, r2
 844 0422 FB60     		str	r3, [r7, #12]
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 845              		.loc 1 798 0
 846 0424 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 847 0426 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 848 0428 1346     		mov	r3, r2
 849 042a 4FEA8303 		lsl	r3, r3, #2
 850 042e 9B18     		adds	r3, r3, r2
 851 0430 A3F12303 		sub	r3, r3, #35
 852 0434 01FA03F3 		lsl	r3, r1, r3
 853 0438 BB60     		str	r3, [r7, #8]
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 854              		.loc 1 801 0
 855 043a FA68     		ldr	r2, [r7, #12]
 856 043c BB68     		ldr	r3, [r7, #8]
 857 043e 1343     		orrs	r3, r3, r2
 858 0440 FB60     		str	r3, [r7, #12]
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 859              		.loc 1 804 0
 860 0442 7B68     		ldr	r3, [r7, #4]
 861 0444 FA68     		ldr	r2, [r7, #12]
 862 0446 1A63     		str	r2, [r3, #48]
 863 0448 26E0     		b	.L26
 864              	.L31:
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 865              		.loc 1 810 0
 866 044a 7B68     		ldr	r3, [r7, #4]
 867 044c DB6A     		ldr	r3, [r3, #44]
 868 044e FB60     		str	r3, [r7, #12]
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 869              		.loc 1 813 0
 870 0450 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 871 0452 1346     		mov	r3, r2
 872 0454 4FEA8303 		lsl	r3, r3, #2
 873 0458 9B18     		adds	r3, r3, r2
 874 045a A3F14103 		sub	r3, r3, #65
 875 045e 4FF01F02 		mov	r2, #31
 876 0462 02FA03F3 		lsl	r3, r2, r3
 877 0466 BB60     		str	r3, [r7, #8]
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 878              		.loc 1 816 0
 879 0468 BB68     		ldr	r3, [r7, #8]
 880 046a 6FEA0303 		mvn	r3, r3
 881 046e FA68     		ldr	r2, [r7, #12]
 882 0470 1340     		ands	r3, r3, r2
 883 0472 FB60     		str	r3, [r7, #12]
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 884              		.loc 1 819 0
 885 0474 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 886 0476 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 887 0478 1346     		mov	r3, r2
 888 047a 4FEA8303 		lsl	r3, r3, #2
 889 047e 9B18     		adds	r3, r3, r2
 890 0480 A3F14103 		sub	r3, r3, #65
 891 0484 01FA03F3 		lsl	r3, r1, r3
 892 0488 BB60     		str	r3, [r7, #8]
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 893              		.loc 1 822 0
 894 048a FA68     		ldr	r2, [r7, #12]
 895 048c BB68     		ldr	r3, [r7, #8]
 896 048e 1343     		orrs	r3, r3, r2
 897 0490 FB60     		str	r3, [r7, #12]
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 898              		.loc 1 825 0
 899 0492 7B68     		ldr	r3, [r7, #4]
 900 0494 FA68     		ldr	r2, [r7, #12]
 901 0496 DA62     		str	r2, [r3, #44]
 902              	.L26:
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 903              		.loc 1 827 0
 904 0498 07F11407 		add	r7, r7, #20
 905 049c BD46     		mov	sp, r7
 906 049e 80BC     		pop	{r7}
 907 04a0 7047     		bx	lr
 908              		.cfi_endproc
 909              	.LFE121:
 911 04a2 00BF     		.align	2
 912              		.global	ADC_SoftwareStartConv
 913              		.thumb
 914              		.thumb_func
 916              	ADC_SoftwareStartConv:
 917              	.LFB122:
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 918              		.loc 1 835 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 8
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922              		@ link register save eliminated.
 923 04a4 80B4     		push	{r7}
 924              	.LCFI35:
 925              		.cfi_def_cfa_offset 4
 926              		.cfi_offset 7, -4
 927 04a6 83B0     		sub	sp, sp, #12
 928              	.LCFI36:
 929              		.cfi_def_cfa_offset 16
 930 04a8 00AF     		add	r7, sp, #0
 931              	.LCFI37:
 932              		.cfi_def_cfa_register 7
 933 04aa 7860     		str	r0, [r7, #4]
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 934              		.loc 1 840 0
 935 04ac 7B68     		ldr	r3, [r7, #4]
 936 04ae 9B68     		ldr	r3, [r3, #8]
 937 04b0 43F08042 		orr	r2, r3, #1073741824
 938 04b4 7B68     		ldr	r3, [r7, #4]
 939 04b6 9A60     		str	r2, [r3, #8]
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 940              		.loc 1 841 0
 941 04b8 07F10C07 		add	r7, r7, #12
 942 04bc BD46     		mov	sp, r7
 943 04be 80BC     		pop	{r7}
 944 04c0 7047     		bx	lr
 945              		.cfi_endproc
 946              	.LFE122:
 948 04c2 00BF     		.align	2
 949              		.global	ADC_GetSoftwareStartConvStatus
 950              		.thumb
 951              		.thumb_func
 953              	ADC_GetSoftwareStartConvStatus:
 954              	.LFB123:
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 955              		.loc 1 849 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 16
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 960 04c4 80B4     		push	{r7}
 961              	.LCFI38:
 962              		.cfi_def_cfa_offset 4
 963              		.cfi_offset 7, -4
 964 04c6 85B0     		sub	sp, sp, #20
 965              	.LCFI39:
 966              		.cfi_def_cfa_offset 24
 967 04c8 00AF     		add	r7, sp, #0
 968              	.LCFI40:
 969              		.cfi_def_cfa_register 7
 970 04ca 7860     		str	r0, [r7, #4]
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 971              		.loc 1 850 0
 972 04cc 4FF00003 		mov	r3, #0
 973 04d0 FB73     		strb	r3, [r7, #15]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 974              		.loc 1 855 0
 975 04d2 7B68     		ldr	r3, [r7, #4]
 976 04d4 9B68     		ldr	r3, [r3, #8]
 977 04d6 03F48003 		and	r3, r3, #4194304
 978 04da 002B     		cmp	r3, #0
 979 04dc 03D0     		beq	.L34
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 980              		.loc 1 858 0
 981 04de 4FF00103 		mov	r3, #1
 982 04e2 FB73     		strb	r3, [r7, #15]
 983 04e4 02E0     		b	.L35
 984              	.L34:
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 985              		.loc 1 863 0
 986 04e6 4FF00003 		mov	r3, #0
 987 04ea FB73     		strb	r3, [r7, #15]
 988              	.L35:
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 989              		.loc 1 867 0
 990 04ec FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 991              		.loc 1 868 0
 992 04ee 1846     		mov	r0, r3
 993 04f0 07F11407 		add	r7, r7, #20
 994 04f4 BD46     		mov	sp, r7
 995 04f6 80BC     		pop	{r7}
 996 04f8 7047     		bx	lr
 997              		.cfi_endproc
 998              	.LFE123:
 1000 04fa 00BF     		.align	2
 1001              		.global	ADC_EOCOnEachRegularChannelCmd
 1002              		.thumb
 1003              		.thumb_func
 1005              	ADC_EOCOnEachRegularChannelCmd:
 1006              	.LFB124:
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1007              		.loc 1 879 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 8
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011              		@ link register save eliminated.
 1012 04fc 80B4     		push	{r7}
 1013              	.LCFI41:
 1014              		.cfi_def_cfa_offset 4
 1015              		.cfi_offset 7, -4
 1016 04fe 83B0     		sub	sp, sp, #12
 1017              	.LCFI42:
 1018              		.cfi_def_cfa_offset 16
 1019 0500 00AF     		add	r7, sp, #0
 1020              	.LCFI43:
 1021              		.cfi_def_cfa_register 7
 1022 0502 7860     		str	r0, [r7, #4]
 1023 0504 0B46     		mov	r3, r1
 1024 0506 FB70     		strb	r3, [r7, #3]
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1025              		.loc 1 884 0
 1026 0508 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1027 050a 002B     		cmp	r3, #0
 1028 050c 06D0     		beq	.L38
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1029              		.loc 1 887 0
 1030 050e 7B68     		ldr	r3, [r7, #4]
 1031 0510 9B68     		ldr	r3, [r3, #8]
 1032 0512 43F48062 		orr	r2, r3, #1024
 1033 0516 7B68     		ldr	r3, [r7, #4]
 1034 0518 9A60     		str	r2, [r3, #8]
 1035 051a 05E0     		b	.L37
 1036              	.L38:
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 1037              		.loc 1 892 0
 1038 051c 7B68     		ldr	r3, [r7, #4]
 1039 051e 9B68     		ldr	r3, [r3, #8]
 1040 0520 23F48062 		bic	r2, r3, #1024
 1041 0524 7B68     		ldr	r3, [r7, #4]
 1042 0526 9A60     		str	r2, [r3, #8]
 1043              	.L37:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1044              		.loc 1 894 0
 1045 0528 07F10C07 		add	r7, r7, #12
 1046 052c BD46     		mov	sp, r7
 1047 052e 80BC     		pop	{r7}
 1048 0530 7047     		bx	lr
 1049              		.cfi_endproc
 1050              	.LFE124:
 1052 0532 00BF     		.align	2
 1053              		.global	ADC_ContinuousModeCmd
 1054              		.thumb
 1055              		.thumb_func
 1057              	ADC_ContinuousModeCmd:
 1058              	.LFB125:
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1059              		.loc 1 904 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 8
 1062              		@ frame_needed = 1, uses_anonymous_args = 0
 1063              		@ link register save eliminated.
 1064 0534 80B4     		push	{r7}
 1065              	.LCFI44:
 1066              		.cfi_def_cfa_offset 4
 1067              		.cfi_offset 7, -4
 1068 0536 83B0     		sub	sp, sp, #12
 1069              	.LCFI45:
 1070              		.cfi_def_cfa_offset 16
 1071 0538 00AF     		add	r7, sp, #0
 1072              	.LCFI46:
 1073              		.cfi_def_cfa_register 7
 1074 053a 7860     		str	r0, [r7, #4]
 1075 053c 0B46     		mov	r3, r1
 1076 053e FB70     		strb	r3, [r7, #3]
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1077              		.loc 1 909 0
 1078 0540 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1079 0542 002B     		cmp	r3, #0
 1080 0544 06D0     		beq	.L41
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1081              		.loc 1 912 0
 1082 0546 7B68     		ldr	r3, [r7, #4]
 1083 0548 9B68     		ldr	r3, [r3, #8]
 1084 054a 43F00202 		orr	r2, r3, #2
 1085 054e 7B68     		ldr	r3, [r7, #4]
 1086 0550 9A60     		str	r2, [r3, #8]
 1087 0552 05E0     		b	.L40
 1088              	.L41:
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 1089              		.loc 1 917 0
 1090 0554 7B68     		ldr	r3, [r7, #4]
 1091 0556 9B68     		ldr	r3, [r3, #8]
 1092 0558 23F00202 		bic	r2, r3, #2
 1093 055c 7B68     		ldr	r3, [r7, #4]
 1094 055e 9A60     		str	r2, [r3, #8]
 1095              	.L40:
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1096              		.loc 1 919 0
 1097 0560 07F10C07 		add	r7, r7, #12
 1098 0564 BD46     		mov	sp, r7
 1099 0566 80BC     		pop	{r7}
 1100 0568 7047     		bx	lr
 1101              		.cfi_endproc
 1102              	.LFE125:
 1104 056a 00BF     		.align	2
 1105              		.global	ADC_DiscModeChannelCountConfig
 1106              		.thumb
 1107              		.thumb_func
 1109              	ADC_DiscModeChannelCountConfig:
 1110              	.LFB126:
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1111              		.loc 1 930 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 16
 1114              		@ frame_needed = 1, uses_anonymous_args = 0
 1115              		@ link register save eliminated.
 1116 056c 80B4     		push	{r7}
 1117              	.LCFI47:
 1118              		.cfi_def_cfa_offset 4
 1119              		.cfi_offset 7, -4
 1120 056e 85B0     		sub	sp, sp, #20
 1121              	.LCFI48:
 1122              		.cfi_def_cfa_offset 24
 1123 0570 00AF     		add	r7, sp, #0
 1124              	.LCFI49:
 1125              		.cfi_def_cfa_register 7
 1126 0572 7860     		str	r0, [r7, #4]
 1127 0574 0B46     		mov	r3, r1
 1128 0576 FB70     		strb	r3, [r7, #3]
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1129              		.loc 1 931 0
 1130 0578 4FF00003 		mov	r3, #0
 1131 057c FB60     		str	r3, [r7, #12]
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1132              		.loc 1 932 0
 1133 057e 4FF00003 		mov	r3, #0
 1134 0582 BB60     		str	r3, [r7, #8]
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1135              		.loc 1 939 0
 1136 0584 7B68     		ldr	r3, [r7, #4]
 1137 0586 5B68     		ldr	r3, [r3, #4]
 1138 0588 FB60     		str	r3, [r7, #12]
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1139              		.loc 1 942 0
 1140 058a FB68     		ldr	r3, [r7, #12]
 1141 058c 23F46043 		bic	r3, r3, #57344
 1142 0590 FB60     		str	r3, [r7, #12]
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1143              		.loc 1 945 0
 1144 0592 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1145 0594 03F1FF33 		add	r3, r3, #-1
 1146 0598 BB60     		str	r3, [r7, #8]
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1147              		.loc 1 946 0
 1148 059a BB68     		ldr	r3, [r7, #8]
 1149 059c 4FEA4333 		lsl	r3, r3, #13
 1150 05a0 FA68     		ldr	r2, [r7, #12]
 1151 05a2 1343     		orrs	r3, r3, r2
 1152 05a4 FB60     		str	r3, [r7, #12]
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1153              		.loc 1 949 0
 1154 05a6 7B68     		ldr	r3, [r7, #4]
 1155 05a8 FA68     		ldr	r2, [r7, #12]
 1156 05aa 5A60     		str	r2, [r3, #4]
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1157              		.loc 1 950 0
 1158 05ac 07F11407 		add	r7, r7, #20
 1159 05b0 BD46     		mov	sp, r7
 1160 05b2 80BC     		pop	{r7}
 1161 05b4 7047     		bx	lr
 1162              		.cfi_endproc
 1163              	.LFE126:
 1165 05b6 00BF     		.align	2
 1166              		.global	ADC_DiscModeCmd
 1167              		.thumb
 1168              		.thumb_func
 1170              	ADC_DiscModeCmd:
 1171              	.LFB127:
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1172              		.loc 1 962 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176              		@ link register save eliminated.
 1177 05b8 80B4     		push	{r7}
 1178              	.LCFI50:
 1179              		.cfi_def_cfa_offset 4
 1180              		.cfi_offset 7, -4
 1181 05ba 83B0     		sub	sp, sp, #12
 1182              	.LCFI51:
 1183              		.cfi_def_cfa_offset 16
 1184 05bc 00AF     		add	r7, sp, #0
 1185              	.LCFI52:
 1186              		.cfi_def_cfa_register 7
 1187 05be 7860     		str	r0, [r7, #4]
 1188 05c0 0B46     		mov	r3, r1
 1189 05c2 FB70     		strb	r3, [r7, #3]
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1190              		.loc 1 967 0
 1191 05c4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1192 05c6 002B     		cmp	r3, #0
 1193 05c8 06D0     		beq	.L45
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1194              		.loc 1 970 0
 1195 05ca 7B68     		ldr	r3, [r7, #4]
 1196 05cc 5B68     		ldr	r3, [r3, #4]
 1197 05ce 43F40062 		orr	r2, r3, #2048
 1198 05d2 7B68     		ldr	r3, [r7, #4]
 1199 05d4 5A60     		str	r2, [r3, #4]
 1200 05d6 05E0     		b	.L44
 1201              	.L45:
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 1202              		.loc 1 975 0
 1203 05d8 7B68     		ldr	r3, [r7, #4]
 1204 05da 5B68     		ldr	r3, [r3, #4]
 1205 05dc 23F40062 		bic	r2, r3, #2048
 1206 05e0 7B68     		ldr	r3, [r7, #4]
 1207 05e2 5A60     		str	r2, [r3, #4]
 1208              	.L44:
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1209              		.loc 1 977 0
 1210 05e4 07F10C07 		add	r7, r7, #12
 1211 05e8 BD46     		mov	sp, r7
 1212 05ea 80BC     		pop	{r7}
 1213 05ec 7047     		bx	lr
 1214              		.cfi_endproc
 1215              	.LFE127:
 1217 05ee 00BF     		.align	2
 1218              		.global	ADC_GetConversionValue
 1219              		.thumb
 1220              		.thumb_func
 1222              	ADC_GetConversionValue:
 1223              	.LFB128:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1224              		.loc 1 985 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 8
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228              		@ link register save eliminated.
 1229 05f0 80B4     		push	{r7}
 1230              	.LCFI53:
 1231              		.cfi_def_cfa_offset 4
 1232              		.cfi_offset 7, -4
 1233 05f2 83B0     		sub	sp, sp, #12
 1234              	.LCFI54:
 1235              		.cfi_def_cfa_offset 16
 1236 05f4 00AF     		add	r7, sp, #0
 1237              	.LCFI55:
 1238              		.cfi_def_cfa_register 7
 1239 05f6 7860     		str	r0, [r7, #4]
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1240              		.loc 1 990 0
 1241 05f8 7B68     		ldr	r3, [r7, #4]
 1242 05fa DB6C     		ldr	r3, [r3, #76]
 1243 05fc 9BB2     		uxth	r3, r3
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1244              		.loc 1 991 0
 1245 05fe 1846     		mov	r0, r3
 1246 0600 07F10C07 		add	r7, r7, #12
 1247 0604 BD46     		mov	sp, r7
 1248 0606 80BC     		pop	{r7}
 1249 0608 7047     		bx	lr
 1250              		.cfi_endproc
 1251              	.LFE128:
 1253 060a 00BF     		.align	2
 1254              		.global	ADC_GetMultiModeConversionValue
 1255              		.thumb
 1256              		.thumb_func
 1258              	ADC_GetMultiModeConversionValue:
 1259              	.LFB129:
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1260              		.loc 1 1006 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 0
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 1265 060c 80B4     		push	{r7}
 1266              	.LCFI56:
 1267              		.cfi_def_cfa_offset 4
 1268              		.cfi_offset 7, -4
 1269 060e 00AF     		add	r7, sp, #0
 1270              	.LCFI57:
 1271              		.cfi_def_cfa_register 7
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1272              		.loc 1 1008 0
 1273 0610 024B     		ldr	r3, .L51
 1274 0612 1B68     		ldr	r3, [r3, #0]
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1275              		.loc 1 1009 0
 1276 0614 1846     		mov	r0, r3
 1277 0616 BD46     		mov	sp, r7
 1278 0618 80BC     		pop	{r7}
 1279 061a 7047     		bx	lr
 1280              	.L52:
 1281              		.align	2
 1282              	.L51:
 1283 061c 08230140 		.word	1073816328
 1284              		.cfi_endproc
 1285              	.LFE129:
 1287              		.align	2
 1288              		.global	ADC_DMACmd
 1289              		.thumb
 1290              		.thumb_func
 1292              	ADC_DMACmd:
 1293              	.LFB130:
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1294              		.loc 1 1055 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 8
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 1299 0620 80B4     		push	{r7}
 1300              	.LCFI58:
 1301              		.cfi_def_cfa_offset 4
 1302              		.cfi_offset 7, -4
 1303 0622 83B0     		sub	sp, sp, #12
 1304              	.LCFI59:
 1305              		.cfi_def_cfa_offset 16
 1306 0624 00AF     		add	r7, sp, #0
 1307              	.LCFI60:
 1308              		.cfi_def_cfa_register 7
 1309 0626 7860     		str	r0, [r7, #4]
 1310 0628 0B46     		mov	r3, r1
 1311 062a FB70     		strb	r3, [r7, #3]
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1312              		.loc 1 1059 0
 1313 062c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1314 062e 002B     		cmp	r3, #0
 1315 0630 06D0     		beq	.L54
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1316              		.loc 1 1062 0
 1317 0632 7B68     		ldr	r3, [r7, #4]
 1318 0634 9B68     		ldr	r3, [r3, #8]
 1319 0636 43F48072 		orr	r2, r3, #256
 1320 063a 7B68     		ldr	r3, [r7, #4]
 1321 063c 9A60     		str	r2, [r3, #8]
 1322 063e 05E0     		b	.L53
 1323              	.L54:
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 1324              		.loc 1 1067 0
 1325 0640 7B68     		ldr	r3, [r7, #4]
 1326 0642 9B68     		ldr	r3, [r3, #8]
 1327 0644 23F48072 		bic	r2, r3, #256
 1328 0648 7B68     		ldr	r3, [r7, #4]
 1329 064a 9A60     		str	r2, [r3, #8]
 1330              	.L53:
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1331              		.loc 1 1069 0
 1332 064c 07F10C07 		add	r7, r7, #12
 1333 0650 BD46     		mov	sp, r7
 1334 0652 80BC     		pop	{r7}
 1335 0654 7047     		bx	lr
 1336              		.cfi_endproc
 1337              	.LFE130:
 1339 0656 00BF     		.align	2
 1340              		.global	ADC_DMARequestAfterLastTransferCmd
 1341              		.thumb
 1342              		.thumb_func
 1344              	ADC_DMARequestAfterLastTransferCmd:
 1345              	.LFB131:
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1346              		.loc 1 1079 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 8
 1349              		@ frame_needed = 1, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351 0658 80B4     		push	{r7}
 1352              	.LCFI61:
 1353              		.cfi_def_cfa_offset 4
 1354              		.cfi_offset 7, -4
 1355 065a 83B0     		sub	sp, sp, #12
 1356              	.LCFI62:
 1357              		.cfi_def_cfa_offset 16
 1358 065c 00AF     		add	r7, sp, #0
 1359              	.LCFI63:
 1360              		.cfi_def_cfa_register 7
 1361 065e 7860     		str	r0, [r7, #4]
 1362 0660 0B46     		mov	r3, r1
 1363 0662 FB70     		strb	r3, [r7, #3]
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1364              		.loc 1 1083 0
 1365 0664 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1366 0666 002B     		cmp	r3, #0
 1367 0668 06D0     		beq	.L57
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1368              		.loc 1 1086 0
 1369 066a 7B68     		ldr	r3, [r7, #4]
 1370 066c 9B68     		ldr	r3, [r3, #8]
 1371 066e 43F40072 		orr	r2, r3, #512
 1372 0672 7B68     		ldr	r3, [r7, #4]
 1373 0674 9A60     		str	r2, [r3, #8]
 1374 0676 05E0     		b	.L56
 1375              	.L57:
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 1376              		.loc 1 1091 0
 1377 0678 7B68     		ldr	r3, [r7, #4]
 1378 067a 9B68     		ldr	r3, [r3, #8]
 1379 067c 23F40072 		bic	r2, r3, #512
 1380 0680 7B68     		ldr	r3, [r7, #4]
 1381 0682 9A60     		str	r2, [r3, #8]
 1382              	.L56:
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1383              		.loc 1 1093 0
 1384 0684 07F10C07 		add	r7, r7, #12
 1385 0688 BD46     		mov	sp, r7
 1386 068a 80BC     		pop	{r7}
 1387 068c 7047     		bx	lr
 1388              		.cfi_endproc
 1389              	.LFE131:
 1391 068e 00BF     		.align	2
 1392              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1393              		.thumb
 1394              		.thumb_func
 1396              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1397              	.LFB132:
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1398              		.loc 1 1106 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 8
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402              		@ link register save eliminated.
 1403 0690 80B4     		push	{r7}
 1404              	.LCFI64:
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 7, -4
 1407 0692 83B0     		sub	sp, sp, #12
 1408              	.LCFI65:
 1409              		.cfi_def_cfa_offset 16
 1410 0694 00AF     		add	r7, sp, #0
 1411              	.LCFI66:
 1412              		.cfi_def_cfa_register 7
 1413 0696 0346     		mov	r3, r0
 1414 0698 FB71     		strb	r3, [r7, #7]
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1415              		.loc 1 1109 0
 1416 069a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1417 069c 002B     		cmp	r3, #0
 1418 069e 06D0     		beq	.L60
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1419              		.loc 1 1112 0
 1420 06a0 084B     		ldr	r3, .L62
 1421 06a2 084A     		ldr	r2, .L62
 1422 06a4 5268     		ldr	r2, [r2, #4]
 1423 06a6 42F40052 		orr	r2, r2, #8192
 1424 06aa 5A60     		str	r2, [r3, #4]
 1425 06ac 05E0     		b	.L59
 1426              	.L60:
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 1427              		.loc 1 1117 0
 1428 06ae 054B     		ldr	r3, .L62
 1429 06b0 044A     		ldr	r2, .L62
 1430 06b2 5268     		ldr	r2, [r2, #4]
 1431 06b4 22F40052 		bic	r2, r2, #8192
 1432 06b8 5A60     		str	r2, [r3, #4]
 1433              	.L59:
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1434              		.loc 1 1119 0
 1435 06ba 07F10C07 		add	r7, r7, #12
 1436 06be BD46     		mov	sp, r7
 1437 06c0 80BC     		pop	{r7}
 1438 06c2 7047     		bx	lr
 1439              	.L63:
 1440              		.align	2
 1441              	.L62:
 1442 06c4 00230140 		.word	1073816320
 1443              		.cfi_endproc
 1444              	.LFE132:
 1446              		.align	2
 1447              		.global	ADC_InjectedChannelConfig
 1448              		.thumb
 1449              		.thumb_func
 1451              	ADC_InjectedChannelConfig:
 1452              	.LFB133:
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1453              		.loc 1 1193 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 24
 1456              		@ frame_needed = 1, uses_anonymous_args = 0
 1457              		@ link register save eliminated.
 1458 06c8 80B4     		push	{r7}
 1459              	.LCFI67:
 1460              		.cfi_def_cfa_offset 4
 1461              		.cfi_offset 7, -4
 1462 06ca 87B0     		sub	sp, sp, #28
 1463              	.LCFI68:
 1464              		.cfi_def_cfa_offset 32
 1465 06cc 00AF     		add	r7, sp, #0
 1466              	.LCFI69:
 1467              		.cfi_def_cfa_register 7
 1468 06ce 7860     		str	r0, [r7, #4]
 1469 06d0 F970     		strb	r1, [r7, #3]
 1470 06d2 BA70     		strb	r2, [r7, #2]
 1471 06d4 7B70     		strb	r3, [r7, #1]
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1472              		.loc 1 1194 0
 1473 06d6 4FF00003 		mov	r3, #0
 1474 06da 7B61     		str	r3, [r7, #20]
 1475 06dc 4FF00003 		mov	r3, #0
 1476 06e0 3B61     		str	r3, [r7, #16]
 1477 06e2 4FF00003 		mov	r3, #0
 1478 06e6 FB60     		str	r3, [r7, #12]
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1479              		.loc 1 1201 0
 1480 06e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1481 06ea 092B     		cmp	r3, #9
 1482 06ec 27D9     		bls	.L65
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1483              		.loc 1 1204 0
 1484 06ee 7B68     		ldr	r3, [r7, #4]
 1485 06f0 DB68     		ldr	r3, [r3, #12]
 1486 06f2 7B61     		str	r3, [r7, #20]
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1487              		.loc 1 1206 0
 1488 06f4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1489 06f6 1346     		mov	r3, r2
 1490 06f8 4FEA4303 		lsl	r3, r3, #1
 1491 06fc 9B18     		adds	r3, r3, r2
 1492 06fe A3F11E03 		sub	r3, r3, #30
 1493 0702 4FF00702 		mov	r2, #7
 1494 0706 02FA03F3 		lsl	r3, r2, r3
 1495 070a 3B61     		str	r3, [r7, #16]
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1496              		.loc 1 1208 0
 1497 070c 3B69     		ldr	r3, [r7, #16]
 1498 070e 6FEA0303 		mvn	r3, r3
 1499 0712 7A69     		ldr	r2, [r7, #20]
 1500 0714 1340     		ands	r3, r3, r2
 1501 0716 7B61     		str	r3, [r7, #20]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1502              		.loc 1 1210 0
 1503 0718 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1504 071a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1505 071c 1346     		mov	r3, r2
 1506 071e 4FEA4303 		lsl	r3, r3, #1
 1507 0722 9B18     		adds	r3, r3, r2
 1508 0724 A3F11E03 		sub	r3, r3, #30
 1509 0728 01FA03F3 		lsl	r3, r1, r3
 1510 072c 3B61     		str	r3, [r7, #16]
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1511              		.loc 1 1212 0
 1512 072e 7A69     		ldr	r2, [r7, #20]
 1513 0730 3B69     		ldr	r3, [r7, #16]
 1514 0732 1343     		orrs	r3, r3, r2
 1515 0734 7B61     		str	r3, [r7, #20]
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1516              		.loc 1 1214 0
 1517 0736 7B68     		ldr	r3, [r7, #4]
 1518 0738 7A69     		ldr	r2, [r7, #20]
 1519 073a DA60     		str	r2, [r3, #12]
 1520 073c 22E0     		b	.L66
 1521              	.L65:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1522              		.loc 1 1219 0
 1523 073e 7B68     		ldr	r3, [r7, #4]
 1524 0740 1B69     		ldr	r3, [r3, #16]
 1525 0742 7B61     		str	r3, [r7, #20]
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1526              		.loc 1 1221 0
 1527 0744 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1528 0746 1346     		mov	r3, r2
 1529 0748 4FEA4303 		lsl	r3, r3, #1
 1530 074c 9B18     		adds	r3, r3, r2
 1531 074e 4FF00702 		mov	r2, #7
 1532 0752 02FA03F3 		lsl	r3, r2, r3
 1533 0756 3B61     		str	r3, [r7, #16]
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1534              		.loc 1 1223 0
 1535 0758 3B69     		ldr	r3, [r7, #16]
 1536 075a 6FEA0303 		mvn	r3, r3
 1537 075e 7A69     		ldr	r2, [r7, #20]
 1538 0760 1340     		ands	r3, r3, r2
 1539 0762 7B61     		str	r3, [r7, #20]
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1540              		.loc 1 1225 0
 1541 0764 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1542 0766 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1543 0768 1346     		mov	r3, r2
 1544 076a 4FEA4303 		lsl	r3, r3, #1
 1545 076e 9B18     		adds	r3, r3, r2
 1546 0770 01FA03F3 		lsl	r3, r1, r3
 1547 0774 3B61     		str	r3, [r7, #16]
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1548              		.loc 1 1227 0
 1549 0776 7A69     		ldr	r2, [r7, #20]
 1550 0778 3B69     		ldr	r3, [r7, #16]
 1551 077a 1343     		orrs	r3, r3, r2
 1552 077c 7B61     		str	r3, [r7, #20]
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1553              		.loc 1 1229 0
 1554 077e 7B68     		ldr	r3, [r7, #4]
 1555 0780 7A69     		ldr	r2, [r7, #20]
 1556 0782 1A61     		str	r2, [r3, #16]
 1557              	.L66:
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1558              		.loc 1 1233 0
 1559 0784 7B68     		ldr	r3, [r7, #4]
 1560 0786 9B6B     		ldr	r3, [r3, #56]
 1561 0788 7B61     		str	r3, [r7, #20]
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1562              		.loc 1 1235 0
 1563 078a 7B69     		ldr	r3, [r7, #20]
 1564 078c 03F44013 		and	r3, r3, #3145728
 1565 0790 4FEA1353 		lsr	r3, r3, #20
 1566 0794 FB60     		str	r3, [r7, #12]
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1567              		.loc 1 1237 0
 1568 0796 FB68     		ldr	r3, [r7, #12]
 1569 0798 DBB2     		uxtb	r3, r3
 1570 079a 6FEA0303 		mvn	r3, r3
 1571 079e DAB2     		uxtb	r2, r3
 1572 07a0 BB78     		ldrb	r3, [r7, #2]
 1573 07a2 D318     		adds	r3, r2, r3
 1574 07a4 DBB2     		uxtb	r3, r3
 1575 07a6 03F10303 		add	r3, r3, #3
 1576 07aa DBB2     		uxtb	r3, r3
 1577 07ac 1A46     		mov	r2, r3
 1578 07ae 1346     		mov	r3, r2
 1579 07b0 4FEA8303 		lsl	r3, r3, #2
 1580 07b4 9B18     		adds	r3, r3, r2
 1581 07b6 4FF01F02 		mov	r2, #31
 1582 07ba 02FA03F3 		lsl	r3, r2, r3
 1583 07be 3B61     		str	r3, [r7, #16]
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1584              		.loc 1 1239 0
 1585 07c0 3B69     		ldr	r3, [r7, #16]
 1586 07c2 6FEA0303 		mvn	r3, r3
 1587 07c6 7A69     		ldr	r2, [r7, #20]
 1588 07c8 1340     		ands	r3, r3, r2
 1589 07ca 7B61     		str	r3, [r7, #20]
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1590              		.loc 1 1241 0
 1591 07cc F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1592 07ce FB68     		ldr	r3, [r7, #12]
 1593 07d0 DBB2     		uxtb	r3, r3
 1594 07d2 6FEA0303 		mvn	r3, r3
 1595 07d6 DAB2     		uxtb	r2, r3
 1596 07d8 BB78     		ldrb	r3, [r7, #2]
 1597 07da D318     		adds	r3, r2, r3
 1598 07dc DBB2     		uxtb	r3, r3
 1599 07de 03F10303 		add	r3, r3, #3
 1600 07e2 DBB2     		uxtb	r3, r3
 1601 07e4 1A46     		mov	r2, r3
 1602 07e6 1346     		mov	r3, r2
 1603 07e8 4FEA8303 		lsl	r3, r3, #2
 1604 07ec 9B18     		adds	r3, r3, r2
 1605 07ee 01FA03F3 		lsl	r3, r1, r3
 1606 07f2 3B61     		str	r3, [r7, #16]
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1607              		.loc 1 1243 0
 1608 07f4 7A69     		ldr	r2, [r7, #20]
 1609 07f6 3B69     		ldr	r3, [r7, #16]
 1610 07f8 1343     		orrs	r3, r3, r2
 1611 07fa 7B61     		str	r3, [r7, #20]
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1612              		.loc 1 1245 0
 1613 07fc 7B68     		ldr	r3, [r7, #4]
 1614 07fe 7A69     		ldr	r2, [r7, #20]
 1615 0800 9A63     		str	r2, [r3, #56]
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1616              		.loc 1 1246 0
 1617 0802 07F11C07 		add	r7, r7, #28
 1618 0806 BD46     		mov	sp, r7
 1619 0808 80BC     		pop	{r7}
 1620 080a 7047     		bx	lr
 1621              		.cfi_endproc
 1622              	.LFE133:
 1624              		.align	2
 1625              		.global	ADC_InjectedSequencerLengthConfig
 1626              		.thumb
 1627              		.thumb_func
 1629              	ADC_InjectedSequencerLengthConfig:
 1630              	.LFB134:
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1631              		.loc 1 1256 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 16
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636 080c 80B4     		push	{r7}
 1637              	.LCFI70:
 1638              		.cfi_def_cfa_offset 4
 1639              		.cfi_offset 7, -4
 1640 080e 85B0     		sub	sp, sp, #20
 1641              	.LCFI71:
 1642              		.cfi_def_cfa_offset 24
 1643 0810 00AF     		add	r7, sp, #0
 1644              	.LCFI72:
 1645              		.cfi_def_cfa_register 7
 1646 0812 7860     		str	r0, [r7, #4]
 1647 0814 0B46     		mov	r3, r1
 1648 0816 FB70     		strb	r3, [r7, #3]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1649              		.loc 1 1257 0
 1650 0818 4FF00003 		mov	r3, #0
 1651 081c FB60     		str	r3, [r7, #12]
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1652              		.loc 1 1258 0
 1653 081e 4FF00003 		mov	r3, #0
 1654 0822 BB60     		str	r3, [r7, #8]
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1655              		.loc 1 1264 0
 1656 0824 7B68     		ldr	r3, [r7, #4]
 1657 0826 9B6B     		ldr	r3, [r3, #56]
 1658 0828 FB60     		str	r3, [r7, #12]
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1659              		.loc 1 1267 0
 1660 082a FB68     		ldr	r3, [r7, #12]
 1661 082c 23F44013 		bic	r3, r3, #3145728
 1662 0830 FB60     		str	r3, [r7, #12]
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1663              		.loc 1 1270 0
 1664 0832 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1665 0834 03F1FF33 		add	r3, r3, #-1
 1666 0838 BB60     		str	r3, [r7, #8]
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1667              		.loc 1 1271 0
 1668 083a BB68     		ldr	r3, [r7, #8]
 1669 083c 4FEA0353 		lsl	r3, r3, #20
 1670 0840 FA68     		ldr	r2, [r7, #12]
 1671 0842 1343     		orrs	r3, r3, r2
 1672 0844 FB60     		str	r3, [r7, #12]
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1673              		.loc 1 1274 0
 1674 0846 7B68     		ldr	r3, [r7, #4]
 1675 0848 FA68     		ldr	r2, [r7, #12]
 1676 084a 9A63     		str	r2, [r3, #56]
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1677              		.loc 1 1275 0
 1678 084c 07F11407 		add	r7, r7, #20
 1679 0850 BD46     		mov	sp, r7
 1680 0852 80BC     		pop	{r7}
 1681 0854 7047     		bx	lr
 1682              		.cfi_endproc
 1683              	.LFE134:
 1685 0856 00BF     		.align	2
 1686              		.global	ADC_SetInjectedOffset
 1687              		.thumb
 1688              		.thumb_func
 1690              	ADC_SetInjectedOffset:
 1691              	.LFB135:
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1692              		.loc 1 1291 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 16
 1695              		@ frame_needed = 1, uses_anonymous_args = 0
 1696              		@ link register save eliminated.
 1697 0858 80B4     		push	{r7}
 1698              	.LCFI73:
 1699              		.cfi_def_cfa_offset 4
 1700              		.cfi_offset 7, -4
 1701 085a 85B0     		sub	sp, sp, #20
 1702              	.LCFI74:
 1703              		.cfi_def_cfa_offset 24
 1704 085c 00AF     		add	r7, sp, #0
 1705              	.LCFI75:
 1706              		.cfi_def_cfa_register 7
 1707 085e 7860     		str	r0, [r7, #4]
 1708 0860 1346     		mov	r3, r2
 1709 0862 0A46     		mov	r2, r1
 1710 0864 FA70     		strb	r2, [r7, #3]
 1711 0866 3B80     		strh	r3, [r7, #0]	@ movhi
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1712              		.loc 1 1292 0
 1713 0868 4FF00003 		mov	r3, #0
 1714 086c FB60     		str	r3, [r7, #12]
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1715              		.loc 1 1298 0
 1716 086e 7B68     		ldr	r3, [r7, #4]
 1717 0870 FB60     		str	r3, [r7, #12]
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1718              		.loc 1 1299 0
 1719 0872 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1720 0874 FB68     		ldr	r3, [r7, #12]
 1721 0876 D318     		adds	r3, r2, r3
 1722 0878 FB60     		str	r3, [r7, #12]
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1723              		.loc 1 1302 0
 1724 087a FB68     		ldr	r3, [r7, #12]
 1725 087c 3A88     		ldrh	r2, [r7, #0]
 1726 087e 1A60     		str	r2, [r3, #0]
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1727              		.loc 1 1303 0
 1728 0880 07F11407 		add	r7, r7, #20
 1729 0884 BD46     		mov	sp, r7
 1730 0886 80BC     		pop	{r7}
 1731 0888 7047     		bx	lr
 1732              		.cfi_endproc
 1733              	.LFE135:
 1735 088a 00BF     		.align	2
 1736              		.global	ADC_ExternalTrigInjectedConvConfig
 1737              		.thumb
 1738              		.thumb_func
 1740              	ADC_ExternalTrigInjectedConvConfig:
 1741              	.LFB136:
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1742              		.loc 1 1329 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 16
 1745              		@ frame_needed = 1, uses_anonymous_args = 0
 1746              		@ link register save eliminated.
 1747 088c 80B4     		push	{r7}
 1748              	.LCFI76:
 1749              		.cfi_def_cfa_offset 4
 1750              		.cfi_offset 7, -4
 1751 088e 85B0     		sub	sp, sp, #20
 1752              	.LCFI77:
 1753              		.cfi_def_cfa_offset 24
 1754 0890 00AF     		add	r7, sp, #0
 1755              	.LCFI78:
 1756              		.cfi_def_cfa_register 7
 1757 0892 7860     		str	r0, [r7, #4]
 1758 0894 3960     		str	r1, [r7, #0]
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1759              		.loc 1 1330 0
 1760 0896 4FF00003 		mov	r3, #0
 1761 089a FB60     		str	r3, [r7, #12]
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1762              		.loc 1 1336 0
 1763 089c 7B68     		ldr	r3, [r7, #4]
 1764 089e 9B68     		ldr	r3, [r3, #8]
 1765 08a0 FB60     		str	r3, [r7, #12]
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1766              		.loc 1 1339 0
 1767 08a2 FB68     		ldr	r3, [r7, #12]
 1768 08a4 23F47023 		bic	r3, r3, #983040
 1769 08a8 FB60     		str	r3, [r7, #12]
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1770              		.loc 1 1342 0
 1771 08aa FA68     		ldr	r2, [r7, #12]
 1772 08ac 3B68     		ldr	r3, [r7, #0]
 1773 08ae 1343     		orrs	r3, r3, r2
 1774 08b0 FB60     		str	r3, [r7, #12]
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1775              		.loc 1 1345 0
 1776 08b2 7B68     		ldr	r3, [r7, #4]
 1777 08b4 FA68     		ldr	r2, [r7, #12]
 1778 08b6 9A60     		str	r2, [r3, #8]
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1779              		.loc 1 1346 0
 1780 08b8 07F11407 		add	r7, r7, #20
 1781 08bc BD46     		mov	sp, r7
 1782 08be 80BC     		pop	{r7}
 1783 08c0 7047     		bx	lr
 1784              		.cfi_endproc
 1785              	.LFE136:
 1787 08c2 00BF     		.align	2
 1788              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1789              		.thumb
 1790              		.thumb_func
 1792              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1793              	.LFB137:
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1794              		.loc 1 1363 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 16
 1797              		@ frame_needed = 1, uses_anonymous_args = 0
 1798              		@ link register save eliminated.
 1799 08c4 80B4     		push	{r7}
 1800              	.LCFI79:
 1801              		.cfi_def_cfa_offset 4
 1802              		.cfi_offset 7, -4
 1803 08c6 85B0     		sub	sp, sp, #20
 1804              	.LCFI80:
 1805              		.cfi_def_cfa_offset 24
 1806 08c8 00AF     		add	r7, sp, #0
 1807              	.LCFI81:
 1808              		.cfi_def_cfa_register 7
 1809 08ca 7860     		str	r0, [r7, #4]
 1810 08cc 3960     		str	r1, [r7, #0]
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1811              		.loc 1 1364 0
 1812 08ce 4FF00003 		mov	r3, #0
 1813 08d2 FB60     		str	r3, [r7, #12]
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1814              		.loc 1 1369 0
 1815 08d4 7B68     		ldr	r3, [r7, #4]
 1816 08d6 9B68     		ldr	r3, [r3, #8]
 1817 08d8 FB60     		str	r3, [r7, #12]
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1818              		.loc 1 1371 0
 1819 08da FB68     		ldr	r3, [r7, #12]
 1820 08dc 23F44013 		bic	r3, r3, #3145728
 1821 08e0 FB60     		str	r3, [r7, #12]
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1822              		.loc 1 1373 0
 1823 08e2 FA68     		ldr	r2, [r7, #12]
 1824 08e4 3B68     		ldr	r3, [r7, #0]
 1825 08e6 1343     		orrs	r3, r3, r2
 1826 08e8 FB60     		str	r3, [r7, #12]
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1827              		.loc 1 1375 0
 1828 08ea 7B68     		ldr	r3, [r7, #4]
 1829 08ec FA68     		ldr	r2, [r7, #12]
 1830 08ee 9A60     		str	r2, [r3, #8]
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1831              		.loc 1 1376 0
 1832 08f0 07F11407 		add	r7, r7, #20
 1833 08f4 BD46     		mov	sp, r7
 1834 08f6 80BC     		pop	{r7}
 1835 08f8 7047     		bx	lr
 1836              		.cfi_endproc
 1837              	.LFE137:
 1839 08fa 00BF     		.align	2
 1840              		.global	ADC_SoftwareStartInjectedConv
 1841              		.thumb
 1842              		.thumb_func
 1844              	ADC_SoftwareStartInjectedConv:
 1845              	.LFB138:
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1846              		.loc 1 1384 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 8
 1849              		@ frame_needed = 1, uses_anonymous_args = 0
 1850              		@ link register save eliminated.
 1851 08fc 80B4     		push	{r7}
 1852              	.LCFI82:
 1853              		.cfi_def_cfa_offset 4
 1854              		.cfi_offset 7, -4
 1855 08fe 83B0     		sub	sp, sp, #12
 1856              	.LCFI83:
 1857              		.cfi_def_cfa_offset 16
 1858 0900 00AF     		add	r7, sp, #0
 1859              	.LCFI84:
 1860              		.cfi_def_cfa_register 7
 1861 0902 7860     		str	r0, [r7, #4]
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1862              		.loc 1 1388 0
 1863 0904 7B68     		ldr	r3, [r7, #4]
 1864 0906 9B68     		ldr	r3, [r3, #8]
 1865 0908 43F48002 		orr	r2, r3, #4194304
 1866 090c 7B68     		ldr	r3, [r7, #4]
 1867 090e 9A60     		str	r2, [r3, #8]
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1868              		.loc 1 1389 0
 1869 0910 07F10C07 		add	r7, r7, #12
 1870 0914 BD46     		mov	sp, r7
 1871 0916 80BC     		pop	{r7}
 1872 0918 7047     		bx	lr
 1873              		.cfi_endproc
 1874              	.LFE138:
 1876 091a 00BF     		.align	2
 1877              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1878              		.thumb
 1879              		.thumb_func
 1881              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1882              	.LFB139:
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1883              		.loc 1 1397 0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 16
 1886              		@ frame_needed = 1, uses_anonymous_args = 0
 1887              		@ link register save eliminated.
 1888 091c 80B4     		push	{r7}
 1889              	.LCFI85:
 1890              		.cfi_def_cfa_offset 4
 1891              		.cfi_offset 7, -4
 1892 091e 85B0     		sub	sp, sp, #20
 1893              	.LCFI86:
 1894              		.cfi_def_cfa_offset 24
 1895 0920 00AF     		add	r7, sp, #0
 1896              	.LCFI87:
 1897              		.cfi_def_cfa_register 7
 1898 0922 7860     		str	r0, [r7, #4]
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1899              		.loc 1 1398 0
 1900 0924 4FF00003 		mov	r3, #0
 1901 0928 FB73     		strb	r3, [r7, #15]
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1902              		.loc 1 1403 0
 1903 092a 7B68     		ldr	r3, [r7, #4]
 1904 092c 9B68     		ldr	r3, [r3, #8]
 1905 092e 03F48003 		and	r3, r3, #4194304
 1906 0932 002B     		cmp	r3, #0
 1907 0934 03D0     		beq	.L73
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1908              		.loc 1 1406 0
 1909 0936 4FF00103 		mov	r3, #1
 1910 093a FB73     		strb	r3, [r7, #15]
 1911 093c 02E0     		b	.L74
 1912              	.L73:
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1913              		.loc 1 1411 0
 1914 093e 4FF00003 		mov	r3, #0
 1915 0942 FB73     		strb	r3, [r7, #15]
 1916              	.L74:
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1917              		.loc 1 1414 0
 1918 0944 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1919              		.loc 1 1415 0
 1920 0946 1846     		mov	r0, r3
 1921 0948 07F11407 		add	r7, r7, #20
 1922 094c BD46     		mov	sp, r7
 1923 094e 80BC     		pop	{r7}
 1924 0950 7047     		bx	lr
 1925              		.cfi_endproc
 1926              	.LFE139:
 1928 0952 00BF     		.align	2
 1929              		.global	ADC_AutoInjectedConvCmd
 1930              		.thumb
 1931              		.thumb_func
 1933              	ADC_AutoInjectedConvCmd:
 1934              	.LFB140:
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1935              		.loc 1 1426 0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 8
 1938              		@ frame_needed = 1, uses_anonymous_args = 0
 1939              		@ link register save eliminated.
 1940 0954 80B4     		push	{r7}
 1941              	.LCFI88:
 1942              		.cfi_def_cfa_offset 4
 1943              		.cfi_offset 7, -4
 1944 0956 83B0     		sub	sp, sp, #12
 1945              	.LCFI89:
 1946              		.cfi_def_cfa_offset 16
 1947 0958 00AF     		add	r7, sp, #0
 1948              	.LCFI90:
 1949              		.cfi_def_cfa_register 7
 1950 095a 7860     		str	r0, [r7, #4]
 1951 095c 0B46     		mov	r3, r1
 1952 095e FB70     		strb	r3, [r7, #3]
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1953              		.loc 1 1430 0
 1954 0960 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1955 0962 002B     		cmp	r3, #0
 1956 0964 06D0     		beq	.L77
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1957              		.loc 1 1433 0
 1958 0966 7B68     		ldr	r3, [r7, #4]
 1959 0968 5B68     		ldr	r3, [r3, #4]
 1960 096a 43F48062 		orr	r2, r3, #1024
 1961 096e 7B68     		ldr	r3, [r7, #4]
 1962 0970 5A60     		str	r2, [r3, #4]
 1963 0972 05E0     		b	.L76
 1964              	.L77:
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1965              		.loc 1 1438 0
 1966 0974 7B68     		ldr	r3, [r7, #4]
 1967 0976 5B68     		ldr	r3, [r3, #4]
 1968 0978 23F48062 		bic	r2, r3, #1024
 1969 097c 7B68     		ldr	r3, [r7, #4]
 1970 097e 5A60     		str	r2, [r3, #4]
 1971              	.L76:
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1972              		.loc 1 1440 0
 1973 0980 07F10C07 		add	r7, r7, #12
 1974 0984 BD46     		mov	sp, r7
 1975 0986 80BC     		pop	{r7}
 1976 0988 7047     		bx	lr
 1977              		.cfi_endproc
 1978              	.LFE140:
 1980 098a 00BF     		.align	2
 1981              		.global	ADC_InjectedDiscModeCmd
 1982              		.thumb
 1983              		.thumb_func
 1985              	ADC_InjectedDiscModeCmd:
 1986              	.LFB141:
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1987              		.loc 1 1452 0
 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 8
 1990              		@ frame_needed = 1, uses_anonymous_args = 0
 1991              		@ link register save eliminated.
 1992 098c 80B4     		push	{r7}
 1993              	.LCFI91:
 1994              		.cfi_def_cfa_offset 4
 1995              		.cfi_offset 7, -4
 1996 098e 83B0     		sub	sp, sp, #12
 1997              	.LCFI92:
 1998              		.cfi_def_cfa_offset 16
 1999 0990 00AF     		add	r7, sp, #0
 2000              	.LCFI93:
 2001              		.cfi_def_cfa_register 7
 2002 0992 7860     		str	r0, [r7, #4]
 2003 0994 0B46     		mov	r3, r1
 2004 0996 FB70     		strb	r3, [r7, #3]
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2005              		.loc 1 1456 0
 2006 0998 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2007 099a 002B     		cmp	r3, #0
 2008 099c 06D0     		beq	.L80
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2009              		.loc 1 1459 0
 2010 099e 7B68     		ldr	r3, [r7, #4]
 2011 09a0 5B68     		ldr	r3, [r3, #4]
 2012 09a2 43F48052 		orr	r2, r3, #4096
 2013 09a6 7B68     		ldr	r3, [r7, #4]
 2014 09a8 5A60     		str	r2, [r3, #4]
 2015 09aa 05E0     		b	.L79
 2016              	.L80:
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 2017              		.loc 1 1464 0
 2018 09ac 7B68     		ldr	r3, [r7, #4]
 2019 09ae 5B68     		ldr	r3, [r3, #4]
 2020 09b0 23F48052 		bic	r2, r3, #4096
 2021 09b4 7B68     		ldr	r3, [r7, #4]
 2022 09b6 5A60     		str	r2, [r3, #4]
 2023              	.L79:
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2024              		.loc 1 1466 0
 2025 09b8 07F10C07 		add	r7, r7, #12
 2026 09bc BD46     		mov	sp, r7
 2027 09be 80BC     		pop	{r7}
 2028 09c0 7047     		bx	lr
 2029              		.cfi_endproc
 2030              	.LFE141:
 2032 09c2 00BF     		.align	2
 2033              		.global	ADC_GetInjectedConversionValue
 2034              		.thumb
 2035              		.thumb_func
 2037              	ADC_GetInjectedConversionValue:
 2038              	.LFB142:
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2039              		.loc 1 1480 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 16
 2042              		@ frame_needed = 1, uses_anonymous_args = 0
 2043              		@ link register save eliminated.
 2044 09c4 80B4     		push	{r7}
 2045              	.LCFI94:
 2046              		.cfi_def_cfa_offset 4
 2047              		.cfi_offset 7, -4
 2048 09c6 85B0     		sub	sp, sp, #20
 2049              	.LCFI95:
 2050              		.cfi_def_cfa_offset 24
 2051 09c8 00AF     		add	r7, sp, #0
 2052              	.LCFI96:
 2053              		.cfi_def_cfa_register 7
 2054 09ca 7860     		str	r0, [r7, #4]
 2055 09cc 0B46     		mov	r3, r1
 2056 09ce FB70     		strb	r3, [r7, #3]
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2057              		.loc 1 1481 0
 2058 09d0 4FF00003 		mov	r3, #0
 2059 09d4 FB60     		str	r3, [r7, #12]
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2060              		.loc 1 1487 0
 2061 09d6 7B68     		ldr	r3, [r7, #4]
 2062 09d8 FB60     		str	r3, [r7, #12]
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2063              		.loc 1 1488 0
 2064 09da FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2065 09dc FB68     		ldr	r3, [r7, #12]
 2066 09de D318     		adds	r3, r2, r3
 2067 09e0 03F12803 		add	r3, r3, #40
 2068 09e4 FB60     		str	r3, [r7, #12]
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2069              		.loc 1 1491 0
 2070 09e6 FB68     		ldr	r3, [r7, #12]
 2071 09e8 1B68     		ldr	r3, [r3, #0]
 2072 09ea 9BB2     		uxth	r3, r3
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2073              		.loc 1 1492 0
 2074 09ec 1846     		mov	r0, r3
 2075 09ee 07F11407 		add	r7, r7, #20
 2076 09f2 BD46     		mov	sp, r7
 2077 09f4 80BC     		pop	{r7}
 2078 09f6 7047     		bx	lr
 2079              		.cfi_endproc
 2080              	.LFE142:
 2082              		.align	2
 2083              		.global	ADC_ITConfig
 2084              		.thumb
 2085              		.thumb_func
 2087              	ADC_ITConfig:
 2088              	.LFB143:
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2089              		.loc 1 1588 0
 2090              		.cfi_startproc
 2091              		@ args = 0, pretend = 0, frame = 16
 2092              		@ frame_needed = 1, uses_anonymous_args = 0
 2093              		@ link register save eliminated.
 2094 09f8 80B4     		push	{r7}
 2095              	.LCFI97:
 2096              		.cfi_def_cfa_offset 4
 2097              		.cfi_offset 7, -4
 2098 09fa 85B0     		sub	sp, sp, #20
 2099              	.LCFI98:
 2100              		.cfi_def_cfa_offset 24
 2101 09fc 00AF     		add	r7, sp, #0
 2102              	.LCFI99:
 2103              		.cfi_def_cfa_register 7
 2104 09fe 7860     		str	r0, [r7, #4]
 2105 0a00 1346     		mov	r3, r2
 2106 0a02 0A46     		mov	r2, r1	@ movhi
 2107 0a04 7A80     		strh	r2, [r7, #2]	@ movhi
 2108 0a06 7B70     		strb	r3, [r7, #1]
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2109              		.loc 1 1589 0
 2110 0a08 4FF00003 		mov	r3, #0
 2111 0a0c FB60     		str	r3, [r7, #12]
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2112              		.loc 1 1596 0
 2113 0a0e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2114 0a10 DBB2     		uxtb	r3, r3
 2115 0a12 FB60     		str	r3, [r7, #12]
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2116              		.loc 1 1597 0
 2117 0a14 FB68     		ldr	r3, [r7, #12]
 2118 0a16 4FF00102 		mov	r2, #1
 2119 0a1a 02FA03F3 		lsl	r3, r2, r3
 2120 0a1e FB60     		str	r3, [r7, #12]
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2121              		.loc 1 1599 0
 2122 0a20 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2123 0a22 002B     		cmp	r3, #0
 2124 0a24 06D0     		beq	.L85
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2125              		.loc 1 1602 0
 2126 0a26 7B68     		ldr	r3, [r7, #4]
 2127 0a28 5A68     		ldr	r2, [r3, #4]
 2128 0a2a FB68     		ldr	r3, [r7, #12]
 2129 0a2c 1A43     		orrs	r2, r2, r3
 2130 0a2e 7B68     		ldr	r3, [r7, #4]
 2131 0a30 5A60     		str	r2, [r3, #4]
 2132 0a32 07E0     		b	.L84
 2133              	.L85:
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 2134              		.loc 1 1607 0
 2135 0a34 7B68     		ldr	r3, [r7, #4]
 2136 0a36 5A68     		ldr	r2, [r3, #4]
 2137 0a38 FB68     		ldr	r3, [r7, #12]
 2138 0a3a 6FEA0303 		mvn	r3, r3
 2139 0a3e 1A40     		ands	r2, r2, r3
 2140 0a40 7B68     		ldr	r3, [r7, #4]
 2141 0a42 5A60     		str	r2, [r3, #4]
 2142              	.L84:
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2143              		.loc 1 1609 0
 2144 0a44 07F11407 		add	r7, r7, #20
 2145 0a48 BD46     		mov	sp, r7
 2146 0a4a 80BC     		pop	{r7}
 2147 0a4c 7047     		bx	lr
 2148              		.cfi_endproc
 2149              	.LFE143:
 2151 0a4e 00BF     		.align	2
 2152              		.global	ADC_GetFlagStatus
 2153              		.thumb
 2154              		.thumb_func
 2156              	ADC_GetFlagStatus:
 2157              	.LFB144:
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2158              		.loc 1 1625 0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 16
 2161              		@ frame_needed = 1, uses_anonymous_args = 0
 2162              		@ link register save eliminated.
 2163 0a50 80B4     		push	{r7}
 2164              	.LCFI100:
 2165              		.cfi_def_cfa_offset 4
 2166              		.cfi_offset 7, -4
 2167 0a52 85B0     		sub	sp, sp, #20
 2168              	.LCFI101:
 2169              		.cfi_def_cfa_offset 24
 2170 0a54 00AF     		add	r7, sp, #0
 2171              	.LCFI102:
 2172              		.cfi_def_cfa_register 7
 2173 0a56 7860     		str	r0, [r7, #4]
 2174 0a58 0B46     		mov	r3, r1
 2175 0a5a FB70     		strb	r3, [r7, #3]
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2176              		.loc 1 1626 0
 2177 0a5c 4FF00003 		mov	r3, #0
 2178 0a60 FB73     		strb	r3, [r7, #15]
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2179              		.loc 1 1632 0
 2180 0a62 7B68     		ldr	r3, [r7, #4]
 2181 0a64 1A68     		ldr	r2, [r3, #0]
 2182 0a66 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2183 0a68 1340     		ands	r3, r3, r2
 2184 0a6a 002B     		cmp	r3, #0
 2185 0a6c 03D0     		beq	.L88
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2186              		.loc 1 1635 0
 2187 0a6e 4FF00103 		mov	r3, #1
 2188 0a72 FB73     		strb	r3, [r7, #15]
 2189 0a74 02E0     		b	.L89
 2190              	.L88:
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2191              		.loc 1 1640 0
 2192 0a76 4FF00003 		mov	r3, #0
 2193 0a7a FB73     		strb	r3, [r7, #15]
 2194              	.L89:
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2195              		.loc 1 1643 0
 2196 0a7c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2197              		.loc 1 1644 0
 2198 0a7e 1846     		mov	r0, r3
 2199 0a80 07F11407 		add	r7, r7, #20
 2200 0a84 BD46     		mov	sp, r7
 2201 0a86 80BC     		pop	{r7}
 2202 0a88 7047     		bx	lr
 2203              		.cfi_endproc
 2204              	.LFE144:
 2206 0a8a 00BF     		.align	2
 2207              		.global	ADC_ClearFlag
 2208              		.thumb
 2209              		.thumb_func
 2211              	ADC_ClearFlag:
 2212              	.LFB145:
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2213              		.loc 1 1660 0
 2214              		.cfi_startproc
 2215              		@ args = 0, pretend = 0, frame = 8
 2216              		@ frame_needed = 1, uses_anonymous_args = 0
 2217              		@ link register save eliminated.
 2218 0a8c 80B4     		push	{r7}
 2219              	.LCFI103:
 2220              		.cfi_def_cfa_offset 4
 2221              		.cfi_offset 7, -4
 2222 0a8e 83B0     		sub	sp, sp, #12
 2223              	.LCFI104:
 2224              		.cfi_def_cfa_offset 16
 2225 0a90 00AF     		add	r7, sp, #0
 2226              	.LCFI105:
 2227              		.cfi_def_cfa_register 7
 2228 0a92 7860     		str	r0, [r7, #4]
 2229 0a94 0B46     		mov	r3, r1
 2230 0a96 FB70     		strb	r3, [r7, #3]
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2231              		.loc 1 1666 0
 2232 0a98 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2233 0a9a 6FEA0302 		mvn	r2, r3
 2234 0a9e 7B68     		ldr	r3, [r7, #4]
 2235 0aa0 1A60     		str	r2, [r3, #0]
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2236              		.loc 1 1667 0
 2237 0aa2 07F10C07 		add	r7, r7, #12
 2238 0aa6 BD46     		mov	sp, r7
 2239 0aa8 80BC     		pop	{r7}
 2240 0aaa 7047     		bx	lr
 2241              		.cfi_endproc
 2242              	.LFE145:
 2244              		.align	2
 2245              		.global	ADC_GetITStatus
 2246              		.thumb
 2247              		.thumb_func
 2249              	ADC_GetITStatus:
 2250              	.LFB146:
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2251              		.loc 1 1681 0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 24
 2254              		@ frame_needed = 1, uses_anonymous_args = 0
 2255              		@ link register save eliminated.
 2256 0aac 80B4     		push	{r7}
 2257              	.LCFI106:
 2258              		.cfi_def_cfa_offset 4
 2259              		.cfi_offset 7, -4
 2260 0aae 87B0     		sub	sp, sp, #28
 2261              	.LCFI107:
 2262              		.cfi_def_cfa_offset 32
 2263 0ab0 00AF     		add	r7, sp, #0
 2264              	.LCFI108:
 2265              		.cfi_def_cfa_register 7
 2266 0ab2 7860     		str	r0, [r7, #4]
 2267 0ab4 0B46     		mov	r3, r1
 2268 0ab6 7B80     		strh	r3, [r7, #2]	@ movhi
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2269              		.loc 1 1682 0
 2270 0ab8 4FF00003 		mov	r3, #0
 2271 0abc FB75     		strb	r3, [r7, #23]
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2272              		.loc 1 1683 0
 2273 0abe 4FF00003 		mov	r3, #0
 2274 0ac2 3B61     		str	r3, [r7, #16]
 2275 0ac4 4FF00003 		mov	r3, #0
 2276 0ac8 FB60     		str	r3, [r7, #12]
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2277              		.loc 1 1690 0
 2278 0aca 7B88     		ldrh	r3, [r7, #2]
 2279 0acc 4FEA1323 		lsr	r3, r3, #8
 2280 0ad0 9BB2     		uxth	r3, r3
 2281 0ad2 3B61     		str	r3, [r7, #16]
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2282              		.loc 1 1693 0
 2283 0ad4 7B68     		ldr	r3, [r7, #4]
 2284 0ad6 5A68     		ldr	r2, [r3, #4]
 2285 0ad8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2286 0ada DBB2     		uxtb	r3, r3
 2287 0adc 4FF00101 		mov	r1, #1
 2288 0ae0 01FA03F3 		lsl	r3, r1, r3
 2289 0ae4 1340     		ands	r3, r3, r2
 2290 0ae6 FB60     		str	r3, [r7, #12]
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2291              		.loc 1 1696 0
 2292 0ae8 7B68     		ldr	r3, [r7, #4]
 2293 0aea 1A68     		ldr	r2, [r3, #0]
 2294 0aec 3B69     		ldr	r3, [r7, #16]
 2295 0aee 1340     		ands	r3, r3, r2
 2296 0af0 002B     		cmp	r3, #0
 2297 0af2 06D0     		beq	.L93
 2298              		.loc 1 1696 0 is_stmt 0 discriminator 1
 2299 0af4 FB68     		ldr	r3, [r7, #12]
 2300 0af6 002B     		cmp	r3, #0
 2301 0af8 03D0     		beq	.L93
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2302              		.loc 1 1699 0 is_stmt 1
 2303 0afa 4FF00103 		mov	r3, #1
 2304 0afe FB75     		strb	r3, [r7, #23]
 2305 0b00 02E0     		b	.L94
 2306              	.L93:
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2307              		.loc 1 1704 0
 2308 0b02 4FF00003 		mov	r3, #0
 2309 0b06 FB75     		strb	r3, [r7, #23]
 2310              	.L94:
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2311              		.loc 1 1707 0
 2312 0b08 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2313              		.loc 1 1708 0
 2314 0b0a 1846     		mov	r0, r3
 2315 0b0c 07F11C07 		add	r7, r7, #28
 2316 0b10 BD46     		mov	sp, r7
 2317 0b12 80BC     		pop	{r7}
 2318 0b14 7047     		bx	lr
 2319              		.cfi_endproc
 2320              	.LFE146:
 2322 0b16 00BF     		.align	2
 2323              		.global	ADC_ClearITPendingBit
 2324              		.thumb
 2325              		.thumb_func
 2327              	ADC_ClearITPendingBit:
 2328              	.LFB147:
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2329              		.loc 1 1722 0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 16
 2332              		@ frame_needed = 1, uses_anonymous_args = 0
 2333              		@ link register save eliminated.
 2334 0b18 80B4     		push	{r7}
 2335              	.LCFI109:
 2336              		.cfi_def_cfa_offset 4
 2337              		.cfi_offset 7, -4
 2338 0b1a 85B0     		sub	sp, sp, #20
 2339              	.LCFI110:
 2340              		.cfi_def_cfa_offset 24
 2341 0b1c 00AF     		add	r7, sp, #0
 2342              	.LCFI111:
 2343              		.cfi_def_cfa_register 7
 2344 0b1e 7860     		str	r0, [r7, #4]
 2345 0b20 0B46     		mov	r3, r1
 2346 0b22 7B80     		strh	r3, [r7, #2]	@ movhi
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2347              		.loc 1 1723 0
 2348 0b24 4FF00003 		mov	r3, #0
 2349 0b28 FB73     		strb	r3, [r7, #15]
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2350              		.loc 1 1728 0
 2351 0b2a 7B88     		ldrh	r3, [r7, #2]
 2352 0b2c 4FEA1323 		lsr	r3, r3, #8
 2353 0b30 9BB2     		uxth	r3, r3
 2354 0b32 FB73     		strb	r3, [r7, #15]
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2355              		.loc 1 1730 0
 2356 0b34 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2357 0b36 6FEA0302 		mvn	r2, r3
 2358 0b3a 7B68     		ldr	r3, [r7, #4]
 2359 0b3c 1A60     		str	r2, [r3, #0]
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 2360              		.loc 1 1731 0
 2361 0b3e 07F11407 		add	r7, r7, #20
 2362 0b42 BD46     		mov	sp, r7
 2363 0b44 80BC     		pop	{r7}
 2364 0b46 7047     		bx	lr
 2365              		.cfi_endproc
 2366              	.LFE147:
 2368              	.Letext0:
 2369              		.file 2 "/opt/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 2370              		.file 3 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Device/ST/STM
 2371              		.file 4 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/STM32F4xx_StdPeriph
 2372              		.file 5 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Include/core_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
     /tmp/cccTzs4j.s:18     .text:00000000 $t
     /tmp/cccTzs4j.s:23     .text:00000000 ADC_DeInit
     /tmp/cccTzs4j.s:56     .text:00000020 ADC_Init
     /tmp/cccTzs4j.s:175    .text:000000d0 $d
     /tmp/cccTzs4j.s:179    .text:000000d4 $t
     /tmp/cccTzs4j.s:184    .text:000000d4 ADC_StructInit
     /tmp/cccTzs4j.s:243    .text:00000120 ADC_CommonInit
     /tmp/cccTzs4j.s:306    .text:00000168 $d
     /tmp/cccTzs4j.s:311    .text:00000170 $t
     /tmp/cccTzs4j.s:316    .text:00000170 ADC_CommonStructInit
     /tmp/cccTzs4j.s:363    .text:000001a4 ADC_Cmd
     /tmp/cccTzs4j.s:415    .text:000001dc ADC_AnalogWatchdogCmd
     /tmp/cccTzs4j.s:468    .text:00000218 ADC_AnalogWatchdogThresholdsConfig
     /tmp/cccTzs4j.s:511    .text:00000240 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/cccTzs4j.s:564    .text:00000278 ADC_TempSensorVrefintCmd
     /tmp/cccTzs4j.s:610    .text:000002ac $d
     /tmp/cccTzs4j.s:614    .text:000002b0 $t
     /tmp/cccTzs4j.s:619    .text:000002b0 ADC_VBATCmd
     /tmp/cccTzs4j.s:665    .text:000002e4 $d
     /tmp/cccTzs4j.s:669    .text:000002e8 $t
     /tmp/cccTzs4j.s:674    .text:000002e8 ADC_RegularChannelConfig
     /tmp/cccTzs4j.s:916    .text:000004a4 ADC_SoftwareStartConv
     /tmp/cccTzs4j.s:953    .text:000004c4 ADC_GetSoftwareStartConvStatus
     /tmp/cccTzs4j.s:1005   .text:000004fc ADC_EOCOnEachRegularChannelCmd
     /tmp/cccTzs4j.s:1057   .text:00000534 ADC_ContinuousModeCmd
     /tmp/cccTzs4j.s:1109   .text:0000056c ADC_DiscModeChannelCountConfig
     /tmp/cccTzs4j.s:1170   .text:000005b8 ADC_DiscModeCmd
     /tmp/cccTzs4j.s:1222   .text:000005f0 ADC_GetConversionValue
     /tmp/cccTzs4j.s:1258   .text:0000060c ADC_GetMultiModeConversionValue
     /tmp/cccTzs4j.s:1283   .text:0000061c $d
     /tmp/cccTzs4j.s:1287   .text:00000620 $t
     /tmp/cccTzs4j.s:1292   .text:00000620 ADC_DMACmd
     /tmp/cccTzs4j.s:1344   .text:00000658 ADC_DMARequestAfterLastTransferCmd
     /tmp/cccTzs4j.s:1396   .text:00000690 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/cccTzs4j.s:1442   .text:000006c4 $d
     /tmp/cccTzs4j.s:1446   .text:000006c8 $t
     /tmp/cccTzs4j.s:1451   .text:000006c8 ADC_InjectedChannelConfig
     /tmp/cccTzs4j.s:1629   .text:0000080c ADC_InjectedSequencerLengthConfig
     /tmp/cccTzs4j.s:1690   .text:00000858 ADC_SetInjectedOffset
     /tmp/cccTzs4j.s:1740   .text:0000088c ADC_ExternalTrigInjectedConvConfig
     /tmp/cccTzs4j.s:1792   .text:000008c4 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/cccTzs4j.s:1844   .text:000008fc ADC_SoftwareStartInjectedConv
     /tmp/cccTzs4j.s:1881   .text:0000091c ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/cccTzs4j.s:1933   .text:00000954 ADC_AutoInjectedConvCmd
     /tmp/cccTzs4j.s:1985   .text:0000098c ADC_InjectedDiscModeCmd
     /tmp/cccTzs4j.s:2037   .text:000009c4 ADC_GetInjectedConversionValue
     /tmp/cccTzs4j.s:2087   .text:000009f8 ADC_ITConfig
     /tmp/cccTzs4j.s:2156   .text:00000a50 ADC_GetFlagStatus
     /tmp/cccTzs4j.s:2211   .text:00000a8c ADC_ClearFlag
     /tmp/cccTzs4j.s:2249   .text:00000aac ADC_GetITStatus
     /tmp/cccTzs4j.s:2327   .text:00000b18 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ee386580922180e5cad1057f989de60d
                           .group:00000000 wm4.stm32f4xx.h.54.6e1f0ee5c76cc1e53c8ea6d18297b5fd
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_can.h.50.3dfbfc0c3e8d7c5d4402537f6b136664
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rng.h.31.1ec493d56b7a8e5a71238519cae6dea7
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stm32f4xx_adc.h.108.1710484bf41297b93f825b3b15cbdff8

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
