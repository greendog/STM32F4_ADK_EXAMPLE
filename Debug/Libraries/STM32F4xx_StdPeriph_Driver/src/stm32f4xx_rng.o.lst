   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rng.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	RNG_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	RNG_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     * @brief This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Initialization and Configuration 
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Get 32 bit Random number      
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Interrupts and flags management       
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @verbatim
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                               
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================      
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                                   How to use this driver
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================          
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          1. Enable The RNG controller clock using 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          2. Activate the RNG peripheral using RNG_Cmd() function.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          3. Wait until the 32 bit Random number Generator contains a valid 
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            random data (using polling/interrupt mode). For more details, 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            refer to "Interrupts and flags management functions" module 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            description.
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          5. To get another 32 bit Random number, go to step 3.       
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @endverbatim
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may not use this file except in compliance with the License.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may obtain a copy of the License at:
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Unless required by applicable law or agreed to in writing, software 
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * See the License for the specific language governing permissions and
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * limitations under the License.
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Initialization and Configuration functions
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to 
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Initialize the RNG peripheral
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Enable or disable the RNG peripheral
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  26              		.loc 1 101 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  38              		.loc 1 103 0
  39 0004 4FF04000 		mov	r0, #64
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  42              		.loc 1 106 0
  43 0010 4FF04000 		mov	r0, #64
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  46              		.loc 1 107 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE110:
  51 001e 00BF     		.align	2
  52              		.global	RNG_Cmd
  53              		.thumb
  54              		.thumb_func
  56              	RNG_Cmd:
  57              	.LFB111:
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  58              		.loc 1 116 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 8
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0020 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0022 83B0     		sub	sp, sp, #12
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 16
  70 0024 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0026 0346     		mov	r3, r0
  74 0028 FB71     		strb	r3, [r7, #7]
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  75              		.loc 1 120 0
  76 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  77 002c 002B     		cmp	r3, #0
  78 002e 06D0     		beq	.L3
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  79              		.loc 1 123 0
  80 0030 084B     		ldr	r3, .L5
  81 0032 084A     		ldr	r2, .L5
  82 0034 1268     		ldr	r2, [r2, #0]
  83 0036 42F00402 		orr	r2, r2, #4
  84 003a 1A60     		str	r2, [r3, #0]
  85 003c 05E0     		b	.L2
  86              	.L3:
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  87              		.loc 1 128 0
  88 003e 054B     		ldr	r3, .L5
  89 0040 044A     		ldr	r2, .L5
  90 0042 1268     		ldr	r2, [r2, #0]
  91 0044 22F00402 		bic	r2, r2, #4
  92 0048 1A60     		str	r2, [r3, #0]
  93              	.L2:
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  94              		.loc 1 130 0
  95 004a 07F10C07 		add	r7, r7, #12
  96 004e BD46     		mov	sp, r7
  97 0050 80BC     		pop	{r7}
  98 0052 7047     		bx	lr
  99              	.L6:
 100              		.align	2
 101              	.L5:
 102 0054 00080650 		.word	1342572544
 103              		.cfi_endproc
 104              	.LFE111:
 106              		.align	2
 107              		.global	RNG_GetRandomNumber
 108              		.thumb
 109              		.thumb_func
 111              	RNG_GetRandomNumber:
 112              	.LFB112:
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Get 32 bit Random number function
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides a function allowing to get the 32 bit Random number  
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note  Before to call this function you have to wait till DRDY flag is set,
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 113              		.loc 1 178 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0058 80B4     		push	{r7}
 119              	.LCFI5:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 7, -4
 122 005a 00AF     		add	r7, sp, #0
 123              	.LCFI6:
 124              		.cfi_def_cfa_register 7
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 125              		.loc 1 180 0
 126 005c 024B     		ldr	r3, .L9
 127 005e 9B68     		ldr	r3, [r3, #8]
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 128              		.loc 1 181 0
 129 0060 1846     		mov	r0, r3
 130 0062 BD46     		mov	sp, r7
 131 0064 80BC     		pop	{r7}
 132 0066 7047     		bx	lr
 133              	.L10:
 134              		.align	2
 135              	.L9:
 136 0068 00080650 		.word	1342572544
 137              		.cfi_endproc
 138              	.LFE112:
 140              		.align	2
 141              		.global	RNG_ITConfig
 142              		.thumb
 143              		.thumb_func
 145              	RNG_ITConfig:
 146              	.LFB113:
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                    Interrupts and flags management functions
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to configure the RNG Interrupts and 
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   to get the status and clear flags and Interrupts pending bits.
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The RNG provides 3 Interrupts sources and 3 Flags:
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Flags :
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ---------- 
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          random data. it is cleared by reading the valid data 
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          (using RNG_GetRandomNumber() function).
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      2. RNG_FLAG_CECS : In the case of a seed error detection. 
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      3. RNG_FLAG_SECS : In the case of a clock error detection.
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Interrupts :
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    if enabled, an RNG interrupt is pending :
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    1.  In the case of the RNG_DR register contains valid random data. 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed. 
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or 
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    2. In the case of a seed error : One of the following faulty sequences has 
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       been detected:
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 64 consecutive bits at the same value (0 or 1)
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       was not correctly detected (fPLL48CLK< fHCLK/16).
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       @note In this case, User have to check that the clock controller is 
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             correctly configured to provide the RNG clock. 
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Managing the RNG controller events :
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------------------------------ 
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The user should identify which mode will be used in his application to manage 
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   the RNG controller events: Polling mode or Interrupt mode.
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   1.  In the Polling Mode it is advised to use the following functions:
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetFlagStatus() : to check if flags events occur. 
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearFlag()     : to clear the flags events.
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         by reading the Random number data.      
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ITConfig()       : to enable or disable the interrupt source.
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetITStatus()    : to check if Interrupt occurs.
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                 (corresponding Flag). 
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 147              		.loc 1 275 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 8
 150              		@ frame_needed = 1, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152 006c 80B4     		push	{r7}
 153              	.LCFI7:
 154              		.cfi_def_cfa_offset 4
 155              		.cfi_offset 7, -4
 156 006e 83B0     		sub	sp, sp, #12
 157              	.LCFI8:
 158              		.cfi_def_cfa_offset 16
 159 0070 00AF     		add	r7, sp, #0
 160              	.LCFI9:
 161              		.cfi_def_cfa_register 7
 162 0072 0346     		mov	r3, r0
 163 0074 FB71     		strb	r3, [r7, #7]
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 164              		.loc 1 279 0
 165 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 166 0078 002B     		cmp	r3, #0
 167 007a 06D0     		beq	.L12
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 168              		.loc 1 282 0
 169 007c 084B     		ldr	r3, .L14
 170 007e 084A     		ldr	r2, .L14
 171 0080 1268     		ldr	r2, [r2, #0]
 172 0082 42F00802 		orr	r2, r2, #8
 173 0086 1A60     		str	r2, [r3, #0]
 174 0088 05E0     		b	.L11
 175              	.L12:
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 176              		.loc 1 287 0
 177 008a 054B     		ldr	r3, .L14
 178 008c 044A     		ldr	r2, .L14
 179 008e 1268     		ldr	r2, [r2, #0]
 180 0090 22F00802 		bic	r2, r2, #8
 181 0094 1A60     		str	r2, [r3, #0]
 182              	.L11:
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 183              		.loc 1 289 0
 184 0096 07F10C07 		add	r7, r7, #12
 185 009a BD46     		mov	sp, r7
 186 009c 80BC     		pop	{r7}
 187 009e 7047     		bx	lr
 188              	.L15:
 189              		.align	2
 190              	.L14:
 191 00a0 00080650 		.word	1342572544
 192              		.cfi_endproc
 193              	.LFE113:
 195              		.align	2
 196              		.global	RNG_GetFlagStatus
 197              		.thumb
 198              		.thumb_func
 200              	RNG_GetFlagStatus:
 201              	.LFB114:
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 202              		.loc 1 301 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 16
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207 00a4 80B4     		push	{r7}
 208              	.LCFI10:
 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 7, -4
 211 00a6 85B0     		sub	sp, sp, #20
 212              	.LCFI11:
 213              		.cfi_def_cfa_offset 24
 214 00a8 00AF     		add	r7, sp, #0
 215              	.LCFI12:
 216              		.cfi_def_cfa_register 7
 217 00aa 0346     		mov	r3, r0
 218 00ac FB71     		strb	r3, [r7, #7]
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 219              		.loc 1 302 0
 220 00ae 4FF00003 		mov	r3, #0
 221 00b2 FB73     		strb	r3, [r7, #15]
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 222              		.loc 1 307 0
 223 00b4 094B     		ldr	r3, .L20
 224 00b6 5A68     		ldr	r2, [r3, #4]
 225 00b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 226 00ba 1340     		ands	r3, r3, r2
 227 00bc 002B     		cmp	r3, #0
 228 00be 03D0     		beq	.L17
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 229              		.loc 1 310 0
 230 00c0 4FF00103 		mov	r3, #1
 231 00c4 FB73     		strb	r3, [r7, #15]
 232 00c6 02E0     		b	.L18
 233              	.L17:
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 234              		.loc 1 315 0
 235 00c8 4FF00003 		mov	r3, #0
 236 00cc FB73     		strb	r3, [r7, #15]
 237              	.L18:
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 238              		.loc 1 318 0
 239 00ce FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 240              		.loc 1 319 0
 241 00d0 1846     		mov	r0, r3
 242 00d2 07F11407 		add	r7, r7, #20
 243 00d6 BD46     		mov	sp, r7
 244 00d8 80BC     		pop	{r7}
 245 00da 7047     		bx	lr
 246              	.L21:
 247              		.align	2
 248              	.L20:
 249 00dc 00080650 		.word	1342572544
 250              		.cfi_endproc
 251              	.LFE114:
 253              		.align	2
 254              		.global	RNG_ClearFlag
 255              		.thumb
 256              		.thumb_func
 258              	RNG_ClearFlag:
 259              	.LFB115:
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 260              		.loc 1 334 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 8
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265 00e0 80B4     		push	{r7}
 266              	.LCFI13:
 267              		.cfi_def_cfa_offset 4
 268              		.cfi_offset 7, -4
 269 00e2 83B0     		sub	sp, sp, #12
 270              	.LCFI14:
 271              		.cfi_def_cfa_offset 16
 272 00e4 00AF     		add	r7, sp, #0
 273              	.LCFI15:
 274              		.cfi_def_cfa_register 7
 275 00e6 0346     		mov	r3, r0
 276 00e8 FB71     		strb	r3, [r7, #7]
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 277              		.loc 1 338 0
 278 00ea 064B     		ldr	r3, .L23
 279 00ec FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 280 00ee 4FEA0212 		lsl	r2, r2, #4
 281 00f2 6FEA0202 		mvn	r2, r2
 282 00f6 5A60     		str	r2, [r3, #4]
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 283              		.loc 1 339 0
 284 00f8 07F10C07 		add	r7, r7, #12
 285 00fc BD46     		mov	sp, r7
 286 00fe 80BC     		pop	{r7}
 287 0100 7047     		bx	lr
 288              	.L24:
 289 0102 00BF     		.align	2
 290              	.L23:
 291 0104 00080650 		.word	1342572544
 292              		.cfi_endproc
 293              	.LFE115:
 295              		.align	2
 296              		.global	RNG_GetITStatus
 297              		.thumb
 298              		.thumb_func
 300              	RNG_GetITStatus:
 301              	.LFB116:
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 302              		.loc 1 350 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 16
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307 0108 80B4     		push	{r7}
 308              	.LCFI16:
 309              		.cfi_def_cfa_offset 4
 310              		.cfi_offset 7, -4
 311 010a 85B0     		sub	sp, sp, #20
 312              	.LCFI17:
 313              		.cfi_def_cfa_offset 24
 314 010c 00AF     		add	r7, sp, #0
 315              	.LCFI18:
 316              		.cfi_def_cfa_register 7
 317 010e 0346     		mov	r3, r0
 318 0110 FB71     		strb	r3, [r7, #7]
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 319              		.loc 1 351 0
 320 0112 4FF00003 		mov	r3, #0
 321 0116 FB73     		strb	r3, [r7, #15]
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 322              		.loc 1 356 0
 323 0118 094B     		ldr	r3, .L29
 324 011a 5A68     		ldr	r2, [r3, #4]
 325 011c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326 011e 1340     		ands	r3, r3, r2
 327 0120 002B     		cmp	r3, #0
 328 0122 03D0     		beq	.L26
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 329              		.loc 1 359 0
 330 0124 4FF00103 		mov	r3, #1
 331 0128 FB73     		strb	r3, [r7, #15]
 332 012a 02E0     		b	.L27
 333              	.L26:
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 334              		.loc 1 364 0
 335 012c 4FF00003 		mov	r3, #0
 336 0130 FB73     		strb	r3, [r7, #15]
 337              	.L27:
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 338              		.loc 1 367 0
 339 0132 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 340              		.loc 1 368 0
 341 0134 1846     		mov	r0, r3
 342 0136 07F11407 		add	r7, r7, #20
 343 013a BD46     		mov	sp, r7
 344 013c 80BC     		pop	{r7}
 345 013e 7047     		bx	lr
 346              	.L30:
 347              		.align	2
 348              	.L29:
 349 0140 00080650 		.word	1342572544
 350              		.cfi_endproc
 351              	.LFE116:
 353              		.align	2
 354              		.global	RNG_ClearITPendingBit
 355              		.thumb
 356              		.thumb_func
 358              	RNG_ClearITPendingBit:
 359              	.LFB117:
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 360              		.loc 1 380 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 0144 80B4     		push	{r7}
 366              	.LCFI19:
 367              		.cfi_def_cfa_offset 4
 368              		.cfi_offset 7, -4
 369 0146 83B0     		sub	sp, sp, #12
 370              	.LCFI20:
 371              		.cfi_def_cfa_offset 16
 372 0148 00AF     		add	r7, sp, #0
 373              	.LCFI21:
 374              		.cfi_def_cfa_register 7
 375 014a 0346     		mov	r3, r0
 376 014c FB71     		strb	r3, [r7, #7]
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 377              		.loc 1 385 0
 378 014e 054B     		ldr	r3, .L32
 379 0150 FA79     		ldrb	r2, [r7, #7]
 380 0152 6FEA0202 		mvn	r2, r2
 381 0156 D2B2     		uxtb	r2, r2
 382 0158 5A60     		str	r2, [r3, #4]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 383              		.loc 1 386 0
 384 015a 07F10C07 		add	r7, r7, #12
 385 015e BD46     		mov	sp, r7
 386 0160 80BC     		pop	{r7}
 387 0162 7047     		bx	lr
 388              	.L33:
 389              		.align	2
 390              	.L32:
 391 0164 00080650 		.word	1342572544
 392              		.cfi_endproc
 393              	.LFE117:
 395              	.Letext0:
 396              		.file 2 "/opt/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 397              		.file 3 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Device/ST/STM
 398              		.file 4 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Include/core_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
     /tmp/cckJFLuz.s:18     .text:00000000 $t
     /tmp/cckJFLuz.s:23     .text:00000000 RNG_DeInit
     /tmp/cckJFLuz.s:56     .text:00000020 RNG_Cmd
     /tmp/cckJFLuz.s:102    .text:00000054 $d
     /tmp/cckJFLuz.s:106    .text:00000058 $t
     /tmp/cckJFLuz.s:111    .text:00000058 RNG_GetRandomNumber
     /tmp/cckJFLuz.s:136    .text:00000068 $d
     /tmp/cckJFLuz.s:140    .text:0000006c $t
     /tmp/cckJFLuz.s:145    .text:0000006c RNG_ITConfig
     /tmp/cckJFLuz.s:191    .text:000000a0 $d
     /tmp/cckJFLuz.s:195    .text:000000a4 $t
     /tmp/cckJFLuz.s:200    .text:000000a4 RNG_GetFlagStatus
     /tmp/cckJFLuz.s:249    .text:000000dc $d
     /tmp/cckJFLuz.s:253    .text:000000e0 $t
     /tmp/cckJFLuz.s:258    .text:000000e0 RNG_ClearFlag
     /tmp/cckJFLuz.s:291    .text:00000104 $d
     /tmp/cckJFLuz.s:295    .text:00000108 $t
     /tmp/cckJFLuz.s:300    .text:00000108 RNG_GetITStatus
     /tmp/cckJFLuz.s:349    .text:00000140 $d
     /tmp/cckJFLuz.s:353    .text:00000144 $t
     /tmp/cckJFLuz.s:358    .text:00000144 RNG_ClearITPendingBit
     /tmp/cckJFLuz.s:391    .text:00000164 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ee386580922180e5cad1057f989de60d
                           .group:00000000 wm4.stm32f4xx.h.54.6e1f0ee5c76cc1e53c8ea6d18297b5fd
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_adc.h.108.1710484bf41297b93f825b3b15cbdff8
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stm32f4xx_rng.h.58.9a2bb297dfeaa88ee36bd7ff98089ef7

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
