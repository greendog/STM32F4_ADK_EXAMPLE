   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_spi.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	SPI_I2S_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	SPI_I2S_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.2
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    05-March-2012
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * You may not use this file except in compliance with the License.
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * You may obtain a copy of the License at:
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * See the License for the specific language governing permissions and
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * limitations under the License.
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
  26              		.loc 1 225 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  42              		.loc 1 229 0
  43 0008 7A68     		ldr	r2, [r7, #4]
  44 000a 1A4B     		ldr	r3, .L5
  45 000c 9A42     		cmp	r2, r3
  46 000e 0CD1     		bne	.L2
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  47              		.loc 1 232 0
  48 0010 4FF48050 		mov	r0, #4096
  49 0014 4FF00101 		mov	r1, #1
  50 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  51              		.loc 1 234 0
  52 001c 4FF48050 		mov	r0, #4096
  53 0020 4FF00001 		mov	r1, #0
  54 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  55 0028 20E0     		b	.L1
  56              	.L2:
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  57              		.loc 1 236 0
  58 002a 7A68     		ldr	r2, [r7, #4]
  59 002c 124B     		ldr	r3, .L5+4
  60 002e 9A42     		cmp	r2, r3
  61 0030 0CD1     		bne	.L4
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  62              		.loc 1 239 0
  63 0032 4FF48040 		mov	r0, #16384
  64 0036 4FF00101 		mov	r1, #1
  65 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  66              		.loc 1 241 0
  67 003e 4FF48040 		mov	r0, #16384
  68 0042 4FF00001 		mov	r1, #0
  69 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  70 004a 0FE0     		b	.L1
  71              	.L4:
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
  72              		.loc 1 245 0
  73 004c 7A68     		ldr	r2, [r7, #4]
  74 004e 0B4B     		ldr	r3, .L5+8
  75 0050 9A42     		cmp	r2, r3
  76 0052 0BD1     		bne	.L1
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  77              		.loc 1 248 0
  78 0054 4FF40040 		mov	r0, #32768
  79 0058 4FF00101 		mov	r1, #1
  80 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  81              		.loc 1 250 0
  82 0060 4FF40040 		mov	r0, #32768
  83 0064 4FF00001 		mov	r1, #0
  84 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  85              	.L1:
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
  86              		.loc 1 253 0
  87 006c 07F10807 		add	r7, r7, #8
  88 0070 BD46     		mov	sp, r7
  89 0072 80BD     		pop	{r7, pc}
  90              	.L6:
  91              		.align	2
  92              	.L5:
  93 0074 00300140 		.word	1073819648
  94 0078 00380040 		.word	1073756160
  95 007c 003C0040 		.word	1073757184
  96              		.cfi_endproc
  97              	.LFE110:
  99              		.align	2
 100              		.global	SPI_Init
 101              		.thumb
 102              		.thumb_func
 104              	SPI_Init:
 105              	.LFB111:
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 106              		.loc 1 264 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 16
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111 0080 80B4     		push	{r7}
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 4
 114              		.cfi_offset 7, -4
 115 0082 85B0     		sub	sp, sp, #20
 116              	.LCFI4:
 117              		.cfi_def_cfa_offset 24
 118 0084 00AF     		add	r7, sp, #0
 119              	.LCFI5:
 120              		.cfi_def_cfa_register 7
 121 0086 7860     		str	r0, [r7, #4]
 122 0088 3960     		str	r1, [r7, #0]
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 123              		.loc 1 265 0
 124 008a 4FF00003 		mov	r3, #0
 125 008e FB81     		strh	r3, [r7, #14]	@ movhi
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 126              		.loc 1 283 0
 127 0090 7B68     		ldr	r3, [r7, #4]
 128 0092 1B88     		ldrh	r3, [r3, #0]	@ movhi
 129 0094 FB81     		strh	r3, [r7, #14]	@ movhi
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 130              		.loc 1 285 0
 131 0096 FB89     		ldrh	r3, [r7, #14]	@ movhi
 132 0098 03F44153 		and	r3, r3, #12352
 133 009c FB81     		strh	r3, [r7, #14]	@ movhi
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 134              		.loc 1 294 0
 135 009e 3B68     		ldr	r3, [r7, #0]
 136 00a0 1A88     		ldrh	r2, [r3, #0]
 137 00a2 3B68     		ldr	r3, [r7, #0]
 138 00a4 5B88     		ldrh	r3, [r3, #2]
 139 00a6 1343     		orrs	r3, r3, r2
 140 00a8 9AB2     		uxth	r2, r3
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 141              		.loc 1 295 0
 142 00aa 3B68     		ldr	r3, [r7, #0]
 143 00ac 9B88     		ldrh	r3, [r3, #4]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 144              		.loc 1 294 0
 145 00ae 1343     		orrs	r3, r3, r2
 146 00b0 9AB2     		uxth	r2, r3
 147              		.loc 1 295 0
 148 00b2 3B68     		ldr	r3, [r7, #0]
 149 00b4 DB88     		ldrh	r3, [r3, #6]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 150              		.loc 1 294 0
 151 00b6 1343     		orrs	r3, r3, r2
 152 00b8 9AB2     		uxth	r2, r3
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 153              		.loc 1 296 0
 154 00ba 3B68     		ldr	r3, [r7, #0]
 155 00bc 1B89     		ldrh	r3, [r3, #8]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 156              		.loc 1 294 0
 157 00be 1343     		orrs	r3, r3, r2
 158 00c0 9AB2     		uxth	r2, r3
 159              		.loc 1 296 0
 160 00c2 3B68     		ldr	r3, [r7, #0]
 161 00c4 5B89     		ldrh	r3, [r3, #10]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 162              		.loc 1 294 0
 163 00c6 1343     		orrs	r3, r3, r2
 164 00c8 9AB2     		uxth	r2, r3
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 165              		.loc 1 297 0
 166 00ca 3B68     		ldr	r3, [r7, #0]
 167 00cc 9B89     		ldrh	r3, [r3, #12]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 168              		.loc 1 294 0
 169 00ce 1343     		orrs	r3, r3, r2
 170 00d0 9AB2     		uxth	r2, r3
 171              		.loc 1 297 0
 172 00d2 3B68     		ldr	r3, [r7, #0]
 173 00d4 DB89     		ldrh	r3, [r3, #14]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 174              		.loc 1 294 0
 175 00d6 1343     		orrs	r3, r3, r2
 176 00d8 9AB2     		uxth	r2, r3
 177 00da FB89     		ldrh	r3, [r7, #14]	@ movhi
 178 00dc 1343     		orrs	r3, r3, r2
 179 00de FB81     		strh	r3, [r7, #14]	@ movhi
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 180              		.loc 1 299 0
 181 00e0 7B68     		ldr	r3, [r7, #4]
 182 00e2 FA89     		ldrh	r2, [r7, #14]	@ movhi
 183 00e4 1A80     		strh	r2, [r3, #0]	@ movhi
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 184              		.loc 1 302 0
 185 00e6 7B68     		ldr	r3, [r7, #4]
 186 00e8 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 187 00ea 9BB2     		uxth	r3, r3
 188 00ec 23F40063 		bic	r3, r3, #2048
 189 00f0 9AB2     		uxth	r2, r3
 190 00f2 7B68     		ldr	r3, [r7, #4]
 191 00f4 9A83     		strh	r2, [r3, #28]	@ movhi
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 192              		.loc 1 305 0
 193 00f6 3B68     		ldr	r3, [r7, #0]
 194 00f8 1A8A     		ldrh	r2, [r3, #16]
 195 00fa 7B68     		ldr	r3, [r7, #4]
 196 00fc 1A82     		strh	r2, [r3, #16]	@ movhi
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 197              		.loc 1 306 0
 198 00fe 07F11407 		add	r7, r7, #20
 199 0102 BD46     		mov	sp, r7
 200 0104 80BC     		pop	{r7}
 201 0106 7047     		bx	lr
 202              		.cfi_endproc
 203              	.LFE111:
 205              		.align	2
 206              		.global	I2S_Init
 207              		.thumb
 208              		.thumb_func
 210              	I2S_Init:
 211              	.LFB112:
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 212              		.loc 1 328 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 40
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217 0108 80B4     		push	{r7}
 218              	.LCFI6:
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 7, -4
 221 010a 8BB0     		sub	sp, sp, #44
 222              	.LCFI7:
 223              		.cfi_def_cfa_offset 48
 224 010c 00AF     		add	r7, sp, #0
 225              	.LCFI8:
 226              		.cfi_def_cfa_register 7
 227 010e 7860     		str	r0, [r7, #4]
 228 0110 3960     		str	r1, [r7, #0]
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 229              		.loc 1 329 0
 230 0112 4FF00003 		mov	r3, #0
 231 0116 7B83     		strh	r3, [r7, #26]	@ movhi
 232 0118 4FF00203 		mov	r3, #2
 233 011c FB84     		strh	r3, [r7, #38]	@ movhi
 234 011e 4FF00003 		mov	r3, #0
 235 0122 BB84     		strh	r3, [r7, #36]	@ movhi
 236 0124 4FF00103 		mov	r3, #1
 237 0128 7B84     		strh	r3, [r7, #34]	@ movhi
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 238              		.loc 1 330 0
 239 012a 4FF00003 		mov	r3, #0
 240 012e FB61     		str	r3, [r7, #28]
 241 0130 4FF00003 		mov	r3, #0
 242 0134 7B61     		str	r3, [r7, #20]
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 243              		.loc 1 332 0
 244 0136 4FF00003 		mov	r3, #0
 245 013a 3B61     		str	r3, [r7, #16]
 246 013c 4FF00003 		mov	r3, #0
 247 0140 FB60     		str	r3, [r7, #12]
 248 0142 4FF00003 		mov	r3, #0
 249 0146 BB60     		str	r3, [r7, #8]
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 250              		.loc 1 346 0
 251 0148 7B68     		ldr	r3, [r7, #4]
 252 014a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 253 014c 9BB2     		uxth	r3, r3
 254 014e 23F47B63 		bic	r3, r3, #4016
 255 0152 23F00F03 		bic	r3, r3, #15
 256 0156 9AB2     		uxth	r2, r3
 257 0158 7B68     		ldr	r3, [r7, #4]
 258 015a 9A83     		strh	r2, [r3, #28]	@ movhi
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 259              		.loc 1 347 0
 260 015c 7B68     		ldr	r3, [r7, #4]
 261 015e 4FF00202 		mov	r2, #2
 262 0162 1A84     		strh	r2, [r3, #32]	@ movhi
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 263              		.loc 1 350 0
 264 0164 7B68     		ldr	r3, [r7, #4]
 265 0166 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 266 0168 7B83     		strh	r3, [r7, #26]	@ movhi
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 267              		.loc 1 353 0
 268 016a 3B68     		ldr	r3, [r7, #0]
 269 016c 9B68     		ldr	r3, [r3, #8]
 270 016e 022B     		cmp	r3, #2
 271 0170 06D1     		bne	.L9
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 272              		.loc 1 355 0
 273 0172 4FF00003 		mov	r3, #0
 274 0176 BB84     		strh	r3, [r7, #36]	@ movhi
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 275              		.loc 1 356 0
 276 0178 4FF00203 		mov	r3, #2
 277 017c FB84     		strh	r3, [r7, #38]	@ movhi
 278 017e 82E0     		b	.L10
 279              	.L9:
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 280              		.loc 1 362 0
 281 0180 3B68     		ldr	r3, [r7, #0]
 282 0182 9B88     		ldrh	r3, [r3, #4]
 283 0184 002B     		cmp	r3, #0
 284 0186 03D1     		bne	.L11
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 285              		.loc 1 365 0
 286 0188 4FF00103 		mov	r3, #1
 287 018c 7B84     		strh	r3, [r7, #34]	@ movhi
 288 018e 02E0     		b	.L12
 289              	.L11:
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 290              		.loc 1 370 0
 291 0190 4FF00203 		mov	r3, #2
 292 0194 7B84     		strh	r3, [r7, #34]	@ movhi
 293              	.L12:
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 294              		.loc 1 389 0
 295 0196 554B     		ldr	r3, .L18
 296 0198 9B68     		ldr	r3, [r3, #8]
 297 019a 03F40003 		and	r3, r3, #8388608
 298 019e 002B     		cmp	r3, #0
 299 01a0 05D0     		beq	.L13
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 300              		.loc 1 391 0
 301 01a2 524B     		ldr	r3, .L18
 302 01a4 514A     		ldr	r2, .L18
 303 01a6 9268     		ldr	r2, [r2, #8]
 304 01a8 22F40002 		bic	r2, r2, #8388608
 305 01ac 9A60     		str	r2, [r3, #8]
 306              	.L13:
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 307              		.loc 1 395 0
 308 01ae 4F4B     		ldr	r3, .L18
 309 01b0 D3F88420 		ldr	r2, [r3, #132]
 310 01b4 47F6C073 		movw	r3, #32704
 311 01b8 1340     		ands	r3, r3, r2
 312 01ba 4FEA9313 		lsr	r3, r3, #6
 313 01be 4FEAC353 		lsl	r3, r3, #23
 314 01c2 4FEAD353 		lsr	r3, r3, #23
 315 01c6 FB60     		str	r3, [r7, #12]
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 316              		.loc 1 399 0
 317 01c8 484B     		ldr	r3, .L18
 318 01ca D3F88430 		ldr	r3, [r3, #132]
 319 01ce 03F0E043 		and	r3, r3, #1879048192
 320 01d2 4FEA1373 		lsr	r3, r3, #28
 321 01d6 03F00703 		and	r3, r3, #7
 322 01da BB60     		str	r3, [r7, #8]
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 323              		.loc 1 403 0
 324 01dc 434B     		ldr	r3, .L18
 325 01de 5B68     		ldr	r3, [r3, #4]
 326 01e0 03F03F03 		and	r3, r3, #63
 327 01e4 3B61     		str	r3, [r7, #16]
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 328              		.loc 1 406 0
 329 01e6 424A     		ldr	r2, .L18+4
 330 01e8 3B69     		ldr	r3, [r7, #16]
 331 01ea B2FBF3F3 		udiv	r3, r2, r3
 332 01ee FA68     		ldr	r2, [r7, #12]
 333 01f0 02FB03F2 		mul	r2, r2, r3
 334 01f4 BB68     		ldr	r3, [r7, #8]
 335 01f6 B2FBF3F3 		udiv	r3, r2, r3
 336 01fa 7B61     		str	r3, [r7, #20]
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 337              		.loc 1 410 0
 338 01fc 3B68     		ldr	r3, [r7, #0]
 339 01fe DB88     		ldrh	r3, [r3, #6]
 340 0200 B3F5007F 		cmp	r3, #512
 341 0204 13D1     		bne	.L14
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 342              		.loc 1 413 0
 343 0206 7B69     		ldr	r3, [r7, #20]
 344 0208 4FEA1322 		lsr	r2, r3, #8
 345 020c 1346     		mov	r3, r2
 346 020e 4FEA8303 		lsl	r3, r3, #2
 347 0212 9B18     		adds	r3, r3, r2
 348 0214 4FEA4303 		lsl	r3, r3, #1
 349 0218 1A46     		mov	r2, r3
 350 021a 3B68     		ldr	r3, [r7, #0]
 351 021c 9B68     		ldr	r3, [r3, #8]
 352 021e B2FBF3F3 		udiv	r3, r2, r3
 353 0222 9BB2     		uxth	r3, r3
 354 0224 03F10503 		add	r3, r3, #5
 355 0228 9BB2     		uxth	r3, r3
 356 022a FB61     		str	r3, [r7, #28]
 357 022c 15E0     		b	.L15
 358              	.L14:
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 359              		.loc 1 418 0
 360 022e 7B8C     		ldrh	r3, [r7, #34]
 361 0230 4FEA4313 		lsl	r3, r3, #5
 362 0234 7A69     		ldr	r2, [r7, #20]
 363 0236 B2FBF3F2 		udiv	r2, r2, r3
 364 023a 1346     		mov	r3, r2
 365 023c 4FEA8303 		lsl	r3, r3, #2
 366 0240 9B18     		adds	r3, r3, r2
 367 0242 4FEA4303 		lsl	r3, r3, #1
 368 0246 1A46     		mov	r2, r3
 369 0248 3B68     		ldr	r3, [r7, #0]
 370 024a 9B68     		ldr	r3, [r3, #8]
 371 024c B2FBF3F3 		udiv	r3, r2, r3
 372 0250 9BB2     		uxth	r3, r3
 373 0252 03F10503 		add	r3, r3, #5
 374 0256 9BB2     		uxth	r3, r3
 375 0258 FB61     		str	r3, [r7, #28]
 376              	.L15:
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 377              		.loc 1 422 0
 378 025a FA69     		ldr	r2, [r7, #28]
 379 025c 254B     		ldr	r3, .L18+8
 380 025e A3FB0213 		umull	r1, r3, r3, r2
 381 0262 4FEAD303 		lsr	r3, r3, #3
 382 0266 FB61     		str	r3, [r7, #28]
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 383              		.loc 1 425 0
 384 0268 FB69     		ldr	r3, [r7, #28]
 385 026a 9BB2     		uxth	r3, r3
 386 026c 03F00103 		and	r3, r3, #1
 387 0270 BB84     		strh	r3, [r7, #36]	@ movhi
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 388              		.loc 1 428 0
 389 0272 BB8C     		ldrh	r3, [r7, #36]
 390 0274 FA69     		ldr	r2, [r7, #28]
 391 0276 D31A     		subs	r3, r2, r3
 392 0278 4FEA5303 		lsr	r3, r3, #1
 393 027c FB84     		strh	r3, [r7, #38]	@ movhi
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 394              		.loc 1 431 0
 395 027e BB8C     		ldrh	r3, [r7, #36]	@ movhi
 396 0280 4FEA0323 		lsl	r3, r3, #8
 397 0284 BB84     		strh	r3, [r7, #36]	@ movhi
 398              	.L10:
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 399              		.loc 1 435 0
 400 0286 FB8C     		ldrh	r3, [r7, #38]
 401 0288 012B     		cmp	r3, #1
 402 028a 02D9     		bls	.L16
 403              		.loc 1 435 0 is_stmt 0 discriminator 1
 404 028c FB8C     		ldrh	r3, [r7, #38]
 405 028e FF2B     		cmp	r3, #255
 406 0290 05D9     		bls	.L17
 407              	.L16:
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 408              		.loc 1 438 0 is_stmt 1
 409 0292 4FF00203 		mov	r3, #2
 410 0296 FB84     		strh	r3, [r7, #38]	@ movhi
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 411              		.loc 1 439 0
 412 0298 4FF00003 		mov	r3, #0
 413 029c BB84     		strh	r3, [r7, #36]	@ movhi
 414              	.L17:
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 415              		.loc 1 443 0
 416 029e 3B68     		ldr	r3, [r7, #0]
 417 02a0 DA88     		ldrh	r2, [r3, #6]
 418 02a2 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 419 02a4 1343     		orrs	r3, r3, r2
 420 02a6 9AB2     		uxth	r2, r3
 421 02a8 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 422 02aa 1343     		orrs	r3, r3, r2
 423 02ac 9AB2     		uxth	r2, r3
 424 02ae 7B68     		ldr	r3, [r7, #4]
 425 02b0 1A84     		strh	r2, [r3, #32]	@ movhi
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 426              		.loc 1 446 0
 427 02b2 3B68     		ldr	r3, [r7, #0]
 428 02b4 1A88     		ldrh	r2, [r3, #0]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 429              		.loc 1 447 0
 430 02b6 3B68     		ldr	r3, [r7, #0]
 431 02b8 5988     		ldrh	r1, [r3, #2]
 432 02ba 3B68     		ldr	r3, [r7, #0]
 433 02bc 9888     		ldrh	r0, [r3, #4]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 434              		.loc 1 448 0
 435 02be 3B68     		ldr	r3, [r7, #0]
 436 02c0 9B89     		ldrh	r3, [r3, #12]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 437              		.loc 1 447 0
 438 02c2 0343     		orrs	r3, r3, r0
 439 02c4 9BB2     		uxth	r3, r3
 440 02c6 0B43     		orrs	r3, r3, r1
 441 02c8 9BB2     		uxth	r3, r3
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 442              		.loc 1 446 0
 443 02ca 1343     		orrs	r3, r3, r2
 444 02cc 9AB2     		uxth	r2, r3
 445 02ce 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 446 02d0 1343     		orrs	r3, r3, r2
 447 02d2 9BB2     		uxth	r3, r3
 448 02d4 43F40063 		orr	r3, r3, #2048
 449 02d8 7B83     		strh	r3, [r7, #26]	@ movhi
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 450              		.loc 1 451 0
 451 02da 7B68     		ldr	r3, [r7, #4]
 452 02dc 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 453 02de 9A83     		strh	r2, [r3, #28]	@ movhi
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 454              		.loc 1 452 0
 455 02e0 07F12C07 		add	r7, r7, #44
 456 02e4 BD46     		mov	sp, r7
 457 02e6 80BC     		pop	{r7}
 458 02e8 7047     		bx	lr
 459              	.L19:
 460 02ea 00BF     		.align	2
 461              	.L18:
 462 02ec 00380240 		.word	1073887232
 463 02f0 00127A00 		.word	8000000
 464 02f4 CDCCCCCC 		.word	-858993459
 465              		.cfi_endproc
 466              	.LFE112:
 468              		.align	2
 469              		.global	SPI_StructInit
 470              		.thumb
 471              		.thumb_func
 473              	SPI_StructInit:
 474              	.LFB113:
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 475              		.loc 1 460 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 8
 478              		@ frame_needed = 1, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480 02f8 80B4     		push	{r7}
 481              	.LCFI9:
 482              		.cfi_def_cfa_offset 4
 483              		.cfi_offset 7, -4
 484 02fa 83B0     		sub	sp, sp, #12
 485              	.LCFI10:
 486              		.cfi_def_cfa_offset 16
 487 02fc 00AF     		add	r7, sp, #0
 488              	.LCFI11:
 489              		.cfi_def_cfa_register 7
 490 02fe 7860     		str	r0, [r7, #4]
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 491              		.loc 1 463 0
 492 0300 7B68     		ldr	r3, [r7, #4]
 493 0302 4FF00002 		mov	r2, #0
 494 0306 1A80     		strh	r2, [r3, #0]	@ movhi
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 495              		.loc 1 465 0
 496 0308 7B68     		ldr	r3, [r7, #4]
 497 030a 4FF00002 		mov	r2, #0
 498 030e 5A80     		strh	r2, [r3, #2]	@ movhi
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 499              		.loc 1 467 0
 500 0310 7B68     		ldr	r3, [r7, #4]
 501 0312 4FF00002 		mov	r2, #0
 502 0316 9A80     		strh	r2, [r3, #4]	@ movhi
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 503              		.loc 1 469 0
 504 0318 7B68     		ldr	r3, [r7, #4]
 505 031a 4FF00002 		mov	r2, #0
 506 031e DA80     		strh	r2, [r3, #6]	@ movhi
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 507              		.loc 1 471 0
 508 0320 7B68     		ldr	r3, [r7, #4]
 509 0322 4FF00002 		mov	r2, #0
 510 0326 1A81     		strh	r2, [r3, #8]	@ movhi
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 511              		.loc 1 473 0
 512 0328 7B68     		ldr	r3, [r7, #4]
 513 032a 4FF00002 		mov	r2, #0
 514 032e 5A81     		strh	r2, [r3, #10]	@ movhi
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 515              		.loc 1 475 0
 516 0330 7B68     		ldr	r3, [r7, #4]
 517 0332 4FF00002 		mov	r2, #0
 518 0336 9A81     		strh	r2, [r3, #12]	@ movhi
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 519              		.loc 1 477 0
 520 0338 7B68     		ldr	r3, [r7, #4]
 521 033a 4FF00002 		mov	r2, #0
 522 033e DA81     		strh	r2, [r3, #14]	@ movhi
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 523              		.loc 1 479 0
 524 0340 7B68     		ldr	r3, [r7, #4]
 525 0342 4FF00702 		mov	r2, #7
 526 0346 1A82     		strh	r2, [r3, #16]	@ movhi
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 527              		.loc 1 480 0
 528 0348 07F10C07 		add	r7, r7, #12
 529 034c BD46     		mov	sp, r7
 530 034e 80BC     		pop	{r7}
 531 0350 7047     		bx	lr
 532              		.cfi_endproc
 533              	.LFE113:
 535 0352 00BF     		.align	2
 536              		.global	I2S_StructInit
 537              		.thumb
 538              		.thumb_func
 540              	I2S_StructInit:
 541              	.LFB114:
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 542              		.loc 1 488 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 547 0354 80B4     		push	{r7}
 548              	.LCFI12:
 549              		.cfi_def_cfa_offset 4
 550              		.cfi_offset 7, -4
 551 0356 83B0     		sub	sp, sp, #12
 552              	.LCFI13:
 553              		.cfi_def_cfa_offset 16
 554 0358 00AF     		add	r7, sp, #0
 555              	.LCFI14:
 556              		.cfi_def_cfa_register 7
 557 035a 7860     		str	r0, [r7, #4]
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 558              		.loc 1 491 0
 559 035c 7B68     		ldr	r3, [r7, #4]
 560 035e 4FF00002 		mov	r2, #0
 561 0362 1A80     		strh	r2, [r3, #0]	@ movhi
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 562              		.loc 1 494 0
 563 0364 7B68     		ldr	r3, [r7, #4]
 564 0366 4FF00002 		mov	r2, #0
 565 036a 5A80     		strh	r2, [r3, #2]	@ movhi
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 566              		.loc 1 497 0
 567 036c 7B68     		ldr	r3, [r7, #4]
 568 036e 4FF00002 		mov	r2, #0
 569 0372 9A80     		strh	r2, [r3, #4]	@ movhi
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 570              		.loc 1 500 0
 571 0374 7B68     		ldr	r3, [r7, #4]
 572 0376 4FF00002 		mov	r2, #0
 573 037a DA80     		strh	r2, [r3, #6]	@ movhi
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 574              		.loc 1 503 0
 575 037c 7B68     		ldr	r3, [r7, #4]
 576 037e 4FF00202 		mov	r2, #2
 577 0382 9A60     		str	r2, [r3, #8]
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 578              		.loc 1 506 0
 579 0384 7B68     		ldr	r3, [r7, #4]
 580 0386 4FF00002 		mov	r2, #0
 581 038a 9A81     		strh	r2, [r3, #12]	@ movhi
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 582              		.loc 1 507 0
 583 038c 07F10C07 		add	r7, r7, #12
 584 0390 BD46     		mov	sp, r7
 585 0392 80BC     		pop	{r7}
 586 0394 7047     		bx	lr
 587              		.cfi_endproc
 588              	.LFE114:
 590 0396 00BF     		.align	2
 591              		.global	SPI_Cmd
 592              		.thumb
 593              		.thumb_func
 595              	SPI_Cmd:
 596              	.LFB115:
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 597              		.loc 1 517 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 8
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 602 0398 80B4     		push	{r7}
 603              	.LCFI15:
 604              		.cfi_def_cfa_offset 4
 605              		.cfi_offset 7, -4
 606 039a 83B0     		sub	sp, sp, #12
 607              	.LCFI16:
 608              		.cfi_def_cfa_offset 16
 609 039c 00AF     		add	r7, sp, #0
 610              	.LCFI17:
 611              		.cfi_def_cfa_register 7
 612 039e 7860     		str	r0, [r7, #4]
 613 03a0 0B46     		mov	r3, r1
 614 03a2 FB70     		strb	r3, [r7, #3]
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 615              		.loc 1 521 0
 616 03a4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 617 03a6 002B     		cmp	r3, #0
 618 03a8 08D0     		beq	.L23
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 619              		.loc 1 524 0
 620 03aa 7B68     		ldr	r3, [r7, #4]
 621 03ac 1B88     		ldrh	r3, [r3, #0]	@ movhi
 622 03ae 9BB2     		uxth	r3, r3
 623 03b0 43F04003 		orr	r3, r3, #64
 624 03b4 9AB2     		uxth	r2, r3
 625 03b6 7B68     		ldr	r3, [r7, #4]
 626 03b8 1A80     		strh	r2, [r3, #0]	@ movhi
 627 03ba 07E0     		b	.L22
 628              	.L23:
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 629              		.loc 1 529 0
 630 03bc 7B68     		ldr	r3, [r7, #4]
 631 03be 1B88     		ldrh	r3, [r3, #0]	@ movhi
 632 03c0 9BB2     		uxth	r3, r3
 633 03c2 23F04003 		bic	r3, r3, #64
 634 03c6 9AB2     		uxth	r2, r3
 635 03c8 7B68     		ldr	r3, [r7, #4]
 636 03ca 1A80     		strh	r2, [r3, #0]	@ movhi
 637              	.L22:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 638              		.loc 1 531 0
 639 03cc 07F10C07 		add	r7, r7, #12
 640 03d0 BD46     		mov	sp, r7
 641 03d2 80BC     		pop	{r7}
 642 03d4 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE115:
 646 03d6 00BF     		.align	2
 647              		.global	I2S_Cmd
 648              		.thumb
 649              		.thumb_func
 651              	I2S_Cmd:
 652              	.LFB116:
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 653              		.loc 1 542 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 8
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 03d8 80B4     		push	{r7}
 659              	.LCFI18:
 660              		.cfi_def_cfa_offset 4
 661              		.cfi_offset 7, -4
 662 03da 83B0     		sub	sp, sp, #12
 663              	.LCFI19:
 664              		.cfi_def_cfa_offset 16
 665 03dc 00AF     		add	r7, sp, #0
 666              	.LCFI20:
 667              		.cfi_def_cfa_register 7
 668 03de 7860     		str	r0, [r7, #4]
 669 03e0 0B46     		mov	r3, r1
 670 03e2 FB70     		strb	r3, [r7, #3]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 671              		.loc 1 547 0
 672 03e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 673 03e6 002B     		cmp	r3, #0
 674 03e8 08D0     		beq	.L26
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 675              		.loc 1 550 0
 676 03ea 7B68     		ldr	r3, [r7, #4]
 677 03ec 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 678 03ee 9BB2     		uxth	r3, r3
 679 03f0 43F48063 		orr	r3, r3, #1024
 680 03f4 9AB2     		uxth	r2, r3
 681 03f6 7B68     		ldr	r3, [r7, #4]
 682 03f8 9A83     		strh	r2, [r3, #28]	@ movhi
 683 03fa 07E0     		b	.L25
 684              	.L26:
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 685              		.loc 1 555 0
 686 03fc 7B68     		ldr	r3, [r7, #4]
 687 03fe 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 688 0400 9BB2     		uxth	r3, r3
 689 0402 23F48063 		bic	r3, r3, #1024
 690 0406 9AB2     		uxth	r2, r3
 691 0408 7B68     		ldr	r3, [r7, #4]
 692 040a 9A83     		strh	r2, [r3, #28]	@ movhi
 693              	.L25:
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 694              		.loc 1 557 0
 695 040c 07F10C07 		add	r7, r7, #12
 696 0410 BD46     		mov	sp, r7
 697 0412 80BC     		pop	{r7}
 698 0414 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE116:
 702 0416 00BF     		.align	2
 703              		.global	SPI_DataSizeConfig
 704              		.thumb
 705              		.thumb_func
 707              	SPI_DataSizeConfig:
 708              	.LFB117:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 709              		.loc 1 569 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 8
 712              		@ frame_needed = 1, uses_anonymous_args = 0
 713              		@ link register save eliminated.
 714 0418 80B4     		push	{r7}
 715              	.LCFI21:
 716              		.cfi_def_cfa_offset 4
 717              		.cfi_offset 7, -4
 718 041a 83B0     		sub	sp, sp, #12
 719              	.LCFI22:
 720              		.cfi_def_cfa_offset 16
 721 041c 00AF     		add	r7, sp, #0
 722              	.LCFI23:
 723              		.cfi_def_cfa_register 7
 724 041e 7860     		str	r0, [r7, #4]
 725 0420 0B46     		mov	r3, r1
 726 0422 7B80     		strh	r3, [r7, #2]	@ movhi
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 727              		.loc 1 574 0
 728 0424 7B68     		ldr	r3, [r7, #4]
 729 0426 1B88     		ldrh	r3, [r3, #0]	@ movhi
 730 0428 9BB2     		uxth	r3, r3
 731 042a 23F40063 		bic	r3, r3, #2048
 732 042e 9AB2     		uxth	r2, r3
 733 0430 7B68     		ldr	r3, [r7, #4]
 734 0432 1A80     		strh	r2, [r3, #0]	@ movhi
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 735              		.loc 1 576 0
 736 0434 7B68     		ldr	r3, [r7, #4]
 737 0436 1B88     		ldrh	r3, [r3, #0]	@ movhi
 738 0438 9AB2     		uxth	r2, r3
 739 043a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 740 043c 1343     		orrs	r3, r3, r2
 741 043e 9AB2     		uxth	r2, r3
 742 0440 7B68     		ldr	r3, [r7, #4]
 743 0442 1A80     		strh	r2, [r3, #0]	@ movhi
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 744              		.loc 1 577 0
 745 0444 07F10C07 		add	r7, r7, #12
 746 0448 BD46     		mov	sp, r7
 747 044a 80BC     		pop	{r7}
 748 044c 7047     		bx	lr
 749              		.cfi_endproc
 750              	.LFE117:
 752 044e 00BF     		.align	2
 753              		.global	SPI_BiDirectionalLineConfig
 754              		.thumb
 755              		.thumb_func
 757              	SPI_BiDirectionalLineConfig:
 758              	.LFB118:
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 759              		.loc 1 589 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 8
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763              		@ link register save eliminated.
 764 0450 80B4     		push	{r7}
 765              	.LCFI24:
 766              		.cfi_def_cfa_offset 4
 767              		.cfi_offset 7, -4
 768 0452 83B0     		sub	sp, sp, #12
 769              	.LCFI25:
 770              		.cfi_def_cfa_offset 16
 771 0454 00AF     		add	r7, sp, #0
 772              	.LCFI26:
 773              		.cfi_def_cfa_register 7
 774 0456 7860     		str	r0, [r7, #4]
 775 0458 0B46     		mov	r3, r1
 776 045a 7B80     		strh	r3, [r7, #2]	@ movhi
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 777              		.loc 1 593 0
 778 045c 7B88     		ldrh	r3, [r7, #2]
 779 045e B3F5804F 		cmp	r3, #16384
 780 0462 08D1     		bne	.L30
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 781              		.loc 1 596 0
 782 0464 7B68     		ldr	r3, [r7, #4]
 783 0466 1B88     		ldrh	r3, [r3, #0]	@ movhi
 784 0468 9BB2     		uxth	r3, r3
 785 046a 43F48043 		orr	r3, r3, #16384
 786 046e 9AB2     		uxth	r2, r3
 787 0470 7B68     		ldr	r3, [r7, #4]
 788 0472 1A80     		strh	r2, [r3, #0]	@ movhi
 789 0474 07E0     		b	.L29
 790              	.L30:
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 791              		.loc 1 601 0
 792 0476 7B68     		ldr	r3, [r7, #4]
 793 0478 1B88     		ldrh	r3, [r3, #0]	@ movhi
 794 047a 9BB2     		uxth	r3, r3
 795 047c 23F48043 		bic	r3, r3, #16384
 796 0480 9AB2     		uxth	r2, r3
 797 0482 7B68     		ldr	r3, [r7, #4]
 798 0484 1A80     		strh	r2, [r3, #0]	@ movhi
 799              	.L29:
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 800              		.loc 1 603 0
 801 0486 07F10C07 		add	r7, r7, #12
 802 048a BD46     		mov	sp, r7
 803 048c 80BC     		pop	{r7}
 804 048e 7047     		bx	lr
 805              		.cfi_endproc
 806              	.LFE118:
 808              		.align	2
 809              		.global	SPI_NSSInternalSoftwareConfig
 810              		.thumb
 811              		.thumb_func
 813              	SPI_NSSInternalSoftwareConfig:
 814              	.LFB119:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 815              		.loc 1 615 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 8
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 820 0490 80B4     		push	{r7}
 821              	.LCFI27:
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0492 83B0     		sub	sp, sp, #12
 825              	.LCFI28:
 826              		.cfi_def_cfa_offset 16
 827 0494 00AF     		add	r7, sp, #0
 828              	.LCFI29:
 829              		.cfi_def_cfa_register 7
 830 0496 7860     		str	r0, [r7, #4]
 831 0498 0B46     		mov	r3, r1
 832 049a 7B80     		strh	r3, [r7, #2]	@ movhi
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 833              		.loc 1 619 0
 834 049c 7A88     		ldrh	r2, [r7, #2]
 835 049e 4FF6FF63 		movw	r3, #65279
 836 04a2 9A42     		cmp	r2, r3
 837 04a4 08D0     		beq	.L33
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 838              		.loc 1 622 0
 839 04a6 7B68     		ldr	r3, [r7, #4]
 840 04a8 1B88     		ldrh	r3, [r3, #0]	@ movhi
 841 04aa 9BB2     		uxth	r3, r3
 842 04ac 43F48073 		orr	r3, r3, #256
 843 04b0 9AB2     		uxth	r2, r3
 844 04b2 7B68     		ldr	r3, [r7, #4]
 845 04b4 1A80     		strh	r2, [r3, #0]	@ movhi
 846 04b6 07E0     		b	.L32
 847              	.L33:
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 848              		.loc 1 627 0
 849 04b8 7B68     		ldr	r3, [r7, #4]
 850 04ba 1B88     		ldrh	r3, [r3, #0]	@ movhi
 851 04bc 9BB2     		uxth	r3, r3
 852 04be 23F48073 		bic	r3, r3, #256
 853 04c2 9AB2     		uxth	r2, r3
 854 04c4 7B68     		ldr	r3, [r7, #4]
 855 04c6 1A80     		strh	r2, [r3, #0]	@ movhi
 856              	.L32:
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 857              		.loc 1 629 0
 858 04c8 07F10C07 		add	r7, r7, #12
 859 04cc BD46     		mov	sp, r7
 860 04ce 80BC     		pop	{r7}
 861 04d0 7047     		bx	lr
 862              		.cfi_endproc
 863              	.LFE119:
 865 04d2 00BF     		.align	2
 866              		.global	SPI_SSOutputCmd
 867              		.thumb
 868              		.thumb_func
 870              	SPI_SSOutputCmd:
 871              	.LFB120:
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 872              		.loc 1 639 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 8
 875              		@ frame_needed = 1, uses_anonymous_args = 0
 876              		@ link register save eliminated.
 877 04d4 80B4     		push	{r7}
 878              	.LCFI30:
 879              		.cfi_def_cfa_offset 4
 880              		.cfi_offset 7, -4
 881 04d6 83B0     		sub	sp, sp, #12
 882              	.LCFI31:
 883              		.cfi_def_cfa_offset 16
 884 04d8 00AF     		add	r7, sp, #0
 885              	.LCFI32:
 886              		.cfi_def_cfa_register 7
 887 04da 7860     		str	r0, [r7, #4]
 888 04dc 0B46     		mov	r3, r1
 889 04de FB70     		strb	r3, [r7, #3]
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 890              		.loc 1 643 0
 891 04e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 892 04e2 002B     		cmp	r3, #0
 893 04e4 08D0     		beq	.L36
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 894              		.loc 1 646 0
 895 04e6 7B68     		ldr	r3, [r7, #4]
 896 04e8 9B88     		ldrh	r3, [r3, #4]	@ movhi
 897 04ea 9BB2     		uxth	r3, r3
 898 04ec 43F00403 		orr	r3, r3, #4
 899 04f0 9AB2     		uxth	r2, r3
 900 04f2 7B68     		ldr	r3, [r7, #4]
 901 04f4 9A80     		strh	r2, [r3, #4]	@ movhi
 902 04f6 07E0     		b	.L35
 903              	.L36:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 904              		.loc 1 651 0
 905 04f8 7B68     		ldr	r3, [r7, #4]
 906 04fa 9B88     		ldrh	r3, [r3, #4]	@ movhi
 907 04fc 9BB2     		uxth	r3, r3
 908 04fe 23F00403 		bic	r3, r3, #4
 909 0502 9AB2     		uxth	r2, r3
 910 0504 7B68     		ldr	r3, [r7, #4]
 911 0506 9A80     		strh	r2, [r3, #4]	@ movhi
 912              	.L35:
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 913              		.loc 1 653 0
 914 0508 07F10C07 		add	r7, r7, #12
 915 050c BD46     		mov	sp, r7
 916 050e 80BC     		pop	{r7}
 917 0510 7047     		bx	lr
 918              		.cfi_endproc
 919              	.LFE120:
 921 0512 00BF     		.align	2
 922              		.global	SPI_TIModeCmd
 923              		.thumb
 924              		.thumb_func
 926              	SPI_TIModeCmd:
 927              	.LFB121:
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 928              		.loc 1 670 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 8
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932              		@ link register save eliminated.
 933 0514 80B4     		push	{r7}
 934              	.LCFI33:
 935              		.cfi_def_cfa_offset 4
 936              		.cfi_offset 7, -4
 937 0516 83B0     		sub	sp, sp, #12
 938              	.LCFI34:
 939              		.cfi_def_cfa_offset 16
 940 0518 00AF     		add	r7, sp, #0
 941              	.LCFI35:
 942              		.cfi_def_cfa_register 7
 943 051a 7860     		str	r0, [r7, #4]
 944 051c 0B46     		mov	r3, r1
 945 051e FB70     		strb	r3, [r7, #3]
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 946              		.loc 1 675 0
 947 0520 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 948 0522 002B     		cmp	r3, #0
 949 0524 08D0     		beq	.L39
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 950              		.loc 1 678 0
 951 0526 7B68     		ldr	r3, [r7, #4]
 952 0528 9B88     		ldrh	r3, [r3, #4]	@ movhi
 953 052a 9BB2     		uxth	r3, r3
 954 052c 43F01003 		orr	r3, r3, #16
 955 0530 9AB2     		uxth	r2, r3
 956 0532 7B68     		ldr	r3, [r7, #4]
 957 0534 9A80     		strh	r2, [r3, #4]	@ movhi
 958 0536 07E0     		b	.L38
 959              	.L39:
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 960              		.loc 1 683 0
 961 0538 7B68     		ldr	r3, [r7, #4]
 962 053a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 963 053c 9BB2     		uxth	r3, r3
 964 053e 23F01003 		bic	r3, r3, #16
 965 0542 9AB2     		uxth	r2, r3
 966 0544 7B68     		ldr	r3, [r7, #4]
 967 0546 9A80     		strh	r2, [r3, #4]	@ movhi
 968              	.L38:
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 969              		.loc 1 685 0
 970 0548 07F10C07 		add	r7, r7, #12
 971 054c BD46     		mov	sp, r7
 972 054e 80BC     		pop	{r7}
 973 0550 7047     		bx	lr
 974              		.cfi_endproc
 975              	.LFE121:
 977 0552 00BF     		.align	2
 978              		.global	I2S_FullDuplexConfig
 979              		.thumb
 980              		.thumb_func
 982              	I2S_FullDuplexConfig:
 983              	.LFB122:
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 984              		.loc 1 707 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 16
 987              		@ frame_needed = 1, uses_anonymous_args = 0
 988              		@ link register save eliminated.
 989 0554 80B4     		push	{r7}
 990              	.LCFI36:
 991              		.cfi_def_cfa_offset 4
 992              		.cfi_offset 7, -4
 993 0556 85B0     		sub	sp, sp, #20
 994              	.LCFI37:
 995              		.cfi_def_cfa_offset 24
 996 0558 00AF     		add	r7, sp, #0
 997              	.LCFI38:
 998              		.cfi_def_cfa_register 7
 999 055a 7860     		str	r0, [r7, #4]
 1000 055c 3960     		str	r1, [r7, #0]
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1001              		.loc 1 708 0
 1002 055e 4FF00003 		mov	r3, #0
 1003 0562 BB81     		strh	r3, [r7, #12]	@ movhi
 1004 0564 4FF00003 		mov	r3, #0
 1005 0568 FB81     		strh	r3, [r7, #14]	@ movhi
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1006              		.loc 1 719 0
 1007 056a 7B68     		ldr	r3, [r7, #4]
 1008 056c 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1009 056e 9BB2     		uxth	r3, r3
 1010 0570 23F47B63 		bic	r3, r3, #4016
 1011 0574 23F00F03 		bic	r3, r3, #15
 1012 0578 9AB2     		uxth	r2, r3
 1013 057a 7B68     		ldr	r3, [r7, #4]
 1014 057c 9A83     		strh	r2, [r3, #28]	@ movhi
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1015              		.loc 1 720 0
 1016 057e 7B68     		ldr	r3, [r7, #4]
 1017 0580 4FF00202 		mov	r2, #2
 1018 0584 1A84     		strh	r2, [r3, #32]	@ movhi
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1019              		.loc 1 723 0
 1020 0586 7B68     		ldr	r3, [r7, #4]
 1021 0588 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1022 058a BB81     		strh	r3, [r7, #12]	@ movhi
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1023              		.loc 1 726 0
 1024 058c 3B68     		ldr	r3, [r7, #0]
 1025 058e 1B88     		ldrh	r3, [r3, #0]
 1026 0590 B3F5007F 		cmp	r3, #512
 1027 0594 03D0     		beq	.L42
 1028              		.loc 1 726 0 is_stmt 0 discriminator 1
 1029 0596 3B68     		ldr	r3, [r7, #0]
 1030 0598 1B88     		ldrh	r3, [r3, #0]
 1031 059a 002B     		cmp	r3, #0
 1032 059c 03D1     		bne	.L43
 1033              	.L42:
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1034              		.loc 1 728 0 is_stmt 1
 1035 059e 4FF48073 		mov	r3, #256
 1036 05a2 FB81     		strh	r3, [r7, #14]	@ movhi
 1037 05a4 0CE0     		b	.L44
 1038              	.L43:
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1039              		.loc 1 732 0
 1040 05a6 3B68     		ldr	r3, [r7, #0]
 1041 05a8 1B88     		ldrh	r3, [r3, #0]
 1042 05aa B3F5407F 		cmp	r3, #768
 1043 05ae 04D0     		beq	.L45
 1044              		.loc 1 732 0 is_stmt 0 discriminator 1
 1045 05b0 3B68     		ldr	r3, [r7, #0]
 1046 05b2 1B88     		ldrh	r3, [r3, #0]
 1047 05b4 B3F5807F 		cmp	r3, #256
 1048 05b8 02D1     		bne	.L44
 1049              	.L45:
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1050              		.loc 1 734 0 is_stmt 1
 1051 05ba 4FF00003 		mov	r3, #0
 1052 05be FB81     		strh	r3, [r7, #14]	@ movhi
 1053              	.L44:
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1054              		.loc 1 741 0
 1055 05c0 3B68     		ldr	r3, [r7, #0]
 1056 05c2 5A88     		ldrh	r2, [r3, #2]
 1057 05c4 3B68     		ldr	r3, [r7, #0]
 1058 05c6 9988     		ldrh	r1, [r3, #4]
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1059              		.loc 1 742 0
 1060 05c8 3B68     		ldr	r3, [r7, #0]
 1061 05ca 9B89     		ldrh	r3, [r3, #12]
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1062              		.loc 1 741 0
 1063 05cc 0B43     		orrs	r3, r3, r1
 1064 05ce 9BB2     		uxth	r3, r3
 1065 05d0 1343     		orrs	r3, r3, r2
 1066 05d2 9AB2     		uxth	r2, r3
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 1067              		.loc 1 740 0
 1068 05d4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1069 05d6 1343     		orrs	r3, r3, r2
 1070 05d8 9AB2     		uxth	r2, r3
 1071 05da BB89     		ldrh	r3, [r7, #12]	@ movhi
 1072 05dc 1343     		orrs	r3, r3, r2
 1073 05de 9BB2     		uxth	r3, r3
 1074 05e0 43F40063 		orr	r3, r3, #2048
 1075 05e4 BB81     		strh	r3, [r7, #12]	@ movhi
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1076              		.loc 1 745 0
 1077 05e6 7B68     		ldr	r3, [r7, #4]
 1078 05e8 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1079 05ea 9A83     		strh	r2, [r3, #28]	@ movhi
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1080              		.loc 1 746 0
 1081 05ec 07F11407 		add	r7, r7, #20
 1082 05f0 BD46     		mov	sp, r7
 1083 05f2 80BC     		pop	{r7}
 1084 05f4 7047     		bx	lr
 1085              		.cfi_endproc
 1086              	.LFE122:
 1088 05f6 00BF     		.align	2
 1089              		.global	SPI_I2S_ReceiveData
 1090              		.thumb
 1091              		.thumb_func
 1093              	SPI_I2S_ReceiveData:
 1094              	.LFB123:
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1095              		.loc 1 782 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 8
 1098              		@ frame_needed = 1, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 1100 05f8 80B4     		push	{r7}
 1101              	.LCFI39:
 1102              		.cfi_def_cfa_offset 4
 1103              		.cfi_offset 7, -4
 1104 05fa 83B0     		sub	sp, sp, #12
 1105              	.LCFI40:
 1106              		.cfi_def_cfa_offset 16
 1107 05fc 00AF     		add	r7, sp, #0
 1108              	.LCFI41:
 1109              		.cfi_def_cfa_register 7
 1110 05fe 7860     		str	r0, [r7, #4]
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 1111              		.loc 1 787 0
 1112 0600 7B68     		ldr	r3, [r7, #4]
 1113 0602 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1114 0604 9BB2     		uxth	r3, r3
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1115              		.loc 1 788 0
 1116 0606 1846     		mov	r0, r3
 1117 0608 07F10C07 		add	r7, r7, #12
 1118 060c BD46     		mov	sp, r7
 1119 060e 80BC     		pop	{r7}
 1120 0610 7047     		bx	lr
 1121              		.cfi_endproc
 1122              	.LFE123:
 1124 0612 00BF     		.align	2
 1125              		.global	SPI_I2S_SendData
 1126              		.thumb
 1127              		.thumb_func
 1129              	SPI_I2S_SendData:
 1130              	.LFB124:
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1131              		.loc 1 798 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 8
 1134              		@ frame_needed = 1, uses_anonymous_args = 0
 1135              		@ link register save eliminated.
 1136 0614 80B4     		push	{r7}
 1137              	.LCFI42:
 1138              		.cfi_def_cfa_offset 4
 1139              		.cfi_offset 7, -4
 1140 0616 83B0     		sub	sp, sp, #12
 1141              	.LCFI43:
 1142              		.cfi_def_cfa_offset 16
 1143 0618 00AF     		add	r7, sp, #0
 1144              	.LCFI44:
 1145              		.cfi_def_cfa_register 7
 1146 061a 7860     		str	r0, [r7, #4]
 1147 061c 0B46     		mov	r3, r1
 1148 061e 7B80     		strh	r3, [r7, #2]	@ movhi
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 1149              		.loc 1 803 0
 1150 0620 7B68     		ldr	r3, [r7, #4]
 1151 0622 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1152 0624 9A81     		strh	r2, [r3, #12]	@ movhi
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1153              		.loc 1 804 0
 1154 0626 07F10C07 		add	r7, r7, #12
 1155 062a BD46     		mov	sp, r7
 1156 062c 80BC     		pop	{r7}
 1157 062e 7047     		bx	lr
 1158              		.cfi_endproc
 1159              	.LFE124:
 1161              		.align	2
 1162              		.global	SPI_CalculateCRC
 1163              		.thumb
 1164              		.thumb_func
 1166              	SPI_CalculateCRC:
 1167              	.LFB125:
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1168              		.loc 1 887 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 8
 1171              		@ frame_needed = 1, uses_anonymous_args = 0
 1172              		@ link register save eliminated.
 1173 0630 80B4     		push	{r7}
 1174              	.LCFI45:
 1175              		.cfi_def_cfa_offset 4
 1176              		.cfi_offset 7, -4
 1177 0632 83B0     		sub	sp, sp, #12
 1178              	.LCFI46:
 1179              		.cfi_def_cfa_offset 16
 1180 0634 00AF     		add	r7, sp, #0
 1181              	.LCFI47:
 1182              		.cfi_def_cfa_register 7
 1183 0636 7860     		str	r0, [r7, #4]
 1184 0638 0B46     		mov	r3, r1
 1185 063a FB70     		strb	r3, [r7, #3]
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1186              		.loc 1 891 0
 1187 063c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1188 063e 002B     		cmp	r3, #0
 1189 0640 08D0     		beq	.L50
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1190              		.loc 1 894 0
 1191 0642 7B68     		ldr	r3, [r7, #4]
 1192 0644 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1193 0646 9BB2     		uxth	r3, r3
 1194 0648 43F40053 		orr	r3, r3, #8192
 1195 064c 9AB2     		uxth	r2, r3
 1196 064e 7B68     		ldr	r3, [r7, #4]
 1197 0650 1A80     		strh	r2, [r3, #0]	@ movhi
 1198 0652 07E0     		b	.L49
 1199              	.L50:
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 1200              		.loc 1 899 0
 1201 0654 7B68     		ldr	r3, [r7, #4]
 1202 0656 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1203 0658 9BB2     		uxth	r3, r3
 1204 065a 23F40053 		bic	r3, r3, #8192
 1205 065e 9AB2     		uxth	r2, r3
 1206 0660 7B68     		ldr	r3, [r7, #4]
 1207 0662 1A80     		strh	r2, [r3, #0]	@ movhi
 1208              	.L49:
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1209              		.loc 1 901 0
 1210 0664 07F10C07 		add	r7, r7, #12
 1211 0668 BD46     		mov	sp, r7
 1212 066a 80BC     		pop	{r7}
 1213 066c 7047     		bx	lr
 1214              		.cfi_endproc
 1215              	.LFE125:
 1217 066e 00BF     		.align	2
 1218              		.global	SPI_TransmitCRC
 1219              		.thumb
 1220              		.thumb_func
 1222              	SPI_TransmitCRC:
 1223              	.LFB126:
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1224              		.loc 1 909 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 8
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228              		@ link register save eliminated.
 1229 0670 80B4     		push	{r7}
 1230              	.LCFI48:
 1231              		.cfi_def_cfa_offset 4
 1232              		.cfi_offset 7, -4
 1233 0672 83B0     		sub	sp, sp, #12
 1234              	.LCFI49:
 1235              		.cfi_def_cfa_offset 16
 1236 0674 00AF     		add	r7, sp, #0
 1237              	.LCFI50:
 1238              		.cfi_def_cfa_register 7
 1239 0676 7860     		str	r0, [r7, #4]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1240              		.loc 1 914 0
 1241 0678 7B68     		ldr	r3, [r7, #4]
 1242 067a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1243 067c 9BB2     		uxth	r3, r3
 1244 067e 43F48053 		orr	r3, r3, #4096
 1245 0682 9AB2     		uxth	r2, r3
 1246 0684 7B68     		ldr	r3, [r7, #4]
 1247 0686 1A80     		strh	r2, [r3, #0]	@ movhi
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1248              		.loc 1 915 0
 1249 0688 07F10C07 		add	r7, r7, #12
 1250 068c BD46     		mov	sp, r7
 1251 068e 80BC     		pop	{r7}
 1252 0690 7047     		bx	lr
 1253              		.cfi_endproc
 1254              	.LFE126:
 1256 0692 00BF     		.align	2
 1257              		.global	SPI_GetCRC
 1258              		.thumb
 1259              		.thumb_func
 1261              	SPI_GetCRC:
 1262              	.LFB127:
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1263              		.loc 1 927 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 16
 1266              		@ frame_needed = 1, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 1268 0694 80B4     		push	{r7}
 1269              	.LCFI51:
 1270              		.cfi_def_cfa_offset 4
 1271              		.cfi_offset 7, -4
 1272 0696 85B0     		sub	sp, sp, #20
 1273              	.LCFI52:
 1274              		.cfi_def_cfa_offset 24
 1275 0698 00AF     		add	r7, sp, #0
 1276              	.LCFI53:
 1277              		.cfi_def_cfa_register 7
 1278 069a 7860     		str	r0, [r7, #4]
 1279 069c 0B46     		mov	r3, r1
 1280 069e FB70     		strb	r3, [r7, #3]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 1281              		.loc 1 928 0
 1282 06a0 4FF00003 		mov	r3, #0
 1283 06a4 FB81     		strh	r3, [r7, #14]	@ movhi
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1284              		.loc 1 932 0
 1285 06a6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1286 06a8 012B     		cmp	r3, #1
 1287 06aa 03D0     		beq	.L54
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 1288              		.loc 1 935 0
 1289 06ac 7B68     		ldr	r3, [r7, #4]
 1290 06ae 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1291 06b0 FB81     		strh	r3, [r7, #14]	@ movhi
 1292 06b2 02E0     		b	.L55
 1293              	.L54:
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 1294              		.loc 1 940 0
 1295 06b4 7B68     		ldr	r3, [r7, #4]
 1296 06b6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1297 06b8 FB81     		strh	r3, [r7, #14]	@ movhi
 1298              	.L55:
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 1299              		.loc 1 943 0
 1300 06ba FB89     		ldrh	r3, [r7, #14]
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1301              		.loc 1 944 0
 1302 06bc 1846     		mov	r0, r3
 1303 06be 07F11407 		add	r7, r7, #20
 1304 06c2 BD46     		mov	sp, r7
 1305 06c4 80BC     		pop	{r7}
 1306 06c6 7047     		bx	lr
 1307              		.cfi_endproc
 1308              	.LFE127:
 1310              		.align	2
 1311              		.global	SPI_GetCRCPolynomial
 1312              		.thumb
 1313              		.thumb_func
 1315              	SPI_GetCRCPolynomial:
 1316              	.LFB128:
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1317              		.loc 1 952 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 8
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321              		@ link register save eliminated.
 1322 06c8 80B4     		push	{r7}
 1323              	.LCFI54:
 1324              		.cfi_def_cfa_offset 4
 1325              		.cfi_offset 7, -4
 1326 06ca 83B0     		sub	sp, sp, #12
 1327              	.LCFI55:
 1328              		.cfi_def_cfa_offset 16
 1329 06cc 00AF     		add	r7, sp, #0
 1330              	.LCFI56:
 1331              		.cfi_def_cfa_register 7
 1332 06ce 7860     		str	r0, [r7, #4]
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1333              		.loc 1 957 0
 1334 06d0 7B68     		ldr	r3, [r7, #4]
 1335 06d2 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1336 06d4 9BB2     		uxth	r3, r3
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1337              		.loc 1 958 0
 1338 06d6 1846     		mov	r0, r3
 1339 06d8 07F10C07 		add	r7, r7, #12
 1340 06dc BD46     		mov	sp, r7
 1341 06de 80BC     		pop	{r7}
 1342 06e0 7047     		bx	lr
 1343              		.cfi_endproc
 1344              	.LFE128:
 1346 06e2 00BF     		.align	2
 1347              		.global	SPI_I2S_DMACmd
 1348              		.thumb
 1349              		.thumb_func
 1351              	SPI_I2S_DMACmd:
 1352              	.LFB129:
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1353              		.loc 1 989 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 8
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358 06e4 80B4     		push	{r7}
 1359              	.LCFI57:
 1360              		.cfi_def_cfa_offset 4
 1361              		.cfi_offset 7, -4
 1362 06e6 83B0     		sub	sp, sp, #12
 1363              	.LCFI58:
 1364              		.cfi_def_cfa_offset 16
 1365 06e8 00AF     		add	r7, sp, #0
 1366              	.LCFI59:
 1367              		.cfi_def_cfa_register 7
 1368 06ea 7860     		str	r0, [r7, #4]
 1369 06ec 1346     		mov	r3, r2
 1370 06ee 0A46     		mov	r2, r1	@ movhi
 1371 06f0 7A80     		strh	r2, [r7, #2]	@ movhi
 1372 06f2 7B70     		strb	r3, [r7, #1]
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1373              		.loc 1 995 0
 1374 06f4 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1375 06f6 002B     		cmp	r3, #0
 1376 06f8 08D0     		beq	.L60
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1377              		.loc 1 998 0
 1378 06fa 7B68     		ldr	r3, [r7, #4]
 1379 06fc 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1380 06fe 9AB2     		uxth	r2, r3
 1381 0700 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1382 0702 1343     		orrs	r3, r3, r2
 1383 0704 9AB2     		uxth	r2, r3
 1384 0706 7B68     		ldr	r3, [r7, #4]
 1385 0708 9A80     		strh	r2, [r3, #4]	@ movhi
 1386 070a 0AE0     		b	.L59
 1387              	.L60:
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1388              		.loc 1 1003 0
 1389 070c 7B68     		ldr	r3, [r7, #4]
 1390 070e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1391 0710 9AB2     		uxth	r2, r3
 1392 0712 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1393 0714 6FEA0303 		mvn	r3, r3
 1394 0718 9BB2     		uxth	r3, r3
 1395 071a 1340     		ands	r3, r3, r2
 1396 071c 9AB2     		uxth	r2, r3
 1397 071e 7B68     		ldr	r3, [r7, #4]
 1398 0720 9A80     		strh	r2, [r3, #4]	@ movhi
 1399              	.L59:
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1400              		.loc 1 1005 0
 1401 0722 07F10C07 		add	r7, r7, #12
 1402 0726 BD46     		mov	sp, r7
 1403 0728 80BC     		pop	{r7}
 1404 072a 7047     		bx	lr
 1405              		.cfi_endproc
 1406              	.LFE129:
 1408              		.align	2
 1409              		.global	SPI_I2S_ITConfig
 1410              		.thumb
 1411              		.thumb_func
 1413              	SPI_I2S_ITConfig:
 1414              	.LFB130:
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1415              		.loc 1 1098 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 16
 1418              		@ frame_needed = 1, uses_anonymous_args = 0
 1419              		@ link register save eliminated.
 1420 072c 80B4     		push	{r7}
 1421              	.LCFI60:
 1422              		.cfi_def_cfa_offset 4
 1423              		.cfi_offset 7, -4
 1424 072e 85B0     		sub	sp, sp, #20
 1425              	.LCFI61:
 1426              		.cfi_def_cfa_offset 24
 1427 0730 00AF     		add	r7, sp, #0
 1428              	.LCFI62:
 1429              		.cfi_def_cfa_register 7
 1430 0732 7860     		str	r0, [r7, #4]
 1431 0734 1346     		mov	r3, r2
 1432 0736 0A46     		mov	r2, r1
 1433 0738 FA70     		strb	r2, [r7, #3]
 1434 073a BB70     		strb	r3, [r7, #2]
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1435              		.loc 1 1099 0
 1436 073c 4FF00003 		mov	r3, #0
 1437 0740 FB81     		strh	r3, [r7, #14]	@ movhi
 1438 0742 4FF00003 		mov	r3, #0
 1439 0746 BB81     		strh	r3, [r7, #12]	@ movhi
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1440              		.loc 1 1107 0
 1441 0748 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1442 074a 4FEA1313 		lsr	r3, r3, #4
 1443 074e DBB2     		uxtb	r3, r3
 1444 0750 FB81     		strh	r3, [r7, #14]	@ movhi
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1445              		.loc 1 1110 0
 1446 0752 FB89     		ldrh	r3, [r7, #14]
 1447 0754 4FF00102 		mov	r2, #1
 1448 0758 02FA03F3 		lsl	r3, r2, r3
 1449 075c BB81     		strh	r3, [r7, #12]	@ movhi
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1450              		.loc 1 1112 0
 1451 075e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1452 0760 002B     		cmp	r3, #0
 1453 0762 08D0     		beq	.L63
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 1454              		.loc 1 1115 0
 1455 0764 7B68     		ldr	r3, [r7, #4]
 1456 0766 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1457 0768 9AB2     		uxth	r2, r3
 1458 076a BB89     		ldrh	r3, [r7, #12]	@ movhi
 1459 076c 1343     		orrs	r3, r3, r2
 1460 076e 9AB2     		uxth	r2, r3
 1461 0770 7B68     		ldr	r3, [r7, #4]
 1462 0772 9A80     		strh	r2, [r3, #4]	@ movhi
 1463 0774 0AE0     		b	.L62
 1464              	.L63:
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1465              		.loc 1 1120 0
 1466 0776 7B68     		ldr	r3, [r7, #4]
 1467 0778 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1468 077a 9AB2     		uxth	r2, r3
 1469 077c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1470 077e 6FEA0303 		mvn	r3, r3
 1471 0782 9BB2     		uxth	r3, r3
 1472 0784 1340     		ands	r3, r3, r2
 1473 0786 9AB2     		uxth	r2, r3
 1474 0788 7B68     		ldr	r3, [r7, #4]
 1475 078a 9A80     		strh	r2, [r3, #4]	@ movhi
 1476              	.L62:
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1477              		.loc 1 1122 0
 1478 078c 07F11407 		add	r7, r7, #20
 1479 0790 BD46     		mov	sp, r7
 1480 0792 80BC     		pop	{r7}
 1481 0794 7047     		bx	lr
 1482              		.cfi_endproc
 1483              	.LFE130:
 1485 0796 00BF     		.align	2
 1486              		.global	SPI_I2S_GetFlagStatus
 1487              		.thumb
 1488              		.thumb_func
 1490              	SPI_I2S_GetFlagStatus:
 1491              	.LFB131:
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1492              		.loc 1 1142 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 16
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496              		@ link register save eliminated.
 1497 0798 80B4     		push	{r7}
 1498              	.LCFI63:
 1499              		.cfi_def_cfa_offset 4
 1500              		.cfi_offset 7, -4
 1501 079a 85B0     		sub	sp, sp, #20
 1502              	.LCFI64:
 1503              		.cfi_def_cfa_offset 24
 1504 079c 00AF     		add	r7, sp, #0
 1505              	.LCFI65:
 1506              		.cfi_def_cfa_register 7
 1507 079e 7860     		str	r0, [r7, #4]
 1508 07a0 0B46     		mov	r3, r1
 1509 07a2 7B80     		strh	r3, [r7, #2]	@ movhi
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 1510              		.loc 1 1143 0
 1511 07a4 4FF00003 		mov	r3, #0
 1512 07a8 FB73     		strb	r3, [r7, #15]
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1513              		.loc 1 1149 0
 1514 07aa 7B68     		ldr	r3, [r7, #4]
 1515 07ac 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1516 07ae 9AB2     		uxth	r2, r3
 1517 07b0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1518 07b2 1340     		ands	r3, r3, r2
 1519 07b4 9BB2     		uxth	r3, r3
 1520 07b6 002B     		cmp	r3, #0
 1521 07b8 03D0     		beq	.L66
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1522              		.loc 1 1152 0
 1523 07ba 4FF00103 		mov	r3, #1
 1524 07be FB73     		strb	r3, [r7, #15]
 1525 07c0 02E0     		b	.L67
 1526              	.L66:
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1527              		.loc 1 1157 0
 1528 07c2 4FF00003 		mov	r3, #0
 1529 07c6 FB73     		strb	r3, [r7, #15]
 1530              	.L67:
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
 1531              		.loc 1 1160 0
 1532 07c8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1533              		.loc 1 1161 0
 1534 07ca 1846     		mov	r0, r3
 1535 07cc 07F11407 		add	r7, r7, #20
 1536 07d0 BD46     		mov	sp, r7
 1537 07d2 80BC     		pop	{r7}
 1538 07d4 7047     		bx	lr
 1539              		.cfi_endproc
 1540              	.LFE131:
 1542 07d6 00BF     		.align	2
 1543              		.global	SPI_I2S_ClearFlag
 1544              		.thumb
 1545              		.thumb_func
 1547              	SPI_I2S_ClearFlag:
 1548              	.LFB132:
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1549              		.loc 1 1183 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 8
 1552              		@ frame_needed = 1, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554 07d8 80B4     		push	{r7}
 1555              	.LCFI66:
 1556              		.cfi_def_cfa_offset 4
 1557              		.cfi_offset 7, -4
 1558 07da 83B0     		sub	sp, sp, #12
 1559              	.LCFI67:
 1560              		.cfi_def_cfa_offset 16
 1561 07dc 00AF     		add	r7, sp, #0
 1562              	.LCFI68:
 1563              		.cfi_def_cfa_register 7
 1564 07de 7860     		str	r0, [r7, #4]
 1565 07e0 0B46     		mov	r3, r1
 1566 07e2 7B80     		strh	r3, [r7, #2]	@ movhi
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1567              		.loc 1 1189 0
 1568 07e4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1569 07e6 6FEA0303 		mvn	r3, r3
 1570 07ea 9AB2     		uxth	r2, r3
 1571 07ec 7B68     		ldr	r3, [r7, #4]
 1572 07ee 1A81     		strh	r2, [r3, #8]	@ movhi
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1573              		.loc 1 1190 0
 1574 07f0 07F10C07 		add	r7, r7, #12
 1575 07f4 BD46     		mov	sp, r7
 1576 07f6 80BC     		pop	{r7}
 1577 07f8 7047     		bx	lr
 1578              		.cfi_endproc
 1579              	.LFE132:
 1581 07fa 00BF     		.align	2
 1582              		.global	SPI_I2S_GetITStatus
 1583              		.thumb
 1584              		.thumb_func
 1586              	SPI_I2S_GetITStatus:
 1587              	.LFB133:
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1588              		.loc 1 1208 0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 16
 1591              		@ frame_needed = 1, uses_anonymous_args = 0
 1592              		@ link register save eliminated.
 1593 07fc 80B4     		push	{r7}
 1594              	.LCFI69:
 1595              		.cfi_def_cfa_offset 4
 1596              		.cfi_offset 7, -4
 1597 07fe 85B0     		sub	sp, sp, #20
 1598              	.LCFI70:
 1599              		.cfi_def_cfa_offset 24
 1600 0800 00AF     		add	r7, sp, #0
 1601              	.LCFI71:
 1602              		.cfi_def_cfa_register 7
 1603 0802 7860     		str	r0, [r7, #4]
 1604 0804 0B46     		mov	r3, r1
 1605 0806 FB70     		strb	r3, [r7, #3]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 1606              		.loc 1 1209 0
 1607 0808 4FF00003 		mov	r3, #0
 1608 080c FB73     		strb	r3, [r7, #15]
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1609              		.loc 1 1210 0
 1610 080e 4FF00003 		mov	r3, #0
 1611 0812 BB81     		strh	r3, [r7, #12]	@ movhi
 1612 0814 4FF00003 		mov	r3, #0
 1613 0818 7B81     		strh	r3, [r7, #10]	@ movhi
 1614 081a 4FF00003 		mov	r3, #0
 1615 081e 3B81     		strh	r3, [r7, #8]	@ movhi
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1616              		.loc 1 1217 0
 1617 0820 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1618 0822 03F00F03 		and	r3, r3, #15
 1619 0826 4FF00102 		mov	r2, #1
 1620 082a 02FA03F3 		lsl	r3, r2, r3
 1621 082e BB81     		strh	r3, [r7, #12]	@ movhi
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1622              		.loc 1 1220 0
 1623 0830 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1624 0832 4FEA1313 		lsr	r3, r3, #4
 1625 0836 DBB2     		uxtb	r3, r3
 1626 0838 7B81     		strh	r3, [r7, #10]	@ movhi
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1627              		.loc 1 1223 0
 1628 083a 7B89     		ldrh	r3, [r7, #10]
 1629 083c 4FF00102 		mov	r2, #1
 1630 0840 02FA03F3 		lsl	r3, r2, r3
 1631 0844 7B81     		strh	r3, [r7, #10]	@ movhi
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1632              		.loc 1 1226 0
 1633 0846 7B68     		ldr	r3, [r7, #4]
 1634 0848 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1635 084a 9AB2     		uxth	r2, r3
 1636 084c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1637 084e 1340     		ands	r3, r3, r2
 1638 0850 3B81     		strh	r3, [r7, #8]	@ movhi
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1639              		.loc 1 1229 0
 1640 0852 7B68     		ldr	r3, [r7, #4]
 1641 0854 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1642 0856 9AB2     		uxth	r2, r3
 1643 0858 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1644 085a 1340     		ands	r3, r3, r2
 1645 085c 9BB2     		uxth	r3, r3
 1646 085e 002B     		cmp	r3, #0
 1647 0860 06D0     		beq	.L71
 1648              		.loc 1 1229 0 is_stmt 0 discriminator 1
 1649 0862 3B89     		ldrh	r3, [r7, #8]
 1650 0864 002B     		cmp	r3, #0
 1651 0866 03D0     		beq	.L71
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1652              		.loc 1 1232 0 is_stmt 1
 1653 0868 4FF00103 		mov	r3, #1
 1654 086c FB73     		strb	r3, [r7, #15]
 1655 086e 02E0     		b	.L72
 1656              	.L71:
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1657              		.loc 1 1237 0
 1658 0870 4FF00003 		mov	r3, #0
 1659 0874 FB73     		strb	r3, [r7, #15]
 1660              	.L72:
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
 1661              		.loc 1 1240 0
 1662 0876 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1663              		.loc 1 1241 0
 1664 0878 1846     		mov	r0, r3
 1665 087a 07F11407 		add	r7, r7, #20
 1666 087e BD46     		mov	sp, r7
 1667 0880 80BC     		pop	{r7}
 1668 0882 7047     		bx	lr
 1669              		.cfi_endproc
 1670              	.LFE133:
 1672              		.align	2
 1673              		.global	SPI_I2S_ClearITPendingBit
 1674              		.thumb
 1675              		.thumb_func
 1677              	SPI_I2S_ClearITPendingBit:
 1678              	.LFB134:
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1679              		.loc 1 1263 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 16
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683              		@ link register save eliminated.
 1684 0884 80B4     		push	{r7}
 1685              	.LCFI72:
 1686              		.cfi_def_cfa_offset 4
 1687              		.cfi_offset 7, -4
 1688 0886 85B0     		sub	sp, sp, #20
 1689              	.LCFI73:
 1690              		.cfi_def_cfa_offset 24
 1691 0888 00AF     		add	r7, sp, #0
 1692              	.LCFI74:
 1693              		.cfi_def_cfa_register 7
 1694 088a 7860     		str	r0, [r7, #4]
 1695 088c 0B46     		mov	r3, r1
 1696 088e FB70     		strb	r3, [r7, #3]
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 1697              		.loc 1 1264 0
 1698 0890 4FF00003 		mov	r3, #0
 1699 0894 FB81     		strh	r3, [r7, #14]	@ movhi
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1700              		.loc 1 1270 0
 1701 0896 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1702 0898 03F00F03 		and	r3, r3, #15
 1703 089c 4FF00102 		mov	r2, #1
 1704 08a0 02FA03F3 		lsl	r3, r2, r3
 1705 08a4 FB81     		strh	r3, [r7, #14]	@ movhi
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1706              		.loc 1 1273 0
 1707 08a6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1708 08a8 6FEA0303 		mvn	r3, r3
 1709 08ac 9AB2     		uxth	r2, r3
 1710 08ae 7B68     		ldr	r3, [r7, #4]
 1711 08b0 1A81     		strh	r2, [r3, #8]	@ movhi
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1712              		.loc 1 1274 0
 1713 08b2 07F11407 		add	r7, r7, #20
 1714 08b6 BD46     		mov	sp, r7
 1715 08b8 80BC     		pop	{r7}
 1716 08ba 7047     		bx	lr
 1717              		.cfi_endproc
 1718              	.LFE134:
 1720              	.Letext0:
 1721              		.file 2 "/opt/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 1722              		.file 3 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Device/ST/STM
 1723              		.file 4 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/STM32F4xx_StdPeriph
 1724              		.file 5 "/home/dev/arm/stm32/stm32f4/stm32f4-discovery/apps/template/Libraries/CMSIS/Include/core_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_spi.c
     /tmp/ccGUYumf.s:18     .text:00000000 $t
     /tmp/ccGUYumf.s:23     .text:00000000 SPI_I2S_DeInit
     /tmp/ccGUYumf.s:93     .text:00000074 $d
     /tmp/ccGUYumf.s:99     .text:00000080 $t
     /tmp/ccGUYumf.s:104    .text:00000080 SPI_Init
     /tmp/ccGUYumf.s:210    .text:00000108 I2S_Init
     /tmp/ccGUYumf.s:462    .text:000002ec $d
     /tmp/ccGUYumf.s:468    .text:000002f8 $t
     /tmp/ccGUYumf.s:473    .text:000002f8 SPI_StructInit
     /tmp/ccGUYumf.s:540    .text:00000354 I2S_StructInit
     /tmp/ccGUYumf.s:595    .text:00000398 SPI_Cmd
     /tmp/ccGUYumf.s:651    .text:000003d8 I2S_Cmd
     /tmp/ccGUYumf.s:707    .text:00000418 SPI_DataSizeConfig
     /tmp/ccGUYumf.s:757    .text:00000450 SPI_BiDirectionalLineConfig
     /tmp/ccGUYumf.s:813    .text:00000490 SPI_NSSInternalSoftwareConfig
     /tmp/ccGUYumf.s:870    .text:000004d4 SPI_SSOutputCmd
     /tmp/ccGUYumf.s:926    .text:00000514 SPI_TIModeCmd
     /tmp/ccGUYumf.s:982    .text:00000554 I2S_FullDuplexConfig
     /tmp/ccGUYumf.s:1093   .text:000005f8 SPI_I2S_ReceiveData
     /tmp/ccGUYumf.s:1129   .text:00000614 SPI_I2S_SendData
     /tmp/ccGUYumf.s:1166   .text:00000630 SPI_CalculateCRC
     /tmp/ccGUYumf.s:1222   .text:00000670 SPI_TransmitCRC
     /tmp/ccGUYumf.s:1261   .text:00000694 SPI_GetCRC
     /tmp/ccGUYumf.s:1315   .text:000006c8 SPI_GetCRCPolynomial
     /tmp/ccGUYumf.s:1351   .text:000006e4 SPI_I2S_DMACmd
     /tmp/ccGUYumf.s:1413   .text:0000072c SPI_I2S_ITConfig
     /tmp/ccGUYumf.s:1490   .text:00000798 SPI_I2S_GetFlagStatus
     /tmp/ccGUYumf.s:1547   .text:000007d8 SPI_I2S_ClearFlag
     /tmp/ccGUYumf.s:1586   .text:000007fc SPI_I2S_GetITStatus
     /tmp/ccGUYumf.s:1677   .text:00000884 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.ee386580922180e5cad1057f989de60d
                           .group:00000000 wm4.stm32f4xx.h.54.6e1f0ee5c76cc1e53c8ea6d18297b5fd
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_adc.h.108.1710484bf41297b93f825b3b15cbdff8
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rng.h.31.1ec493d56b7a8e5a71238519cae6dea7
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.misc.h.31.041217492a6cb86f2fb26099f373a465
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stm32f4xx_spi.h.119.6db2f565418ada6eb881ea09aedbcf3c

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
